// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PlatformCacheInterface is an autogenerated mock type for the PlatformCacheInterface type
type PlatformCacheInterface struct {
	mock.Mock
}

// GetCache provides a mock function with given fields: ctx, accessToken, collectionName, documentName
func (_m *PlatformCacheInterface) GetCache(ctx context.Context, accessToken string, collectionName string, documentName string) (interface{}, error) {
	ret := _m.Called(ctx, accessToken, collectionName, documentName)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = rf(ctx, accessToken, collectionName, documentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accessToken, collectionName, documentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCache provides a mock function with given fields: ctx, accessToken, collectionName, documentName, value, expiredAt
func (_m *PlatformCacheInterface) SetCache(ctx context.Context, accessToken string, collectionName string, documentName string, value interface{}, expiredAt string) (interface{}, error) {
	ret := _m.Called(ctx, accessToken, collectionName, documentName, value, expiredAt)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, string) interface{}); ok {
		r0 = rf(ctx, accessToken, collectionName, documentName, value, expiredAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, interface{}, string) error); ok {
		r1 = rf(ctx, accessToken, collectionName, documentName, value, expiredAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
