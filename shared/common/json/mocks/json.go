// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	response "los-kmb-api/models/response"
)

// JSON is an autogenerated mock type for the JSON type
type JSON struct {
	mock.Mock
}

// BadGateway provides a mock function with given fields: ctx, message
func (_m *JSON) BadGateway(ctx echo.Context, message string) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for BadGateway")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BadRequestErrorBindV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) BadRequestErrorBindV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for BadRequestErrorBindV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// BadRequestErrorValidationV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) BadRequestErrorValidationV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for BadRequestErrorValidationV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BadRequestErrorValidationV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) BadRequestErrorValidationV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for BadRequestErrorValidationV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// ErrorBindStandard provides a mock function with given fields: ctx, accessToken, logFile, code, req, err
func (_m *JSON) ErrorBindStandard(ctx echo.Context, accessToken string, logFile string, code string, req interface{}, err error) (error, response.ApiResponseV2) {
	ret := _m.Called(ctx, accessToken, logFile, code, req, err)

	if len(ret) == 0 {
		panic("no return value specified for ErrorBindStandard")
	}

	var r0 error
	var r1 response.ApiResponseV2
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponseV2)); ok {
		return rf(ctx, accessToken, logFile, code, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponseV2); ok {
		r1 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponseV2)
	}

	return r0, r1
}

// ErrorStandard provides a mock function with given fields: ctx, accessToken, logFile, code, req, err
func (_m *JSON) ErrorStandard(ctx echo.Context, accessToken string, logFile string, code string, req interface{}, err error) (error, response.ApiResponseV2) {
	ret := _m.Called(ctx, accessToken, logFile, code, req, err)

	if len(ret) == 0 {
		panic("no return value specified for ErrorStandard")
	}

	var r0 error
	var r1 response.ApiResponseV2
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponseV2)); ok {
		return rf(ctx, accessToken, logFile, code, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponseV2); ok {
		r1 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponseV2)
	}

	return r0, r1
}

// ErrorValidationStandard provides a mock function with given fields: ctx, accessToken, logFile, code, req, err
func (_m *JSON) ErrorValidationStandard(ctx echo.Context, accessToken string, logFile string, code string, req interface{}, err error) (error, response.ApiResponseV2) {
	ret := _m.Called(ctx, accessToken, logFile, code, req, err)

	if len(ret) == 0 {
		panic("no return value specified for ErrorValidationStandard")
	}

	var r0 error
	var r1 response.ApiResponseV2
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponseV2)); ok {
		return rf(ctx, accessToken, logFile, code, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponseV2); ok {
		r1 = rf(ctx, accessToken, logFile, code, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponseV2)
	}

	return r0, r1
}

// EventBadRequestErrorValidation provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) EventBadRequestErrorValidation(ctx context.Context, accessToken string, logFile string, message string, req interface{}, err error) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for EventBadRequestErrorValidation")
	}

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// EventRequestErrorBindV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) EventRequestErrorBindV3(ctx context.Context, accessToken string, logFile string, message string, req interface{}, err error) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for EventRequestErrorBindV3")
	}

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// EventServiceError provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) EventServiceError(ctx context.Context, accessToken string, logFile string, message string, req interface{}, err error) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for EventServiceError")
	}

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// EventSuccess provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) EventSuccess(ctx context.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	if len(ret) == 0 {
		panic("no return value specified for EventSuccess")
	}

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, interface{}) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// InternalServerErrorCustomV2 provides a mock function with given fields: ctx, accessToken, logFile, message, err
func (_m *JSON) InternalServerErrorCustomV2(ctx echo.Context, accessToken string, logFile string, message string, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, err)

	if len(ret) == 0 {
		panic("no return value specified for InternalServerErrorCustomV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InternalServerErrorCustomV3 provides a mock function with given fields: ctx, accessToken, logFile, message, err
func (_m *JSON) InternalServerErrorCustomV3(ctx echo.Context, accessToken string, logFile string, message string, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, err)

	if len(ret) == 0 {
		panic("no return value specified for InternalServerErrorCustomV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, error) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// ServerSideErrorV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) ServerSideErrorV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for ServerSideErrorV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerSideErrorV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) ServerSideErrorV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	if len(ret) == 0 {
		panic("no return value specified for ServerSideErrorV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, req, err)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// ServiceUnavailableV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req
func (_m *JSON) ServiceUnavailableV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUnavailableV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceUnavailableV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req
func (_m *JSON) ServiceUnavailableV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUnavailableV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, req)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// SuccessStandard provides a mock function with given fields: ctx, accessToken, logFile, code, req, data
func (_m *JSON) SuccessStandard(ctx echo.Context, accessToken string, logFile string, code string, req interface{}, data interface{}) (error, response.ApiResponseV2) {
	ret := _m.Called(ctx, accessToken, logFile, code, req, data)

	if len(ret) == 0 {
		panic("no return value specified for SuccessStandard")
	}

	var r0 error
	var r1 response.ApiResponseV2
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) (error, response.ApiResponseV2)); ok {
		return rf(ctx, accessToken, logFile, code, req, data)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, code, req, data)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, interface{}) response.ApiResponseV2); ok {
		r1 = rf(ctx, accessToken, logFile, code, req, data)
	} else {
		r1 = ret.Get(1).(response.ApiResponseV2)
	}

	return r0, r1
}

// SuccessV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) SuccessV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	if len(ret) == 0 {
		panic("no return value specified for SuccessV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SuccessV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) SuccessV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	if len(ret) == 0 {
		panic("no return value specified for SuccessV3")
	}

	var r0 error
	var r1 response.ApiResponse
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) (error, response.ApiResponse)); ok {
		return rf(ctx, accessToken, logFile, message, req, data)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, interface{}) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// NewJSON creates a new instance of JSON. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJSON(t interface {
	mock.TestingT
	Cleanup(func())
}) *JSON {
	mock := &JSON{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
