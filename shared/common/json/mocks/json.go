// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	response "los-kmb-api/models/response"
)

// JSON is an autogenerated mock type for the JSON type
type JSON struct {
	mock.Mock
}

// BadGateway provides a mock function with given fields: ctx, message
func (_m *JSON) BadGateway(ctx echo.Context, message string) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BadRequestErrorValidationV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) BadRequestErrorValidationV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BadRequestErrorValidationV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) BadRequestErrorValidationV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	var r1 response.ApiResponse
	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// EventBadRequestErrorValidation provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) EventBadRequestErrorValidation(ctx context.Context, accessToken string, logFile string, message string, req interface{}, err error) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// EventServiceError provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) EventServiceError(ctx context.Context, accessToken string, logFile string, message string, req interface{}, err error) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// EventSuccess provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) EventSuccess(ctx context.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) response.ApiResponse {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	var r0 response.ApiResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}, interface{}) response.ApiResponse); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Get(0).(response.ApiResponse)
	}

	return r0
}

// InternalServerErrorCustomV2 provides a mock function with given fields: ctx, accessToken, logFile, message, err
func (_m *JSON) InternalServerErrorCustomV2(ctx echo.Context, accessToken string, logFile string, message string, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InternalServerErrorCustomV3 provides a mock function with given fields: ctx, accessToken, logFile, message, err
func (_m *JSON) InternalServerErrorCustomV3(ctx echo.Context, accessToken string, logFile string, message string, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r0 = ret.Error(0)
	}

	var r1 response.ApiResponse
	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// ServerSideErrorV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) ServerSideErrorV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerSideErrorV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, err
func (_m *JSON) ServerSideErrorV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, err error) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, error) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r0 = ret.Error(0)
	}

	var r1 response.ApiResponse
	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, error) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, err)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// ServiceUnavailableV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req
func (_m *JSON) ServiceUnavailableV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceUnavailableV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req
func (_m *JSON) ServiceUnavailableV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r0 = ret.Error(0)
	}

	var r1 response.ApiResponse
	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}

// SuccessV2 provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) SuccessV2(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) error {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SuccessV3 provides a mock function with given fields: ctx, accessToken, logFile, message, req, data
func (_m *JSON) SuccessV3(ctx echo.Context, accessToken string, logFile string, message string, req interface{}, data interface{}) (error, response.ApiResponse) {
	ret := _m.Called(ctx, accessToken, logFile, message, req, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, string, string, string, interface{}, interface{}) error); ok {
		r0 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r0 = ret.Error(0)
	}

	var r1 response.ApiResponse
	if rf, ok := ret.Get(1).(func(echo.Context, string, string, string, interface{}, interface{}) response.ApiResponse); ok {
		r1 = rf(ctx, accessToken, logFile, message, req, data)
	} else {
		r1 = ret.Get(1).(response.ApiResponse)
	}

	return r0, r1
}
