// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	platform "github.com/KB-FMF/platform-library"
	mock "github.com/stretchr/testify/mock"
)

// PlatformAuthInterface is an autogenerated mock type for the PlatformAuthInterface type
type PlatformAuthInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: data
func (_m *PlatformAuthInterface) Login(data map[string]interface{}) (*platform.Response, *platform.Error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *platform.Response
	var r1 *platform.Error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*platform.Response, *platform.Error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *platform.Response); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) *platform.Error); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*platform.Error)
		}
	}

	return r0, r1
}

// Validation provides a mock function with given fields: token, appName
func (_m *PlatformAuthInterface) Validation(token string, appName string) (*platform.Response, *platform.Error) {
	ret := _m.Called(token, appName)

	if len(ret) == 0 {
		panic("no return value specified for Validation")
	}

	var r0 *platform.Response
	var r1 *platform.Error
	if rf, ok := ret.Get(0).(func(string, string) (*platform.Response, *platform.Error)); ok {
		return rf(token, appName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *platform.Response); ok {
		r0 = rf(token, appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*platform.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *platform.Error); ok {
		r1 = rf(token, appName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*platform.Error)
		}
	}

	return r0, r1
}

// NewPlatformAuthInterface creates a new instance of PlatformAuthInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlatformAuthInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlatformAuthInterface {
	mock := &PlatformAuthInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
