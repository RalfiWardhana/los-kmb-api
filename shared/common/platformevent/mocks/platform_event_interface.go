// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// PlatformEventInterface is an autogenerated mock type for the PlatformEventInterface type
type PlatformEventInterface struct {
	mock.Mock
}

// PublishEvent provides a mock function with given fields: ctx, accessToken, topicName, key, id, value, countRetry
func (_m *PlatformEventInterface) PublishEvent(ctx context.Context, accessToken string, topicName string, key string, id string, value map[string]interface{}, countRetry int) error {
	ret := _m.Called(ctx, accessToken, topicName, key, id, value, countRetry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, map[string]interface{}, int) error); ok {
		r0 = rf(ctx, accessToken, topicName, key, id, value, countRetry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPlatformEventInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlatformEventInterface creates a new instance of PlatformEventInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlatformEventInterface(t mockConstructorTestingTNewPlatformEventInterface) *PlatformEventInterface {
	mock := &PlatformEventInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
