// Code generated by counterfeiter. DO NOT EDIT.
package httpclientfakes

import (
	"context"
	"los-kmb-api/shared/httpclient"
	"sync"

	resty "github.com/go-resty/resty/v2"
)

type FakeHttpClient struct {
	CustomerAPIStub        func(context.Context, string, string, []byte, string, string, string, string) (*resty.Response, error)
	customerAPIMutex       sync.RWMutex
	customerAPIArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []byte
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}
	customerAPIReturns struct {
		result1 *resty.Response
		result2 error
	}
	customerAPIReturnsOnCall map[int]struct {
		result1 *resty.Response
		result2 error
	}
	EngineAPIStub        func(context.Context, string, string, []byte, map[string]string, string, bool, int, int, string, string) (*resty.Response, error)
	engineAPIMutex       sync.RWMutex
	engineAPIArgsForCall []struct {
		arg1  context.Context
		arg2  string
		arg3  string
		arg4  []byte
		arg5  map[string]string
		arg6  string
		arg7  bool
		arg8  int
		arg9  int
		arg10 string
		arg11 string
	}
	engineAPIReturns struct {
		result1 *resty.Response
		result2 error
	}
	engineAPIReturnsOnCall map[int]struct {
		result1 *resty.Response
		result2 error
	}
	MediaClientStub        func(context.Context, string, string, string, interface{}, map[string]string, int, int, string) (*resty.Response, error)
	mediaClientMutex       sync.RWMutex
	mediaClientArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 interface{}
		arg6 map[string]string
		arg7 int
		arg8 int
		arg9 string
	}
	mediaClientReturns struct {
		result1 *resty.Response
		result2 error
	}
	mediaClientReturnsOnCall map[int]struct {
		result1 *resty.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttpClient) CustomerAPI(arg1 context.Context, arg2 string, arg3 string, arg4 []byte, arg5 string, arg6 string, arg7 string, arg8 string) (*resty.Response, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.customerAPIMutex.Lock()
	ret, specificReturn := fake.customerAPIReturnsOnCall[len(fake.customerAPIArgsForCall)]
	fake.customerAPIArgsForCall = append(fake.customerAPIArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 []byte
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7, arg8})
	stub := fake.CustomerAPIStub
	fakeReturns := fake.customerAPIReturns
	fake.recordInvocation("CustomerAPI", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7, arg8})
	fake.customerAPIMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) CustomerAPICallCount() int {
	fake.customerAPIMutex.RLock()
	defer fake.customerAPIMutex.RUnlock()
	return len(fake.customerAPIArgsForCall)
}

func (fake *FakeHttpClient) CustomerAPICalls(stub func(context.Context, string, string, []byte, string, string, string, string) (*resty.Response, error)) {
	fake.customerAPIMutex.Lock()
	defer fake.customerAPIMutex.Unlock()
	fake.CustomerAPIStub = stub
}

func (fake *FakeHttpClient) CustomerAPIArgsForCall(i int) (context.Context, string, string, []byte, string, string, string, string) {
	fake.customerAPIMutex.RLock()
	defer fake.customerAPIMutex.RUnlock()
	argsForCall := fake.customerAPIArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeHttpClient) CustomerAPIReturns(result1 *resty.Response, result2 error) {
	fake.customerAPIMutex.Lock()
	defer fake.customerAPIMutex.Unlock()
	fake.CustomerAPIStub = nil
	fake.customerAPIReturns = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) CustomerAPIReturnsOnCall(i int, result1 *resty.Response, result2 error) {
	fake.customerAPIMutex.Lock()
	defer fake.customerAPIMutex.Unlock()
	fake.CustomerAPIStub = nil
	if fake.customerAPIReturnsOnCall == nil {
		fake.customerAPIReturnsOnCall = make(map[int]struct {
			result1 *resty.Response
			result2 error
		})
	}
	fake.customerAPIReturnsOnCall[i] = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) EngineAPI(arg1 context.Context, arg2 string, arg3 string, arg4 []byte, arg5 map[string]string, arg6 string, arg7 bool, arg8 int, arg9 int, arg10 string, arg11 string) (*resty.Response, error) {
	var arg4Copy []byte
	if arg4 != nil {
		arg4Copy = make([]byte, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.engineAPIMutex.Lock()
	ret, specificReturn := fake.engineAPIReturnsOnCall[len(fake.engineAPIArgsForCall)]
	fake.engineAPIArgsForCall = append(fake.engineAPIArgsForCall, struct {
		arg1  context.Context
		arg2  string
		arg3  string
		arg4  []byte
		arg5  map[string]string
		arg6  string
		arg7  bool
		arg8  int
		arg9  int
		arg10 string
		arg11 string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	stub := fake.EngineAPIStub
	fakeReturns := fake.engineAPIReturns
	fake.recordInvocation("EngineAPI", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7, arg8, arg9, arg10, arg11})
	fake.engineAPIMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) EngineAPICallCount() int {
	fake.engineAPIMutex.RLock()
	defer fake.engineAPIMutex.RUnlock()
	return len(fake.engineAPIArgsForCall)
}

func (fake *FakeHttpClient) EngineAPICalls(stub func(context.Context, string, string, []byte, map[string]string, string, bool, int, int, string, string) (*resty.Response, error)) {
	fake.engineAPIMutex.Lock()
	defer fake.engineAPIMutex.Unlock()
	fake.EngineAPIStub = stub
}

func (fake *FakeHttpClient) EngineAPIArgsForCall(i int) (context.Context, string, string, []byte, map[string]string, string, bool, int, int, string, string) {
	fake.engineAPIMutex.RLock()
	defer fake.engineAPIMutex.RUnlock()
	argsForCall := fake.engineAPIArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9, argsForCall.arg10, argsForCall.arg11
}

func (fake *FakeHttpClient) EngineAPIReturns(result1 *resty.Response, result2 error) {
	fake.engineAPIMutex.Lock()
	defer fake.engineAPIMutex.Unlock()
	fake.EngineAPIStub = nil
	fake.engineAPIReturns = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) EngineAPIReturnsOnCall(i int, result1 *resty.Response, result2 error) {
	fake.engineAPIMutex.Lock()
	defer fake.engineAPIMutex.Unlock()
	fake.EngineAPIStub = nil
	if fake.engineAPIReturnsOnCall == nil {
		fake.engineAPIReturnsOnCall = make(map[int]struct {
			result1 *resty.Response
			result2 error
		})
	}
	fake.engineAPIReturnsOnCall[i] = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) MediaClient(arg1 context.Context, arg2 string, arg3 string, arg4 string, arg5 interface{}, arg6 map[string]string, arg7 int, arg8 int, arg9 string) (*resty.Response, error) {
	fake.mediaClientMutex.Lock()
	ret, specificReturn := fake.mediaClientReturnsOnCall[len(fake.mediaClientArgsForCall)]
	fake.mediaClientArgsForCall = append(fake.mediaClientArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
		arg5 interface{}
		arg6 map[string]string
		arg7 int
		arg8 int
		arg9 string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9})
	stub := fake.MediaClientStub
	fakeReturns := fake.mediaClientReturns
	fake.recordInvocation("MediaClient", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9})
	fake.mediaClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeHttpClient) MediaClientCallCount() int {
	fake.mediaClientMutex.RLock()
	defer fake.mediaClientMutex.RUnlock()
	return len(fake.mediaClientArgsForCall)
}

func (fake *FakeHttpClient) MediaClientCalls(stub func(context.Context, string, string, string, interface{}, map[string]string, int, int, string) (*resty.Response, error)) {
	fake.mediaClientMutex.Lock()
	defer fake.mediaClientMutex.Unlock()
	fake.MediaClientStub = stub
}

func (fake *FakeHttpClient) MediaClientArgsForCall(i int) (context.Context, string, string, string, interface{}, map[string]string, int, int, string) {
	fake.mediaClientMutex.RLock()
	defer fake.mediaClientMutex.RUnlock()
	argsForCall := fake.mediaClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8, argsForCall.arg9
}

func (fake *FakeHttpClient) MediaClientReturns(result1 *resty.Response, result2 error) {
	fake.mediaClientMutex.Lock()
	defer fake.mediaClientMutex.Unlock()
	fake.MediaClientStub = nil
	fake.mediaClientReturns = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) MediaClientReturnsOnCall(i int, result1 *resty.Response, result2 error) {
	fake.mediaClientMutex.Lock()
	defer fake.mediaClientMutex.Unlock()
	fake.MediaClientStub = nil
	if fake.mediaClientReturnsOnCall == nil {
		fake.mediaClientReturnsOnCall = make(map[int]struct {
			result1 *resty.Response
			result2 error
		})
	}
	fake.mediaClientReturnsOnCall[i] = struct {
		result1 *resty.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.customerAPIMutex.RLock()
	defer fake.customerAPIMutex.RUnlock()
	fake.engineAPIMutex.RLock()
	defer fake.engineAPIMutex.RUnlock()
	fake.mediaClientMutex.RLock()
	defer fake.mediaClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHttpClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ httpclient.HttpClient = new(FakeHttpClient)
