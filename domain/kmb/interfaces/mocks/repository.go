// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetActiveLoanTypeLast24M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast24M(customerID string) (entity.GetActiveLoanTypeLast24M, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLoanTypeLast24M")
	}

	var r0 entity.GetActiveLoanTypeLast24M
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetActiveLoanTypeLast24M, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast24M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast24M)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveLoanTypeLast6M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast6M(customerID string) (entity.GetActiveLoanTypeLast6M, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLoanTypeLast6M")
	}

	var r0 entity.GetActiveLoanTypeLast6M
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetActiveLoanTypeLast6M, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast6M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast6M)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReject provides a mock function with given fields: idNumber
func (_m *Repository) GetAllReject(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReject")
	}

	var r0 []entity.DupcheckRejectionPMK
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.DupcheckRejectionPMK, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedChassisNumber provides a mock function with given fields: chassisNumber
func (_m *Repository) GetBannedChassisNumber(chassisNumber string) (entity.TrxBannedChassisNumber, error) {
	ret := _m.Called(chassisNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBannedChassisNumber")
	}

	var r0 entity.TrxBannedChassisNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxBannedChassisNumber, error)); ok {
		return rf(chassisNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxBannedChassisNumber); ok {
		r0 = rf(chassisNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxBannedChassisNumber)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chassisNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedPMKDSR provides a mock function with given fields: idNumber
func (_m *Repository) GetBannedPMKDSR(idNumber string) (entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBannedPMKDSR")
	}

	var r0 entity.TrxBannedPMKDSR
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxBannedPMKDSR, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxBannedPMKDSR); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxBannedPMKDSR)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranchDeviasi provides a mock function with given fields: BranchID, customerStatus, NTF
func (_m *Repository) GetBranchDeviasi(BranchID string, customerStatus string, NTF float64) (entity.MappingBranchDeviasi, error) {
	ret := _m.Called(BranchID, customerStatus, NTF)

	if len(ret) == 0 {
		panic("no return value specified for GetBranchDeviasi")
	}

	var r0 entity.MappingBranchDeviasi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64) (entity.MappingBranchDeviasi, error)); ok {
		return rf(BranchID, customerStatus, NTF)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64) entity.MappingBranchDeviasi); ok {
		r0 = rf(BranchID, customerStatus, NTF)
	} else {
		r0 = ret.Get(0).(entity.MappingBranchDeviasi)
	}

	if rf, ok := ret.Get(1).(func(string, string, float64) error); ok {
		r1 = rf(BranchID, customerStatus, NTF)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckingRejectAttempt provides a mock function with given fields: idNumber, blackListDate
func (_m *Repository) GetCheckingRejectAttempt(idNumber string, blackListDate string) (entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber, blackListDate)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckingRejectAttempt")
	}

	var r0 entity.DupcheckRejectionPMK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.DupcheckRejectionPMK, error)); ok {
		return rf(idNumber, blackListDate)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber, blackListDate)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionPMK)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(idNumber, blackListDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) (entity.AppConfig, error) {
	ret := _m.Called(groupName, lob, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 entity.AppConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (entity.AppConfig, error)); ok {
		return rf(groupName, lob, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(groupName, lob, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithReject provides a mock function with given fields: idNumber
func (_m *Repository) GetCurrentTrxWithReject(idNumber string) (entity.TrxReject, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentTrxWithReject")
	}

	var r0 entity.TrxReject
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxReject, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxReject); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxReject)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithRejectChassisNumber provides a mock function with given fields: chassisNumber
func (_m *Repository) GetCurrentTrxWithRejectChassisNumber(chassisNumber string) ([]entity.RejectChassisNumber, error) {
	ret := _m.Called(chassisNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentTrxWithRejectChassisNumber")
	}

	var r0 []entity.RejectChassisNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.RejectChassisNumber, error)); ok {
		return rf(chassisNumber)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.RejectChassisNumber); ok {
		r0 = rf(chassisNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RejectChassisNumber)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chassisNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithRejectDSR provides a mock function with given fields: idNumber
func (_m *Repository) GetCurrentTrxWithRejectDSR(idNumber string) (entity.TrxStatus, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentTrxWithRejectDSR")
	}

	var r0 entity.TrxStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxStatus, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxStatus); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElaborateLtv provides a mock function with given fields: prospectID
func (_m *Repository) GetElaborateLtv(prospectID string) (entity.MappingElaborateLTV, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetElaborateLtv")
	}

	var r0 entity.MappingElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.MappingElaborateLTV, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.MappingElaborateLTV); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.MappingElaborateLTV)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncB64 provides a mock function with given fields: myString
func (_m *Repository) GetEncB64(myString string) (entity.EncryptedString, error) {
	ret := _m.Called(myString)

	if len(ret) == 0 {
		panic("no return value specified for GetEncB64")
	}

	var r0 entity.EncryptedString
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.EncryptedString, error)); ok {
		return rf(myString)
	}
	if rf, ok := ret.Get(0).(func(string) entity.EncryptedString); ok {
		r0 = rf(myString)
	} else {
		r0 = ret.Get(0).(entity.EncryptedString)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(myString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncryptedValue provides a mock function with given fields: idNumber, legalName, motherName
func (_m *Repository) GetEncryptedValue(idNumber string, legalName string, motherName string) (entity.Encrypted, error) {
	ret := _m.Called(idNumber, legalName, motherName)

	if len(ret) == 0 {
		panic("no return value specified for GetEncryptedValue")
	}

	var r0 entity.Encrypted
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (entity.Encrypted, error)); ok {
		return rf(idNumber, legalName, motherName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) entity.Encrypted); ok {
		r0 = rf(idNumber, legalName, motherName)
	} else {
		r0 = ret.Get(0).(entity.Encrypted)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(idNumber, legalName, motherName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringForJourney provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringForJourney(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringForJourney")
	}

	var r0 entity.FilteringKMB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.FilteringKMB, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringResult")
	}

	var r0 entity.FilteringKMB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.FilteringKMB, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryRejectAttempt provides a mock function with given fields: idNumber
func (_m *Repository) GetHistoryRejectAttempt(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryRejectAttempt")
	}

	var r0 []entity.DupcheckRejectionPMK
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.DupcheckRejectionPMK, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBannedRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestBannedRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestBannedRejectionNoka")
	}

	var r0 entity.DupcheckRejectionNokaNosin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DupcheckRejectionNokaNosin, error)); ok {
		return rf(noRangka)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestRejectionNoka")
	}

	var r0 entity.DupcheckRejectionNokaNosin
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DupcheckRejectionNokaNosin, error)); ok {
		return rf(noRangka)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogOrchestrator provides a mock function with given fields: prospectID
func (_m *Repository) GetLogOrchestrator(prospectID string) (entity.LogOrchestrator, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetLogOrchestrator")
	}

	var r0 entity.LogOrchestrator
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.LogOrchestrator, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.LogOrchestrator); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.LogOrchestrator)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDeviasi provides a mock function with given fields: prospectID
func (_m *Repository) GetMappingDeviasi(prospectID string) (entity.ConfirmDeviasi, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingDeviasi")
	}

	var r0 entity.ConfirmDeviasi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ConfirmDeviasi, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ConfirmDeviasi); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.ConfirmDeviasi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDukcapil provides a mock function with given fields: statusVD, statusFR, customerStatus, customerSegment
func (_m *Repository) GetMappingDukcapil(statusVD string, statusFR string, customerStatus string, customerSegment string) (entity.MappingResultDukcapil, error) {
	ret := _m.Called(statusVD, statusFR, customerStatus, customerSegment)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingDukcapil")
	}

	var r0 entity.MappingResultDukcapil
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (entity.MappingResultDukcapil, error)); ok {
		return rf(statusVD, statusFR, customerStatus, customerSegment)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) entity.MappingResultDukcapil); ok {
		r0 = rf(statusVD, statusFR, customerStatus, customerSegment)
	} else {
		r0 = ret.Get(0).(entity.MappingResultDukcapil)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(statusVD, statusFR, customerStatus, customerSegment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDukcapilVD provides a mock function with given fields: statusVD, customerStatus, customerSegment, isValid
func (_m *Repository) GetMappingDukcapilVD(statusVD string, customerStatus string, customerSegment string, isValid bool) (entity.MappingResultDukcapilVD, error) {
	ret := _m.Called(statusVD, customerStatus, customerSegment, isValid)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingDukcapilVD")
	}

	var r0 entity.MappingResultDukcapilVD
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) (entity.MappingResultDukcapilVD, error)); ok {
		return rf(statusVD, customerStatus, customerSegment, isValid)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool) entity.MappingResultDukcapilVD); ok {
		r0 = rf(statusVD, customerStatus, customerSegment, isValid)
	} else {
		r0 = ret.Get(0).(entity.MappingResultDukcapilVD)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool) error); ok {
		r1 = rf(statusVD, customerStatus, customerSegment, isValid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateIncome provides a mock function with given fields: mappingElaborateIncome
func (_m *Repository) GetMappingElaborateIncome(mappingElaborateIncome entity.MappingElaborateIncome) (entity.MappingElaborateIncome, error) {
	ret := _m.Called(mappingElaborateIncome)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingElaborateIncome")
	}

	var r0 entity.MappingElaborateIncome
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.MappingElaborateIncome) (entity.MappingElaborateIncome, error)); ok {
		return rf(mappingElaborateIncome)
	}
	if rf, ok := ret.Get(0).(func(entity.MappingElaborateIncome) entity.MappingElaborateIncome); ok {
		r0 = rf(mappingElaborateIncome)
	} else {
		r0 = ret.Get(0).(entity.MappingElaborateIncome)
	}

	if rf, ok := ret.Get(1).(func(entity.MappingElaborateIncome) error); ok {
		r1 = rf(mappingElaborateIncome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingNegativeCustomer provides a mock function with given fields: req
func (_m *Repository) GetMappingNegativeCustomer(req response.NegativeCustomer) (entity.MappingNegativeCustomer, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingNegativeCustomer")
	}

	var r0 entity.MappingNegativeCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(response.NegativeCustomer) (entity.MappingNegativeCustomer, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(response.NegativeCustomer) entity.MappingNegativeCustomer); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MappingNegativeCustomer)
	}

	if rf, ok := ret.Get(1).(func(response.NegativeCustomer) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingVehicleAge provides a mock function with given fields: vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af
func (_m *Repository) GetMappingVehicleAge(vehicleAge int, cluster string, bpkbNameType int, tenor int, resultPefindo string, af float64) (entity.MappingVehicleAge, error) {
	ret := _m.Called(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingVehicleAge")
	}

	var r0 entity.MappingVehicleAge
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, int, int, string, float64) (entity.MappingVehicleAge, error)); ok {
		return rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	}
	if rf, ok := ret.Get(0).(func(int, string, int, int, string, float64) entity.MappingVehicleAge); ok {
		r0 = rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	} else {
		r0 = ret.Get(0).(entity.MappingVehicleAge)
	}

	if rf, ok := ret.Get(1).(func(int, string, int, int, string, float64) error); ok {
		r1 = rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterBranch provides a mock function with given fields: branchID
func (_m *Repository) GetMasterBranch(branchID string) (entity.MasterBranch, error) {
	ret := _m.Called(branchID)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterBranch")
	}

	var r0 entity.MasterBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.MasterBranch, error)); ok {
		return rf(branchID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.MasterBranch); ok {
		r0 = rf(branchID)
	} else {
		r0 = ret.Get(0).(entity.MasterBranch)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(branchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinimalIncomePMK provides a mock function with given fields: branchID, statusKonsumen
func (_m *Repository) GetMinimalIncomePMK(branchID string, statusKonsumen string) (entity.MappingIncomePMK, error) {
	ret := _m.Called(branchID, statusKonsumen)

	if len(ret) == 0 {
		panic("no return value specified for GetMinimalIncomePMK")
	}

	var r0 entity.MappingIncomePMK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.MappingIncomePMK, error)); ok {
		return rf(branchID, statusKonsumen)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.MappingIncomePMK); ok {
		r0 = rf(branchID, statusKonsumen)
	} else {
		r0 = ret.Get(0).(entity.MappingIncomePMK)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branchID, statusKonsumen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoblast provides a mock function with given fields: customerID
func (_m *Repository) GetMoblast(customerID string) (entity.GetMoblast, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetMoblast")
	}

	var r0 entity.GetMoblast
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetMoblast, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetMoblast); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetMoblast)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleEmergencyContact provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleEmergencyContact(prospectID string) (entity.TrxPrincipleEmergencyContact, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleEmergencyContact")
	}

	var r0 entity.TrxPrincipleEmergencyContact
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleEmergencyContact, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleEmergencyContact); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleEmergencyContact)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepOne provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepOne(prospectID string) (entity.TrxPrincipleStepOne, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepOne")
	}

	var r0 entity.TrxPrincipleStepOne
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepOne, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepOne); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepOne)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepThree provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepThree(prospectID string) (entity.TrxPrincipleStepThree, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepThree")
	}

	var r0 entity.TrxPrincipleStepThree
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepThree, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepThree); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepThree)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepTwo provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepTwo(prospectID string) (entity.TrxPrincipleStepTwo, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepTwo")
	}

	var r0 entity.TrxPrincipleStepTwo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepTwo, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepTwo); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepTwo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecalculate provides a mock function with given fields: prospectID
func (_m *Repository) GetRecalculate(prospectID string) (entity.GetRecalculate, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetRecalculate")
	}

	var r0 entity.GetRecalculate
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetRecalculate, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetRecalculate); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.GetRecalculate)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGenerator provides a mock function with given fields: zipCode
func (_m *Repository) GetScoreGenerator(zipCode string) (entity.ScoreGenerator, error) {
	ret := _m.Called(zipCode)

	if len(ret) == 0 {
		panic("no return value specified for GetScoreGenerator")
	}

	var r0 entity.ScoreGenerator
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScoreGenerator, error)); ok {
		return rf(zipCode)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScoreGenerator); ok {
		r0 = rf(zipCode)
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zipCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGeneratorROAO provides a mock function with given fields:
func (_m *Repository) GetScoreGeneratorROAO() (entity.ScoreGenerator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScoreGeneratorROAO")
	}

	var r0 entity.ScoreGenerator
	var r1 error
	if rf, ok := ret.Get(0).(func() (entity.ScoreGenerator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entity.ScoreGenerator); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxCancel provides a mock function with given fields: idNumber, config
func (_m *Repository) GetTrxCancel(idNumber string, config response.LockSystemConfig) ([]entity.TrxLockSystem, error) {
	ret := _m.Called(idNumber, config)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxCancel")
	}

	var r0 []entity.TrxLockSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, response.LockSystemConfig) ([]entity.TrxLockSystem, error)); ok {
		return rf(idNumber, config)
	}
	if rf, ok := ret.Get(0).(func(string, response.LockSystemConfig) []entity.TrxLockSystem); ok {
		r0 = rf(idNumber, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxLockSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, response.LockSystemConfig) error); ok {
		r1 = rf(idNumber, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxDetailBIro provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxDetailBIro(prospectID string) ([]entity.TrxDetailBiro, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxDetailBIro")
	}

	var r0 []entity.TrxDetailBiro
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.TrxDetailBiro, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.TrxDetailBiro); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxDetailBiro)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxJourney provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxJourney(prospectID string) (entity.TrxJourney, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxJourney")
	}

	var r0 entity.TrxJourney
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxJourney, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxJourney); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxJourney)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxKPM provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxKPM(prospectID string) (entity.TrxKPM, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxKPM")
	}

	var r0 entity.TrxKPM
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxKPM, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxKPM); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxKPM)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxLockSystem provides a mock function with given fields: idNumber
func (_m *Repository) GetTrxLockSystem(idNumber string) (entity.TrxLockSystem, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxLockSystem")
	}

	var r0 entity.TrxLockSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxLockSystem, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxLockSystem); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxLockSystem)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxReject provides a mock function with given fields: idNumber, config
func (_m *Repository) GetTrxReject(idNumber string, config response.LockSystemConfig) ([]entity.TrxLockSystem, error) {
	ret := _m.Called(idNumber, config)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxReject")
	}

	var r0 []entity.TrxLockSystem
	var r1 error
	if rf, ok := ret.Get(0).(func(string, response.LockSystemConfig) ([]entity.TrxLockSystem, error)); ok {
		return rf(idNumber, config)
	}
	if rf, ok := ret.Get(0).(func(string, response.LockSystemConfig) []entity.TrxLockSystem); ok {
		r0 = rf(idNumber, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxLockSystem)
		}
	}

	if rf, ok := ret.Get(1).(func(string, response.LockSystemConfig) error); ok {
		r1 = rf(idNumber, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingCluster provides a mock function with given fields: req
func (_m *Repository) MasterMappingCluster(req entity.MasterMappingCluster) (entity.MasterMappingCluster, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingCluster")
	}

	var r0 entity.MasterMappingCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) (entity.MasterMappingCluster, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) entity.MasterMappingCluster); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingCluster)
	}

	if rf, ok := ret.Get(1).(func(entity.MasterMappingCluster) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingDeviasiDSR provides a mock function with given fields: totalIncome
func (_m *Repository) MasterMappingDeviasiDSR(totalIncome float64) (entity.MasterMappingDeviasiDSR, error) {
	ret := _m.Called(totalIncome)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingDeviasiDSR")
	}

	var r0 entity.MasterMappingDeviasiDSR
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (entity.MasterMappingDeviasiDSR, error)); ok {
		return rf(totalIncome)
	}
	if rf, ok := ret.Get(0).(func(float64) entity.MasterMappingDeviasiDSR); ok {
		r0 = rf(totalIncome)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingDeviasiDSR)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(totalIncome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingIncomeMaxDSR provides a mock function with given fields: totalIncome
func (_m *Repository) MasterMappingIncomeMaxDSR(totalIncome float64) (entity.MasterMappingIncomeMaxDSR, error) {
	ret := _m.Called(totalIncome)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingIncomeMaxDSR")
	}

	var r0 entity.MasterMappingIncomeMaxDSR
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (entity.MasterMappingIncomeMaxDSR, error)); ok {
		return rf(totalIncome)
	}
	if rf, ok := ret.Get(0).(func(float64) entity.MasterMappingIncomeMaxDSR); ok {
		r0 = rf(totalIncome)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingIncomeMaxDSR)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(totalIncome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingMaxDSR provides a mock function with given fields: req
func (_m *Repository) MasterMappingMaxDSR(req entity.MasterMappingMaxDSR) (entity.MasterMappingMaxDSR, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingMaxDSR")
	}

	var r0 entity.MasterMappingMaxDSR
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.MasterMappingMaxDSR) (entity.MasterMappingMaxDSR, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.MasterMappingMaxDSR) entity.MasterMappingMaxDSR); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingMaxDSR)
	}

	if rf, ok := ret.Get(1).(func(entity.MasterMappingMaxDSR) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataApiLog provides a mock function with given fields: data
func (_m *Repository) SaveDataApiLog(data entity.TrxApiLog) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveDataApiLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxApiLog) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDataNoka provides a mock function with given fields: data
func (_m *Repository) SaveDataNoka(data entity.DupcheckRejectionNokaNosin) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveDataNoka")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.DupcheckRejectionNokaNosin) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, _a2, path, method, prospectID, requestID)

	if len(ret) == 0 {
		panic("no return value specified for SaveLogOrchestrator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecalculate provides a mock function with given fields: beforeRecalculate, afterRecalculate
func (_m *Repository) SaveRecalculate(beforeRecalculate entity.TrxRecalculate, afterRecalculate entity.TrxRecalculate) error {
	ret := _m.Called(beforeRecalculate, afterRecalculate)

	if len(ret) == 0 {
		panic("no return value specified for SaveRecalculate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxRecalculate, entity.TrxRecalculate) error); ok {
		r0 = rf(beforeRecalculate, afterRecalculate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveToStaging provides a mock function with given fields: prospectID
func (_m *Repository) SaveToStaging(prospectID string) error {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for SaveToStaging")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransaction provides a mock function with given fields: countTrx, data, trxPrescreening, trxFMF, details, reason
func (_m *Repository) SaveTransaction(countTrx int, data request.Metrics, trxPrescreening entity.TrxPrescreening, trxFMF response.TrxFMF, details []entity.TrxDetail, reason string) error {
	ret := _m.Called(countTrx, data, trxPrescreening, trxFMF, details, reason)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) error); ok {
		r0 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxJourney provides a mock function with given fields: prospectID, _a1
func (_m *Repository) SaveTrxJourney(prospectID string, _a1 interface{}) error {
	ret := _m.Called(prospectID, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveTrxJourney")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(prospectID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxLockSystem provides a mock function with given fields: trxLockSystem
func (_m *Repository) SaveTrxLockSystem(trxLockSystem entity.TrxLockSystem) error {
	ret := _m.Called(trxLockSystem)

	if len(ret) == 0 {
		panic("no return value specified for SaveTrxLockSystem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxLockSystem) error); ok {
		r0 = rf(trxLockSystem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveVerificationFaceCompare provides a mock function with given fields: data
func (_m *Repository) SaveVerificationFaceCompare(data entity.VerificationFaceCompare) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveVerificationFaceCompare")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.VerificationFaceCompare) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanKmbOff provides a mock function with given fields: query
func (_m *Repository) ScanKmbOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ScanKmbOff")
	}

	var r0 entity.ScanInstallmentAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScanInstallmentAmount, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanKmobOff provides a mock function with given fields: query
func (_m *Repository) ScanKmobOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ScanKmobOff")
	}

	var r0 entity.ScanInstallmentAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScanInstallmentAmount, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxKPM provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxKPM(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for ScanTrxKPM")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxMaster provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxMaster(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for ScanTrxMaster")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxPrescreening provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxPrescreening(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for ScanTrxPrescreening")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxPrinciple provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxPrinciple(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for ScanTrxPrinciple")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOff provides a mock function with given fields: query
func (_m *Repository) ScanWgOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ScanWgOff")
	}

	var r0 entity.ScanInstallmentAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScanInstallmentAmount, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOnl provides a mock function with given fields: query
func (_m *Repository) ScanWgOnl(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for ScanWgOnl")
	}

	var r0 entity.ScanInstallmentAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScanInstallmentAmount, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrxKPMStatus provides a mock function with given fields: id, decision
func (_m *Repository) UpdateTrxKPMStatus(id string, decision string) error {
	ret := _m.Called(id, decision)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrxKPMStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, decision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
