// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetActiveLoanTypeLast24M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast24M(customerID string) (entity.GetActiveLoanTypeLast24M, error) {
	ret := _m.Called(customerID)

	var r0 entity.GetActiveLoanTypeLast24M
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast24M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast24M)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveLoanTypeLast6M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast6M(customerID string) (entity.GetActiveLoanTypeLast6M, error) {
	ret := _m.Called(customerID)

	var r0 entity.GetActiveLoanTypeLast6M
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast6M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast6M)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllReject provides a mock function with given fields: idNumber
func (_m *Repository) GetAllReject(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	var r0 []entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedChassisNumber provides a mock function with given fields: chassisNumber
func (_m *Repository) GetBannedChassisNumber(chassisNumber string) (entity.TrxBannedChassisNumber, error) {
	ret := _m.Called(chassisNumber)

	var r0 entity.TrxBannedChassisNumber
	if rf, ok := ret.Get(0).(func(string) entity.TrxBannedChassisNumber); ok {
		r0 = rf(chassisNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxBannedChassisNumber)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chassisNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedPMKDSR provides a mock function with given fields: idNumber
func (_m *Repository) GetBannedPMKDSR(idNumber string) (entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(idNumber)

	var r0 entity.TrxBannedPMKDSR
	if rf, ok := ret.Get(0).(func(string) entity.TrxBannedPMKDSR); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxBannedPMKDSR)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckingRejectAttempt provides a mock function with given fields: idNumber, blackListDate
func (_m *Repository) GetCheckingRejectAttempt(idNumber string, blackListDate string) (entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber, blackListDate)

	var r0 entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string, string) entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber, blackListDate)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionPMK)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(idNumber, blackListDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) (entity.AppConfig, error) {
	ret := _m.Called(groupName, lob, key)

	var r0 entity.AppConfig
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(groupName, lob, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithReject provides a mock function with given fields: idNumber
func (_m *Repository) GetCurrentTrxWithReject(idNumber string) (entity.TrxReject, error) {
	ret := _m.Called(idNumber)

	var r0 entity.TrxReject
	if rf, ok := ret.Get(0).(func(string) entity.TrxReject); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxReject)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithRejectChassisNumber provides a mock function with given fields: chassisNumber
func (_m *Repository) GetCurrentTrxWithRejectChassisNumber(chassisNumber string) ([]entity.RejectChassisNumber, error) {
	ret := _m.Called(chassisNumber)

	var r0 []entity.RejectChassisNumber
	if rf, ok := ret.Get(0).(func(string) []entity.RejectChassisNumber); ok {
		r0 = rf(chassisNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RejectChassisNumber)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chassisNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentTrxWithRejectDSR provides a mock function with given fields: idNumber
func (_m *Repository) GetCurrentTrxWithRejectDSR(idNumber string) (entity.TrxStatus, error) {
	ret := _m.Called(idNumber)

	var r0 entity.TrxStatus
	if rf, ok := ret.Get(0).(func(string) entity.TrxStatus); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElaborateLtv provides a mock function with given fields: prospectID
func (_m *Repository) GetElaborateLtv(prospectID string) (entity.MappingElaborateLTV, error) {
	ret := _m.Called(prospectID)

	var r0 entity.MappingElaborateLTV
	if rf, ok := ret.Get(0).(func(string) entity.MappingElaborateLTV); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.MappingElaborateLTV)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncB64 provides a mock function with given fields: myString
func (_m *Repository) GetEncB64(myString string) (entity.EncryptedString, error) {
	ret := _m.Called(myString)

	var r0 entity.EncryptedString
	if rf, ok := ret.Get(0).(func(string) entity.EncryptedString); ok {
		r0 = rf(myString)
	} else {
		r0 = ret.Get(0).(entity.EncryptedString)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(myString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncryptedValue provides a mock function with given fields: idNumber, legalName, motherName
func (_m *Repository) GetEncryptedValue(idNumber string, legalName string, motherName string) (entity.Encrypted, error) {
	ret := _m.Called(idNumber, legalName, motherName)

	var r0 entity.Encrypted
	if rf, ok := ret.Get(0).(func(string, string, string) entity.Encrypted); ok {
		r0 = rf(idNumber, legalName, motherName)
	} else {
		r0 = ret.Get(0).(entity.Encrypted)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(idNumber, legalName, motherName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringForJourney provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringForJourney(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	var r0 entity.FilteringKMB
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	var r0 entity.FilteringKMB
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryRejectAttempt provides a mock function with given fields: idNumber
func (_m *Repository) GetHistoryRejectAttempt(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	var r0 []entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBannedRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestBannedRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	var r0 entity.DupcheckRejectionNokaNosin
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	var r0 entity.DupcheckRejectionNokaNosin
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogOrchestrator provides a mock function with given fields: prospectID
func (_m *Repository) GetLogOrchestrator(prospectID string) (entity.LogOrchestrator, error) {
	ret := _m.Called(prospectID)

	var r0 entity.LogOrchestrator
	if rf, ok := ret.Get(0).(func(string) entity.LogOrchestrator); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.LogOrchestrator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDukcapil provides a mock function with given fields: statusVD, statusFR
func (_m *Repository) GetMappingDukcapil(statusVD string, statusFR string) (entity.MappingResultDukcapil, error) {
	ret := _m.Called(statusVD, statusFR)

	var r0 entity.MappingResultDukcapil
	if rf, ok := ret.Get(0).(func(string, string) entity.MappingResultDukcapil); ok {
		r0 = rf(statusVD, statusFR)
	} else {
		r0 = ret.Get(0).(entity.MappingResultDukcapil)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(statusVD, statusFR)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateIncome provides a mock function with given fields: mappingElaborateIncome
func (_m *Repository) GetMappingElaborateIncome(mappingElaborateIncome entity.MappingElaborateIncome) (entity.MappingElaborateIncome, error) {
	ret := _m.Called(mappingElaborateIncome)

	var r0 entity.MappingElaborateIncome
	if rf, ok := ret.Get(0).(func(entity.MappingElaborateIncome) entity.MappingElaborateIncome); ok {
		r0 = rf(mappingElaborateIncome)
	} else {
		r0 = ret.Get(0).(entity.MappingElaborateIncome)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.MappingElaborateIncome) error); ok {
		r1 = rf(mappingElaborateIncome)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterBranch provides a mock function with given fields: branchID
func (_m *Repository) GetMasterBranch(branchID string) (entity.MasterBranch, error) {
	ret := _m.Called(branchID)

	var r0 entity.MasterBranch
	if rf, ok := ret.Get(0).(func(string) entity.MasterBranch); ok {
		r0 = rf(branchID)
	} else {
		r0 = ret.Get(0).(entity.MasterBranch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(branchID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinimalIncomePMK provides a mock function with given fields: branchID, statusKonsumen
func (_m *Repository) GetMinimalIncomePMK(branchID string, statusKonsumen string) (entity.MappingIncomePMK, error) {
	ret := _m.Called(branchID, statusKonsumen)

	var r0 entity.MappingIncomePMK
	if rf, ok := ret.Get(0).(func(string, string) entity.MappingIncomePMK); ok {
		r0 = rf(branchID, statusKonsumen)
	} else {
		r0 = ret.Get(0).(entity.MappingIncomePMK)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branchID, statusKonsumen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoblast provides a mock function with given fields: customerID
func (_m *Repository) GetMoblast(customerID string) (entity.GetMoblast, error) {
	ret := _m.Called(customerID)

	var r0 entity.GetMoblast
	if rf, ok := ret.Get(0).(func(string) entity.GetMoblast); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetMoblast)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecalculate provides a mock function with given fields: prospectID
func (_m *Repository) GetRecalculate(prospectID string) (entity.GetRecalculate, error) {
	ret := _m.Called(prospectID)

	var r0 entity.GetRecalculate
	if rf, ok := ret.Get(0).(func(string) entity.GetRecalculate); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.GetRecalculate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGenerator provides a mock function with given fields: zipCode
func (_m *Repository) GetScoreGenerator(zipCode string) (entity.ScoreGenerator, error) {
	ret := _m.Called(zipCode)

	var r0 entity.ScoreGenerator
	if rf, ok := ret.Get(0).(func(string) entity.ScoreGenerator); ok {
		r0 = rf(zipCode)
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zipCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGeneratorROAO provides a mock function with given fields:
func (_m *Repository) GetScoreGeneratorROAO() (entity.ScoreGenerator, error) {
	ret := _m.Called()

	var r0 entity.ScoreGenerator
	if rf, ok := ret.Get(0).(func() entity.ScoreGenerator); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxDetailBIro provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxDetailBIro(prospectID string) ([]entity.TrxDetailBiro, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.TrxDetailBiro
	if rf, ok := ret.Get(0).(func(string) []entity.TrxDetailBiro); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxDetailBiro)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxJourney provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxJourney(prospectID string) (entity.TrxJourney, error) {
	ret := _m.Called(prospectID)

	var r0 entity.TrxJourney
	if rf, ok := ret.Get(0).(func(string) entity.TrxJourney); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxJourney)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataApiLog provides a mock function with given fields: data
func (_m *Repository) SaveDataApiLog(data entity.TrxApiLog) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxApiLog) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDataNoka provides a mock function with given fields: data
func (_m *Repository) SaveDataNoka(data entity.DupcheckRejectionNokaNosin) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.DupcheckRejectionNokaNosin) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, _a2, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecalculate provides a mock function with given fields: beforeRecalculate, afterRecalculate
func (_m *Repository) SaveRecalculate(beforeRecalculate entity.TrxRecalculate, afterRecalculate entity.TrxRecalculate) error {
	ret := _m.Called(beforeRecalculate, afterRecalculate)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxRecalculate, entity.TrxRecalculate) error); ok {
		r0 = rf(beforeRecalculate, afterRecalculate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransaction provides a mock function with given fields: countTrx, data, trxPrescreening, trxFMF, details, reason
func (_m *Repository) SaveTransaction(countTrx int, data request.Metrics, trxPrescreening entity.TrxPrescreening, trxFMF response.TrxFMF, details []entity.TrxDetail, reason string) error {
	ret := _m.Called(countTrx, data, trxPrescreening, trxFMF, details, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) error); ok {
		r0 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxJourney provides a mock function with given fields: prospectID, _a1
func (_m *Repository) SaveTrxJourney(prospectID string, _a1 interface{}) error {
	ret := _m.Called(prospectID, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(prospectID, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveVerificationFaceCompare provides a mock function with given fields: data
func (_m *Repository) SaveVerificationFaceCompare(data entity.VerificationFaceCompare) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.VerificationFaceCompare) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanKmbOff provides a mock function with given fields: query
func (_m *Repository) ScanKmbOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanKmobOff provides a mock function with given fields: query
func (_m *Repository) ScanKmobOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxMaster provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxMaster(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxPrescreening provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxPrescreening(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOff provides a mock function with given fields: query
func (_m *Repository) ScanWgOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOnl provides a mock function with given fields: query
func (_m *Repository) ScanWgOnl(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
