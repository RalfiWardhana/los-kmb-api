// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAllReject provides a mock function with given fields: idNumber
func (_m *Repository) GetAllReject(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	var r0 []entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBiroData provides a mock function with given fields: prospectID
func (_m *Repository) GetBiroData(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	var r0 entity.FilteringKMB
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckingRejectAttempt provides a mock function with given fields: idNumber, blackListDate
func (_m *Repository) GetCheckingRejectAttempt(idNumber string, blackListDate string) (entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber, blackListDate)

	var r0 entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string, string) entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber, blackListDate)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionPMK)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(idNumber, blackListDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) entity.AppConfig {
	ret := _m.Called(groupName, lob, key)

	var r0 entity.AppConfig
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	return r0
}

// GetDSRBypass provides a mock function with given fields:
func (_m *Repository) GetDSRBypass() (entity.AppConfig, error) {
	ret := _m.Called()

	var r0 entity.AppConfig
	if rf, ok := ret.Get(0).(func() entity.AppConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataInquiry provides a mock function with given fields: idNumber
func (_m *Repository) GetDataInquiry(idNumber string) ([]entity.DataInquiry, error) {
	ret := _m.Called(idNumber)

	var r0 []entity.DataInquiry
	if rf, ok := ret.Get(0).(func(string) []entity.DataInquiry); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DataInquiry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDummyAgreementChassisNumber provides a mock function with given fields: idNumber
func (_m *Repository) GetDummyAgreementChassisNumber(idNumber string) (entity.DummyAgreementChassisNumber, error) {
	ret := _m.Called(idNumber)

	var r0 entity.DummyAgreementChassisNumber
	if rf, ok := ret.Get(0).(func(string) entity.DummyAgreementChassisNumber); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.DummyAgreementChassisNumber)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDummyCustomerDomain provides a mock function with given fields: idNumber
func (_m *Repository) GetDummyCustomerDomain(idNumber string) (entity.DummyCustomerDomain, error) {
	ret := _m.Called(idNumber)

	var r0 entity.DummyCustomerDomain
	if rf, ok := ret.Get(0).(func(string) entity.DummyCustomerDomain); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.DummyCustomerDomain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDummyLatestPaidInstallment provides a mock function with given fields: idNumber
func (_m *Repository) GetDummyLatestPaidInstallment(idNumber string) (entity.DummyLatestPaidInstallment, error) {
	ret := _m.Called(idNumber)

	var r0 entity.DummyLatestPaidInstallment
	if rf, ok := ret.Get(0).(func(string) entity.DummyLatestPaidInstallment); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.DummyLatestPaidInstallment)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDupcheckConfig provides a mock function with given fields:
func (_m *Repository) GetDupcheckConfig() (entity.AppConfig, error) {
	ret := _m.Called()

	var r0 entity.AppConfig
	if rf, ok := ret.Get(0).(func() entity.AppConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncryptedValue provides a mock function with given fields: idNumber, legalName, motherName
func (_m *Repository) GetEncryptedValue(idNumber string, legalName string, motherName string) (entity.Encrypted, error) {
	ret := _m.Called(idNumber, legalName, motherName)

	var r0 entity.Encrypted
	if rf, ok := ret.Get(0).(func(string, string, string) entity.Encrypted); ok {
		r0 = rf(idNumber, legalName, motherName)
	} else {
		r0 = ret.Get(0).(entity.Encrypted)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(idNumber, legalName, motherName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	var r0 entity.FilteringKMB
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryRejectAttempt provides a mock function with given fields: idNumber
func (_m *Repository) GetHistoryRejectAttempt(idNumber string) ([]entity.DupcheckRejectionPMK, error) {
	ret := _m.Called(idNumber)

	var r0 []entity.DupcheckRejectionPMK
	if rf, ok := ret.Get(0).(func(string) []entity.DupcheckRejectionPMK); ok {
		r0 = rf(idNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DupcheckRejectionPMK)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKMOBOff provides a mock function with given fields:
func (_m *Repository) GetKMOBOff() (entity.AppConfig, error) {
	ret := _m.Called()

	var r0 entity.AppConfig
	if rf, ok := ret.Get(0).(func() entity.AppConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBannedRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestBannedRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	var r0 entity.DupcheckRejectionNokaNosin
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestRejectionNoka provides a mock function with given fields: noRangka
func (_m *Repository) GetLatestRejectionNoka(noRangka string) (entity.DupcheckRejectionNokaNosin, error) {
	ret := _m.Called(noRangka)

	var r0 entity.DupcheckRejectionNokaNosin
	if rf, ok := ret.Get(0).(func(string) entity.DupcheckRejectionNokaNosin); ok {
		r0 = rf(noRangka)
	} else {
		r0 = ret.Get(0).(entity.DupcheckRejectionNokaNosin)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(noRangka)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogOrchestrator provides a mock function with given fields: prospectID
func (_m *Repository) GetLogOrchestrator(prospectID string) (entity.LogOrchestrator, error) {
	ret := _m.Called(prospectID)

	var r0 entity.LogOrchestrator
	if rf, ok := ret.Get(0).(func(string) entity.LogOrchestrator); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.LogOrchestrator)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewDupcheck provides a mock function with given fields: ProspectID
func (_m *Repository) GetNewDupcheck(ProspectID string) (entity.NewDupcheck, error) {
	ret := _m.Called(ProspectID)

	var r0 entity.NewDupcheck
	if rf, ok := ret.Get(0).(func(string) entity.NewDupcheck); ok {
		r0 = rf(ProspectID)
	} else {
		r0 = ret.Get(0).(entity.NewDupcheck)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ProspectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataApiLog provides a mock function with given fields: data
func (_m *Repository) SaveDataApiLog(data entity.TrxApiLog) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxApiLog) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDataNoka provides a mock function with given fields: data
func (_m *Repository) SaveDataNoka(data entity.DupcheckRejectionNokaNosin) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.DupcheckRejectionNokaNosin) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, _a2, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNewDupcheck provides a mock function with given fields: newDupcheck
func (_m *Repository) SaveNewDupcheck(newDupcheck entity.NewDupcheck) error {
	ret := _m.Called(newDupcheck)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.NewDupcheck) error); ok {
		r0 = rf(newDupcheck)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTransaction provides a mock function with given fields: countTrx, data, trxPrescreening, trxFMF, details, reason
func (_m *Repository) SaveTransaction(countTrx int, data request.Metrics, trxPrescreening entity.TrxPrescreening, trxFMF response.TrxFMF, details []entity.TrxDetail, reason string) error {
	ret := _m.Called(countTrx, data, trxPrescreening, trxFMF, details, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) error); ok {
		r0 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveVerificationFaceCompare provides a mock function with given fields: data
func (_m *Repository) SaveVerificationFaceCompare(data entity.VerificationFaceCompare) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.VerificationFaceCompare) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanKmbOff provides a mock function with given fields: query
func (_m *Repository) ScanKmbOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanKmobOff provides a mock function with given fields: query
func (_m *Repository) ScanKmobOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanPreTrxJourney provides a mock function with given fields: prospectID
func (_m *Repository) ScanPreTrxJourney(prospectID string) (int, int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(prospectID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ScanTrxMaster provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxMaster(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanTrxPrescreening provides a mock function with given fields: prospectID
func (_m *Repository) ScanTrxPrescreening(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOff provides a mock function with given fields: query
func (_m *Repository) ScanWgOff(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanWgOnl provides a mock function with given fields: query
func (_m *Repository) ScanWgOnl(query string) (entity.ScanInstallmentAmount, error) {
	ret := _m.Called(query)

	var r0 entity.ScanInstallmentAmount
	if rf, ok := ret.Get(0).(func(string) entity.ScanInstallmentAmount); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.ScanInstallmentAmount)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
