// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// MultiUsecase is an autogenerated mock type for the MultiUsecase type
type MultiUsecase struct {
	mock.Mock
}

// Dupcheck provides a mock function with given fields: ctx, reqs, married, accessToken
func (_m *MultiUsecase) Dupcheck(ctx context.Context, reqs request.DupcheckApi, married bool, accessToken string) (response.SpDupcheckMap, string, response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, married, accessToken)

	var r0 response.SpDupcheckMap
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, bool, string) response.SpDupcheckMap); ok {
		r0 = rf(ctx, reqs, married, accessToken)
	} else {
		r0 = ret.Get(0).(response.SpDupcheckMap)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, bool, string) string); ok {
		r1 = rf(ctx, reqs, married, accessToken)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 response.UsecaseApi
	if rf, ok := ret.Get(2).(func(context.Context, request.DupcheckApi, bool, string) response.UsecaseApi); ok {
		r2 = rf(ctx, reqs, married, accessToken)
	} else {
		r2 = ret.Get(2).(response.UsecaseApi)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, request.DupcheckApi, bool, string) error); ok {
		r3 = rf(ctx, reqs, married, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
