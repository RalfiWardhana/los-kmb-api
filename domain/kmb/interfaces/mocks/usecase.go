// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// BlacklistCheck provides a mock function with given fields: index, spDupcheck
func (_m *Usecase) BlacklistCheck(index int, spDupcheck response.SpDupCekCustomerByID) (response.UsecaseApi, string) {
	ret := _m.Called(index, spDupcheck)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) response.UsecaseApi); ok {
		r0 = rf(index, spDupcheck)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(int, response.SpDupCekCustomerByID) string); ok {
		r1 = rf(index, spDupcheck)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// CheckAgreementChassisNumber provides a mock function with given fields: ctx, reqs, accessToken
func (_m *Usecase) CheckAgreementChassisNumber(ctx context.Context, reqs request.DupcheckApi, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, accessToken)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, string) error); ok {
		r1 = rf(ctx, reqs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBannedChassisNumber provides a mock function with given fields: req, configValue
func (_m *Usecase) CheckBannedChassisNumber(req request.DupcheckApi, configValue response.DupcheckConfig) (response.UsecaseApi, error) {
	ret := _m.Called(req, configValue)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(req, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.DupcheckApi, response.DupcheckConfig) error); ok {
		r1 = rf(req, configValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBannedPMKDSR provides a mock function with given fields: req, configValue
func (_m *Usecase) CheckBannedPMKDSR(req request.DupcheckApi, configValue response.DupcheckConfig) (response.UsecaseApi, error) {
	ret := _m.Called(req, configValue)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(req, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.DupcheckApi, response.DupcheckConfig) error); ok {
		r1 = rf(req, configValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckChassisNumber provides a mock function with given fields: ctx, reqs, nokaBanned, accessToken
func (_m *Usecase) CheckChassisNumber(ctx context.Context, reqs request.DupcheckApi, nokaBanned response.RejectionNoka, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, nokaBanned, accessToken)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, response.RejectionNoka, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, nokaBanned, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, response.RejectionNoka, string) error); ok {
		r1 = rf(ctx, reqs, nokaBanned, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckNoka provides a mock function with given fields: ctx, reqs, nokaBanned30D, accessToken
func (_m *Usecase) CheckNoka(ctx context.Context, reqs request.DupcheckApi, nokaBanned30D response.RejectionNoka, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, nokaBanned30D, accessToken)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, response.RejectionNoka, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, nokaBanned30D, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, response.RejectionNoka, string) error); ok {
		r1 = rf(ctx, reqs, nokaBanned30D, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRejectChassisNumber provides a mock function with given fields: req, configValue
func (_m *Usecase) CheckRejectChassisNumber(req request.DupcheckApi, configValue response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedChassisNumber, error) {
	ret := _m.Called(req, configValue)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(req, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 entity.TrxBannedChassisNumber
	if rf, ok := ret.Get(1).(func(request.DupcheckApi, response.DupcheckConfig) entity.TrxBannedChassisNumber); ok {
		r1 = rf(req, configValue)
	} else {
		r1 = ret.Get(1).(entity.TrxBannedChassisNumber)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.DupcheckApi, response.DupcheckConfig) error); ok {
		r2 = rf(req, configValue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckRejection provides a mock function with given fields: req, configValue
func (_m *Usecase) CheckRejection(req request.DupcheckApi, configValue response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(req, configValue)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(req, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 entity.TrxBannedPMKDSR
	if rf, ok := ret.Get(1).(func(request.DupcheckApi, response.DupcheckConfig) entity.TrxBannedPMKDSR); ok {
		r1 = rf(req, configValue)
	} else {
		r1 = ret.Get(1).(entity.TrxBannedPMKDSR)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.DupcheckApi, response.DupcheckConfig) error); ok {
		r2 = rf(req, configValue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckRejectionNoka provides a mock function with given fields: reqs
func (_m *Usecase) CheckRejectionNoka(reqs request.DupcheckApi) (response.RejectionNoka, error) {
	ret := _m.Called(reqs)

	var r0 response.RejectionNoka
	if rf, ok := ret.Get(0).(func(request.DupcheckApi) response.RejectionNoka); ok {
		r0 = rf(reqs)
	} else {
		r0 = ret.Get(0).(response.RejectionNoka)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.DupcheckApi) error); ok {
		r1 = rf(reqs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerDomainGetData provides a mock function with given fields: ctx, req, prospectID, accessToken
func (_m *Usecase) CustomerDomainGetData(ctx context.Context, req request.ReqCustomerDomain, prospectID string, accessToken string) (response.DataCustomer, error) {
	ret := _m.Called(ctx, req, prospectID, accessToken)

	var r0 response.DataCustomer
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqCustomerDomain, string, string) response.DataCustomer); ok {
		r0 = rf(ctx, req, prospectID, accessToken)
	} else {
		r0 = ret.Get(0).(response.DataCustomer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqCustomerDomain, string, string) error); ok {
		r1 = rf(ctx, req, prospectID, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerKMB provides a mock function with given fields: spDupcheck
func (_m *Usecase) CustomerKMB(spDupcheck response.SpDupCekCustomerByID) (string, error) {
	ret := _m.Called(spDupcheck)

	var r0 string
	if rf, ok := ret.Get(0).(func(response.SpDupCekCustomerByID) string); ok {
		r0 = rf(spDupcheck)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(response.SpDupCekCustomerByID) error); ok {
		r1 = rf(spDupcheck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DsrCheck provides a mock function with given fields: ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken
func (_m *Usecase) DsrCheck(ctx context.Context, prospectID string, engineNo string, customerData []request.CustomerData, installmentAmount float64, installmentConfins float64, installmentConfinsSpouse float64, income float64, accessToken string) (response.UsecaseApi, response.Dsr, float64, float64, float64, error) {
	ret := _m.Called(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) response.UsecaseApi); ok {
		r0 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 response.Dsr
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) response.Dsr); ok {
		r1 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r1 = ret.Get(1).(response.Dsr)
	}

	var r2 float64
	if rf, ok := ret.Get(2).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) float64); ok {
		r2 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r2 = ret.Get(2).(float64)
	}

	var r3 float64
	if rf, ok := ret.Get(3).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) float64); ok {
		r3 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r3 = ret.Get(3).(float64)
	}

	var r4 float64
	if rf, ok := ret.Get(4).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) float64); ok {
		r4 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r4 = ret.Get(4).(float64)
	}

	var r5 error
	if rf, ok := ret.Get(5).(func(context.Context, string, string, []request.CustomerData, float64, float64, float64, float64, string) error); ok {
		r5 = rf(ctx, prospectID, engineNo, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// DupcheckIntegrator provides a mock function with given fields: ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken
func (_m *Usecase) DupcheckIntegrator(ctx context.Context, prospectID string, idNumber string, legalName string, birthDate string, surgateName string, accessToken string) (response.SpDupCekCustomerByID, error) {
	ret := _m.Called(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)

	var r0 response.SpDupCekCustomerByID
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) response.SpDupCekCustomerByID); ok {
		r0 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r0 = ret.Get(0).(response.SpDupCekCustomerByID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacePlus provides a mock function with given fields: ctx, imageKtp, imageSelfie, req, accessToken
func (_m *Usecase) FacePlus(ctx context.Context, imageKtp string, imageSelfie string, req request.FaceCompareRequest, accessToken string) (response.FaceCompareResponse, error) {
	ret := _m.Called(ctx, imageKtp, imageSelfie, req, accessToken)

	var r0 response.FaceCompareResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string, request.FaceCompareRequest, string) response.FaceCompareResponse); ok {
		r0 = rf(ctx, imageKtp, imageSelfie, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.FaceCompareResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, request.FaceCompareRequest, string) error); ok {
		r1 = rf(ctx, imageKtp, imageSelfie, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBase64Media provides a mock function with given fields: ctx, url, customerID, accessToken
func (_m *Usecase) GetBase64Media(ctx context.Context, url string, customerID int, accessToken string) (string, error) {
	ret := _m.Called(ctx, url, customerID, accessToken)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, int, string) string); ok {
		r0 = rf(ctx, url, customerID, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, string) error); ok {
		r1 = rf(ctx, url, customerID, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestPaidInstallment provides a mock function with given fields: ctx, req, prospectID, accessToken
func (_m *Usecase) GetLatestPaidInstallment(ctx context.Context, req request.ReqLatestPaidInstallment, prospectID string, accessToken string) (response.LatestPaidInstallmentData, error) {
	ret := _m.Called(ctx, req, prospectID, accessToken)

	var r0 response.LatestPaidInstallmentData
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqLatestPaidInstallment, string, string) response.LatestPaidInstallmentData); ok {
		r0 = rf(ctx, req, prospectID, accessToken)
	} else {
		r0 = ret.Get(0).(response.LatestPaidInstallmentData)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqLatestPaidInstallment, string, string) error); ok {
		r1 = rf(ctx, req, prospectID, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NokaBanned30D provides a mock function with given fields: reqs
func (_m *Usecase) NokaBanned30D(reqs request.DupcheckApi) (response.RejectionNoka, error) {
	ret := _m.Called(reqs)

	var r0 response.RejectionNoka
	if rf, ok := ret.Get(0).(func(request.DupcheckApi) response.RejectionNoka); ok {
		r0 = rf(reqs)
	} else {
		r0 = ret.Get(0).(response.RejectionNoka)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.DupcheckApi) error); ok {
		r1 = rf(reqs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PMK provides a mock function with given fields: branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus
func (_m *Usecase) PMK(branchID string, statusKonsumen string, income float64, homeStatus string, professionID string, empYear string, empMonth string, stayYear string, stayMonth string, birthDate string, tenor int, maritalStatus string) (response.UsecaseApi, error) {
	ret := _m.Called(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(string, string, float64, string, string, string, string, string, string, string, int, string) response.UsecaseApi); ok {
		r0 = rf(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, float64, string, string, string, string, string, string, string, int, string) error); ok {
		r1 = rf(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prescreening provides a mock function with given fields: ctx, reqs, filtering, accessToken
func (_m *Usecase) Prescreening(ctx context.Context, reqs request.Metrics, filtering entity.FilteringKMB, accessToken string) (entity.TrxPrescreening, response.TrxFMF, entity.TrxDetail, error) {
	ret := _m.Called(ctx, reqs, filtering, accessToken)

	var r0 entity.TrxPrescreening
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, entity.FilteringKMB, string) entity.TrxPrescreening); ok {
		r0 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r0 = ret.Get(0).(entity.TrxPrescreening)
	}

	var r1 response.TrxFMF
	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, entity.FilteringKMB, string) response.TrxFMF); ok {
		r1 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r1 = ret.Get(1).(response.TrxFMF)
	}

	var r2 entity.TrxDetail
	if rf, ok := ret.Get(2).(func(context.Context, request.Metrics, entity.FilteringKMB, string) entity.TrxDetail); ok {
		r2 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r2 = ret.Get(2).(entity.TrxDetail)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, request.Metrics, entity.FilteringKMB, string) error); ok {
		r3 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// RejectTenor36 provides a mock function with given fields: idNumber
func (_m *Usecase) RejectTenor36(idNumber string) (response.UsecaseApi, error) {
	ret := _m.Called(idNumber)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: countTrx, data, trxPrescreening, trxFMF, details, reason
func (_m *Usecase) SaveTransaction(countTrx int, data request.Metrics, trxPrescreening entity.TrxPrescreening, trxFMF response.TrxFMF, details []entity.TrxDetail, reason string) (response.Metrics, error) {
	ret := _m.Called(countTrx, data, trxPrescreening, trxFMF, details, reason)

	var r0 response.Metrics
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) response.Metrics); ok {
		r0 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r0 = ret.Get(0).(response.Metrics)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) error); ok {
		r1 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VehicleCheck provides a mock function with given fields: manufactureYear, tenor
func (_m *Usecase) VehicleCheck(manufactureYear string, tenor int) (response.UsecaseApi, error) {
	ret := _m.Called(manufactureYear, tenor)

	var r0 response.UsecaseApi
	if rf, ok := ret.Get(0).(func(string, int) response.UsecaseApi); ok {
		r0 = rf(manufactureYear, tenor)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(manufactureYear, tenor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
