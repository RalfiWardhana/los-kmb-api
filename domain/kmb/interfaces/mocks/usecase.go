// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Asliri provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) Asliri(ctx context.Context, req request.Metrics, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Asliri")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, string) (response.Ekyc, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, string) response.Ekyc); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlacklistCheck provides a mock function with given fields: index, spDupcheck
func (_m *Usecase) BlacklistCheck(index int, spDupcheck response.SpDupCekCustomerByID) (response.UsecaseApi, string) {
	ret := _m.Called(index, spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for BlacklistCheck")
	}

	var r0 response.UsecaseApi
	var r1 string
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) (response.UsecaseApi, string)); ok {
		return rf(index, spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) response.UsecaseApi); ok {
		r0 = rf(index, spDupcheck)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(int, response.SpDupCekCustomerByID) string); ok {
		r1 = rf(index, spDupcheck)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// CheckAgreementChassisNumber provides a mock function with given fields: ctx, reqs, accessToken
func (_m *Usecase) CheckAgreementChassisNumber(ctx context.Context, reqs request.DupcheckApi, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckAgreementChassisNumber")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, reqs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, string) error); ok {
		r1 = rf(ctx, reqs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckAgreementLunas provides a mock function with given fields: ctx, prospectID, customerId, filterKMBOnly, accessToken
func (_m *Usecase) CheckAgreementLunas(ctx context.Context, prospectID string, customerId string, filterKMBOnly bool, accessToken string) (response.ConfinsAgreementCustomer, bool, error) {
	ret := _m.Called(ctx, prospectID, customerId, filterKMBOnly, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckAgreementLunas")
	}

	var r0 response.ConfinsAgreementCustomer
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, string) (response.ConfinsAgreementCustomer, bool, error)); ok {
		return rf(ctx, prospectID, customerId, filterKMBOnly, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, string) response.ConfinsAgreementCustomer); ok {
		r0 = rf(ctx, prospectID, customerId, filterKMBOnly, accessToken)
	} else {
		r0 = ret.Get(0).(response.ConfinsAgreementCustomer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, string) bool); ok {
		r1 = rf(ctx, prospectID, customerId, filterKMBOnly, accessToken)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, bool, string) error); ok {
		r2 = rf(ctx, prospectID, customerId, filterKMBOnly, accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckBannedChassisNumber provides a mock function with given fields: chassisNumber
func (_m *Usecase) CheckBannedChassisNumber(chassisNumber string) (response.UsecaseApi, error) {
	ret := _m.Called(chassisNumber)

	if len(ret) == 0 {
		panic("no return value specified for CheckBannedChassisNumber")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.UsecaseApi, error)); ok {
		return rf(chassisNumber)
	}
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(chassisNumber)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(chassisNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckBannedPMKDSR provides a mock function with given fields: idNumber
func (_m *Usecase) CheckBannedPMKDSR(idNumber string) (response.UsecaseApi, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for CheckBannedPMKDSR")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.UsecaseApi, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckMobilePhoneFMF provides a mock function with given fields: ctx, reqs, accessToken, hrisAccessToken
func (_m *Usecase) CheckMobilePhoneFMF(ctx context.Context, reqs request.DupcheckApi, accessToken string, hrisAccessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, accessToken, hrisAccessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckMobilePhoneFMF")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, reqs, accessToken, hrisAccessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, accessToken, hrisAccessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, string, string) error); ok {
		r1 = rf(ctx, reqs, accessToken, hrisAccessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckRejectChassisNumber provides a mock function with given fields: req, configValue
func (_m *Usecase) CheckRejectChassisNumber(req request.DupcheckApi, configValue response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedChassisNumber, error) {
	ret := _m.Called(req, configValue)

	if len(ret) == 0 {
		panic("no return value specified for CheckRejectChassisNumber")
	}

	var r0 response.UsecaseApi
	var r1 entity.TrxBannedChassisNumber
	var r2 error
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedChassisNumber, error)); ok {
		return rf(req, configValue)
	}
	if rf, ok := ret.Get(0).(func(request.DupcheckApi, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(req, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(request.DupcheckApi, response.DupcheckConfig) entity.TrxBannedChassisNumber); ok {
		r1 = rf(req, configValue)
	} else {
		r1 = ret.Get(1).(entity.TrxBannedChassisNumber)
	}

	if rf, ok := ret.Get(2).(func(request.DupcheckApi, response.DupcheckConfig) error); ok {
		r2 = rf(req, configValue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckRejection provides a mock function with given fields: idNumber, prospectID, configValue
func (_m *Usecase) CheckRejection(idNumber string, prospectID string, configValue response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(idNumber, prospectID, configValue)

	if len(ret) == 0 {
		panic("no return value specified for CheckRejection")
	}

	var r0 response.UsecaseApi
	var r1 entity.TrxBannedPMKDSR
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedPMKDSR, error)); ok {
		return rf(idNumber, prospectID, configValue)
	}
	if rf, ok := ret.Get(0).(func(string, string, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(idNumber, prospectID, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, response.DupcheckConfig) entity.TrxBannedPMKDSR); ok {
		r1 = rf(idNumber, prospectID, configValue)
	} else {
		r1 = ret.Get(1).(entity.TrxBannedPMKDSR)
	}

	if rf, ok := ret.Get(2).(func(string, string, response.DupcheckConfig) error); ok {
		r2 = rf(idNumber, prospectID, configValue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CustomerKMB provides a mock function with given fields: spDupcheck
func (_m *Usecase) CustomerKMB(spDupcheck response.SpDupCekCustomerByID) (string, error) {
	ret := _m.Called(spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for CustomerKMB")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(response.SpDupCekCustomerByID) (string, error)); ok {
		return rf(spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(response.SpDupCekCustomerByID) string); ok {
		r0 = rf(spDupcheck)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(response.SpDupCekCustomerByID) error); ok {
		r1 = rf(spDupcheck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DsrCheck provides a mock function with given fields: ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue
func (_m *Usecase) DsrCheck(ctx context.Context, req request.DupcheckApi, customerData []request.CustomerData, installmentAmount float64, installmentConfins float64, installmentConfinsSpouse float64, income float64, accessToken string, configValue response.DupcheckConfig) (response.UsecaseApi, response.Dsr, float64, float64, float64, error) {
	ret := _m.Called(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)

	if len(ret) == 0 {
		panic("no return value specified for DsrCheck")
	}

	var r0 response.UsecaseApi
	var r1 response.Dsr
	var r2 float64
	var r3 float64
	var r4 float64
	var r5 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) (response.UsecaseApi, response.Dsr, float64, float64, float64, error)); ok {
		return rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) response.Dsr); ok {
		r1 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r1 = ret.Get(1).(response.Dsr)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) float64); ok {
		r2 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) float64); ok {
		r3 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r3 = ret.Get(3).(float64)
	}

	if rf, ok := ret.Get(4).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) float64); ok {
		r4 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r4 = ret.Get(4).(float64)
	}

	if rf, ok := ret.Get(5).(func(context.Context, request.DupcheckApi, []request.CustomerData, float64, float64, float64, float64, string, response.DupcheckConfig) error); ok {
		r5 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, accessToken, configValue)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// Dukcapil provides a mock function with given fields: ctx, req, reqMetricsEkyc, accessToken
func (_m *Usecase) Dukcapil(ctx context.Context, req request.Metrics, reqMetricsEkyc request.MetricsEkyc, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, req, reqMetricsEkyc, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Dukcapil")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, request.MetricsEkyc, string) (response.Ekyc, error)); ok {
		return rf(ctx, req, reqMetricsEkyc, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, request.MetricsEkyc, string) response.Ekyc); ok {
		r0 = rf(ctx, req, reqMetricsEkyc, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, request.MetricsEkyc, string) error); ok {
		r1 = rf(ctx, req, reqMetricsEkyc, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DupcheckIntegrator provides a mock function with given fields: ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken
func (_m *Usecase) DupcheckIntegrator(ctx context.Context, prospectID string, idNumber string, legalName string, birthDate string, surgateName string, accessToken string) (response.SpDupCekCustomerByID, error) {
	ret := _m.Called(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for DupcheckIntegrator")
	}

	var r0 response.SpDupCekCustomerByID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (response.SpDupCekCustomerByID, error)); ok {
		return rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) response.SpDupCekCustomerByID); ok {
		r0 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r0 = ret.Get(0).(response.SpDupCekCustomerByID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElaborateIncome provides a mock function with given fields: ctx, req, filtering, pefindoIDX, spDupcheckMap, responseScs, accessToken
func (_m *Usecase) ElaborateIncome(ctx context.Context, req request.Metrics, filtering entity.FilteringKMB, pefindoIDX response.PefindoIDX, spDupcheckMap response.SpDupcheckMap, responseScs response.IntegratorScorePro, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, req, filtering, pefindoIDX, spDupcheckMap, responseScs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for ElaborateIncome")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, entity.FilteringKMB, response.PefindoIDX, response.SpDupcheckMap, response.IntegratorScorePro, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, req, filtering, pefindoIDX, spDupcheckMap, responseScs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, entity.FilteringKMB, response.PefindoIDX, response.SpDupcheckMap, response.IntegratorScorePro, string) response.UsecaseApi); ok {
		r0 = rf(ctx, req, filtering, pefindoIDX, spDupcheckMap, responseScs, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, entity.FilteringKMB, response.PefindoIDX, response.SpDupcheckMap, response.IntegratorScorePro, string) error); ok {
		r1 = rf(ctx, req, filtering, pefindoIDX, spDupcheckMap, responseScs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ElaborateScheme provides a mock function with given fields: req
func (_m *Usecase) ElaborateScheme(req request.Metrics) (response.UsecaseApi, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ElaborateScheme")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(request.Metrics) (response.UsecaseApi, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.Metrics) response.UsecaseApi); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(request.Metrics) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertStaging provides a mock function with given fields: prospectID
func (_m *Usecase) InsertStaging(prospectID string) (response.InsertStaging, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for InsertStaging")
	}

	var r0 response.InsertStaging
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.InsertStaging, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) response.InsertStaging); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(response.InsertStaging)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ktp provides a mock function with given fields: ctx, req, reqMetricsEkyc, accessToken
func (_m *Usecase) Ktp(ctx context.Context, req request.Metrics, reqMetricsEkyc request.MetricsEkyc, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, req, reqMetricsEkyc, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Ktp")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, request.MetricsEkyc, string) (response.Ekyc, error)); ok {
		return rf(ctx, req, reqMetricsEkyc, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, request.MetricsEkyc, string) response.Ekyc); ok {
		r0 = rf(ctx, req, reqMetricsEkyc, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, request.MetricsEkyc, string) error); ok {
		r1 = rf(ctx, req, reqMetricsEkyc, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NegativeCustomerCheck provides a mock function with given fields: ctx, reqs, accessToken
func (_m *Usecase) NegativeCustomerCheck(ctx context.Context, reqs request.DupcheckApi, accessToken string) (response.UsecaseApi, response.NegativeCustomer, error) {
	ret := _m.Called(ctx, reqs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for NegativeCustomerCheck")
	}

	var r0 response.UsecaseApi
	var r1 response.NegativeCustomer
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) (response.UsecaseApi, response.NegativeCustomer, error)); ok {
		return rf(ctx, reqs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, string) response.NegativeCustomer); ok {
		r1 = rf(ctx, reqs, accessToken)
	} else {
		r1 = ret.Get(1).(response.NegativeCustomer)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.DupcheckApi, string) error); ok {
		r2 = rf(ctx, reqs, accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PMK provides a mock function with given fields: branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus
func (_m *Usecase) PMK(branchID string, statusKonsumen string, income float64, homeStatus string, professionID string, empYear string, empMonth string, stayYear string, stayMonth string, birthDate string, tenor int, maritalStatus string) (response.UsecaseApi, error) {
	ret := _m.Called(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)

	if len(ret) == 0 {
		panic("no return value specified for PMK")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64, string, string, string, string, string, string, string, int, string) (response.UsecaseApi, error)); ok {
		return rf(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64, string, string, string, string, string, string, string, int, string) response.UsecaseApi); ok {
		r0 = rf(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, float64, string, string, string, string, string, string, string, int, string) error); ok {
		r1 = rf(branchID, statusKonsumen, income, homeStatus, professionID, empYear, empMonth, stayYear, stayMonth, birthDate, tenor, maritalStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pefindo provides a mock function with given fields: cbFound, bpkbName, filtering, spDupcheck
func (_m *Usecase) Pefindo(cbFound bool, bpkbName string, filtering entity.FilteringKMB, spDupcheck response.SpDupcheckMap) (response.UsecaseApi, error) {
	ret := _m.Called(cbFound, bpkbName, filtering, spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for Pefindo")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, string, entity.FilteringKMB, response.SpDupcheckMap) (response.UsecaseApi, error)); ok {
		return rf(cbFound, bpkbName, filtering, spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(bool, string, entity.FilteringKMB, response.SpDupcheckMap) response.UsecaseApi); ok {
		r0 = rf(cbFound, bpkbName, filtering, spDupcheck)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(bool, string, entity.FilteringKMB, response.SpDupcheckMap) error); ok {
		r1 = rf(cbFound, bpkbName, filtering, spDupcheck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Prescreening provides a mock function with given fields: ctx, reqs, filtering, accessToken
func (_m *Usecase) Prescreening(ctx context.Context, reqs request.Metrics, filtering entity.FilteringKMB, accessToken string) (entity.TrxPrescreening, response.TrxFMF, entity.TrxDetail, error) {
	ret := _m.Called(ctx, reqs, filtering, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Prescreening")
	}

	var r0 entity.TrxPrescreening
	var r1 response.TrxFMF
	var r2 entity.TrxDetail
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, entity.FilteringKMB, string) (entity.TrxPrescreening, response.TrxFMF, entity.TrxDetail, error)); ok {
		return rf(ctx, reqs, filtering, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, entity.FilteringKMB, string) entity.TrxPrescreening); ok {
		r0 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r0 = ret.Get(0).(entity.TrxPrescreening)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, entity.FilteringKMB, string) response.TrxFMF); ok {
		r1 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r1 = ret.Get(1).(response.TrxFMF)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.Metrics, entity.FilteringKMB, string) entity.TrxDetail); ok {
		r2 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r2 = ret.Get(2).(entity.TrxDetail)
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.Metrics, entity.FilteringKMB, string) error); ok {
		r3 = rf(ctx, reqs, filtering, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Recalculate provides a mock function with given fields: ctx, req
func (_m *Usecase) Recalculate(ctx context.Context, req request.Recalculate) (response.Recalculate, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Recalculate")
	}

	var r0 response.Recalculate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Recalculate) (response.Recalculate, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Recalculate) response.Recalculate); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.Recalculate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Recalculate) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTenor36 provides a mock function with given fields: cluster
func (_m *Usecase) RejectTenor36(cluster string) (response.UsecaseApi, error) {
	ret := _m.Called(cluster)

	if len(ret) == 0 {
		panic("no return value specified for RejectTenor36")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.UsecaseApi, error)); ok {
		return rf(cluster)
	}
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveTransaction provides a mock function with given fields: countTrx, data, trxPrescreening, trxFMF, details, reason
func (_m *Usecase) SaveTransaction(countTrx int, data request.Metrics, trxPrescreening entity.TrxPrescreening, trxFMF response.TrxFMF, details []entity.TrxDetail, reason string) (response.Metrics, error) {
	ret := _m.Called(countTrx, data, trxPrescreening, trxFMF, details, reason)

	if len(ret) == 0 {
		panic("no return value specified for SaveTransaction")
	}

	var r0 response.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) (response.Metrics, error)); ok {
		return rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	}
	if rf, ok := ret.Get(0).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) response.Metrics); ok {
		r0 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r0 = ret.Get(0).(response.Metrics)
	}

	if rf, ok := ret.Get(1).(func(int, request.Metrics, entity.TrxPrescreening, response.TrxFMF, []entity.TrxDetail, string) error); ok {
		r1 = rf(countTrx, data, trxPrescreening, trxFMF, details, reason)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scorepro provides a mock function with given fields: ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering
func (_m *Usecase) Scorepro(ctx context.Context, req request.Metrics, pefindoScore string, customerSegment string, spDupcheck response.SpDupcheckMap, accessToken string, filtering entity.FilteringKMB) (response.IntegratorScorePro, response.ScorePro, response.PefindoIDX, error) {
	ret := _m.Called(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)

	if len(ret) == 0 {
		panic("no return value specified for Scorepro")
	}

	var r0 response.IntegratorScorePro
	var r1 response.ScorePro
	var r2 response.PefindoIDX
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, string, string, response.SpDupcheckMap, string, entity.FilteringKMB) (response.IntegratorScorePro, response.ScorePro, response.PefindoIDX, error)); ok {
		return rf(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Metrics, string, string, response.SpDupcheckMap, string, entity.FilteringKMB) response.IntegratorScorePro); ok {
		r0 = rf(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)
	} else {
		r0 = ret.Get(0).(response.IntegratorScorePro)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Metrics, string, string, response.SpDupcheckMap, string, entity.FilteringKMB) response.ScorePro); ok {
		r1 = rf(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)
	} else {
		r1 = ret.Get(1).(response.ScorePro)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.Metrics, string, string, response.SpDupcheckMap, string, entity.FilteringKMB) response.PefindoIDX); ok {
		r2 = rf(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)
	} else {
		r2 = ret.Get(2).(response.PefindoIDX)
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.Metrics, string, string, response.SpDupcheckMap, string, entity.FilteringKMB) error); ok {
		r3 = rf(ctx, req, pefindoScore, customerSegment, spDupcheck, accessToken, filtering)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// TotalDsrFmfPbk provides a mock function with given fields: ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF
func (_m *Usecase) TotalDsrFmfPbk(ctx context.Context, totalIncome float64, newInstallment float64, totalInstallmentPBK float64, prospectID string, customerSegment string, accessToken string, SpDupcheckMap response.SpDupcheckMap, configValue response.DupcheckConfig, filtering entity.FilteringKMB, NTF float64) (response.UsecaseApi, response.TrxFMF, error) {
	ret := _m.Called(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF)

	if len(ret) == 0 {
		panic("no return value specified for TotalDsrFmfPbk")
	}

	var r0 response.UsecaseApi
	var r1 response.TrxFMF
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB, float64) (response.UsecaseApi, response.TrxFMF, error)); ok {
		return rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB, float64) response.UsecaseApi); ok {
		r0 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB, float64) response.TrxFMF); ok {
		r1 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF)
	} else {
		r1 = ret.Get(1).(response.TrxFMF)
	}

	if rf, ok := ret.Get(2).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB, float64) error); ok {
		r2 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering, NTF)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VehicleCheck provides a mock function with given fields: manufactureYear, cmoCluster, bpkbName, tenor, configValue, filteing, af
func (_m *Usecase) VehicleCheck(manufactureYear string, cmoCluster string, bpkbName string, tenor int, configValue response.DupcheckConfig, filteing entity.FilteringKMB, af float64) (response.UsecaseApi, error) {
	ret := _m.Called(manufactureYear, cmoCluster, bpkbName, tenor, configValue, filteing, af)

	if len(ret) == 0 {
		panic("no return value specified for VehicleCheck")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) (response.UsecaseApi, error)); ok {
		return rf(manufactureYear, cmoCluster, bpkbName, tenor, configValue, filteing, af)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) response.UsecaseApi); ok {
		r0 = rf(manufactureYear, cmoCluster, bpkbName, tenor, configValue, filteing, af)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) error); ok {
		r1 = rf(manufactureYear, cmoCluster, bpkbName, tenor, configValue, filteing, af)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
