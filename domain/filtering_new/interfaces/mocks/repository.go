// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckCMONoFPD provides a mock function with given fields: cmoID, bpkbName
func (_m *Repository) CheckCMONoFPD(cmoID string, bpkbName string) (entity.TrxCmoNoFPD, error) {
	ret := _m.Called(cmoID, bpkbName)

	if len(ret) == 0 {
		panic("no return value specified for CheckCMONoFPD")
	}

	var r0 entity.TrxCmoNoFPD
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.TrxCmoNoFPD, error)); ok {
		return rf(cmoID, bpkbName)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.TrxCmoNoFPD); ok {
		r0 = rf(cmoID, bpkbName)
	} else {
		r0 = ret.Get(0).(entity.TrxCmoNoFPD)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cmoID, bpkbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DummyDataPbk provides a mock function with given fields: query
func (_m *Repository) DummyDataPbk(query string) (entity.DummyPBK, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for DummyDataPbk")
	}

	var r0 entity.DummyPBK
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DummyPBK, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DummyPBK); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.DummyPBK)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetCancel provides a mock function with given fields: chassisNumber, engineNumber, lockSystemConfig
func (_m *Repository) GetAssetCancel(chassisNumber string, engineNumber string, lockSystemConfig response.LockSystemConfig) (response.DataCheckLockAsset, bool, error) {
	ret := _m.Called(chassisNumber, engineNumber, lockSystemConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetCancel")
	}

	var r0 response.DataCheckLockAsset
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, response.LockSystemConfig) (response.DataCheckLockAsset, bool, error)); ok {
		return rf(chassisNumber, engineNumber, lockSystemConfig)
	}
	if rf, ok := ret.Get(0).(func(string, string, response.LockSystemConfig) response.DataCheckLockAsset); ok {
		r0 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r0 = ret.Get(0).(response.DataCheckLockAsset)
	}

	if rf, ok := ret.Get(1).(func(string, string, response.LockSystemConfig) bool); ok {
		r1 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string, string, response.LockSystemConfig) error); ok {
		r2 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAssetReject provides a mock function with given fields: chassisNumber, engineNumber, lockSystemConfig
func (_m *Repository) GetAssetReject(chassisNumber string, engineNumber string, lockSystemConfig response.LockSystemConfig) (response.DataCheckLockAsset, bool, error) {
	ret := _m.Called(chassisNumber, engineNumber, lockSystemConfig)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetReject")
	}

	var r0 response.DataCheckLockAsset
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, response.LockSystemConfig) (response.DataCheckLockAsset, bool, error)); ok {
		return rf(chassisNumber, engineNumber, lockSystemConfig)
	}
	if rf, ok := ret.Get(0).(func(string, string, response.LockSystemConfig) response.DataCheckLockAsset); ok {
		r0 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r0 = ret.Get(0).(response.DataCheckLockAsset)
	}

	if rf, ok := ret.Get(1).(func(string, string, response.LockSystemConfig) bool); ok {
		r1 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string, string, response.LockSystemConfig) error); ok {
		r2 = rf(chassisNumber, engineNumber, lockSystemConfig)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) (entity.AppConfig, error) {
	ret := _m.Called(groupName, lob, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 entity.AppConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (entity.AppConfig, error)); ok {
		return rf(groupName, lob, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(groupName, lob, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringByID provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringByID(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResultFiltering provides a mock function with given fields: prospectID
func (_m *Repository) GetResultFiltering(prospectID string) ([]entity.ResultFiltering, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetResultFiltering")
	}

	var r0 []entity.ResultFiltering
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.ResultFiltering, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.ResultFiltering); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ResultFiltering)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingCluster provides a mock function with given fields: req
func (_m *Repository) MasterMappingCluster(req entity.MasterMappingCluster) (entity.MasterMappingCluster, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingCluster")
	}

	var r0 entity.MasterMappingCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) (entity.MasterMappingCluster, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) entity.MasterMappingCluster); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingCluster)
	}

	if rf, ok := ret.Get(1).(func(entity.MasterMappingCluster) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingFpdCluster provides a mock function with given fields: FpdValue
func (_m *Repository) MasterMappingFpdCluster(FpdValue float64) (entity.MasterMappingFpdCluster, error) {
	ret := _m.Called(FpdValue)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingFpdCluster")
	}

	var r0 entity.MasterMappingFpdCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (entity.MasterMappingFpdCluster, error)); ok {
		return rf(FpdValue)
	}
	if rf, ok := ret.Get(0).(func(float64) entity.MasterMappingFpdCluster); ok {
		r0 = rf(FpdValue)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingFpdCluster)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(FpdValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFiltering provides a mock function with given fields: data, trxDetailBiro, dataCMOnoFPD, historyCheckAsset, lockingSystem
func (_m *Repository) SaveFiltering(data entity.FilteringKMB, trxDetailBiro []entity.TrxDetailBiro, dataCMOnoFPD entity.TrxCmoNoFPD, historyCheckAsset []entity.TrxHistoryCheckingAsset, lockingSystem entity.TrxLockSystem) error {
	ret := _m.Called(data, trxDetailBiro, dataCMOnoFPD, historyCheckAsset, lockingSystem)

	if len(ret) == 0 {
		panic("no return value specified for SaveFiltering")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.FilteringKMB, []entity.TrxDetailBiro, entity.TrxCmoNoFPD, []entity.TrxHistoryCheckingAsset, entity.TrxLockSystem) error); ok {
		r0 = rf(data, trxDetailBiro, dataCMOnoFPD, historyCheckAsset, lockingSystem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, request, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, request interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, request, _a2, path, method, prospectID, requestID)

	if len(ret) == 0 {
		panic("no return value specified for SaveLogOrchestrator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, request, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
