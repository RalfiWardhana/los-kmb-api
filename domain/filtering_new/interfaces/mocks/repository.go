// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckCMONoFPD provides a mock function with given fields: cmoID, bpkbName
func (_m *Repository) CheckCMONoFPD(cmoID string, bpkbName string) (entity.TrxCmoNoFPD, error) {
	ret := _m.Called(cmoID, bpkbName)

	var r0 entity.TrxCmoNoFPD
	if rf, ok := ret.Get(0).(func(string, string) entity.TrxCmoNoFPD); ok {
		r0 = rf(cmoID, bpkbName)
	} else {
		r0 = ret.Get(0).(entity.TrxCmoNoFPD)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cmoID, bpkbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DummyDataPbk provides a mock function with given fields: query
func (_m *Repository) DummyDataPbk(query string) (entity.DummyPBK, error) {
	ret := _m.Called(query)

	var r0 entity.DummyPBK
	if rf, ok := ret.Get(0).(func(string) entity.DummyPBK); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.DummyPBK)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringByID provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringByID(prospectID string) (int, error) {
	ret := _m.Called(prospectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResultFiltering provides a mock function with given fields: prospectID
func (_m *Repository) GetResultFiltering(prospectID string) ([]entity.ResultFiltering, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.ResultFiltering
	if rf, ok := ret.Get(0).(func(string) []entity.ResultFiltering); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ResultFiltering)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingCluster provides a mock function with given fields: req
func (_m *Repository) MasterMappingCluster(req entity.MasterMappingCluster) (entity.MasterMappingCluster, error) {
	ret := _m.Called(req)

	var r0 entity.MasterMappingCluster
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) entity.MasterMappingCluster); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingCluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.MasterMappingCluster) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingFpdCluster provides a mock function with given fields: FpdValue
func (_m *Repository) MasterMappingFpdCluster(FpdValue float64) (entity.MasterMappingFpdCluster, error) {
	ret := _m.Called(FpdValue)

	var r0 entity.MasterMappingFpdCluster
	if rf, ok := ret.Get(0).(func(float64) entity.MasterMappingFpdCluster); ok {
		r0 = rf(FpdValue)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingFpdCluster)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(FpdValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFiltering provides a mock function with given fields: data, trxDetailBiro, dataCMOnoFPD
func (_m *Repository) SaveFiltering(data entity.FilteringKMB, trxDetailBiro []entity.TrxDetailBiro, dataCMOnoFPD entity.TrxCmoNoFPD) error {
	ret := _m.Called(data, trxDetailBiro, dataCMOnoFPD)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.FilteringKMB, []entity.TrxDetailBiro, entity.TrxCmoNoFPD) error); ok {
		r0 = rf(data, trxDetailBiro, dataCMOnoFPD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, request, response, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, request interface{}, response interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, request, response, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, request, response, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
