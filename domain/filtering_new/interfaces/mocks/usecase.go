// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AssetEverCanceledLast30Days provides a mock function with given fields: ctx, ChassisNumber, accessToken
func (_m *Usecase) AssetEverCanceledLast30Days(ctx context.Context, ChassisNumber string, accessToken string) (bool, error) {
	ret := _m.Called(ctx, ChassisNumber, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for AssetEverCanceledLast30Days")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, ChassisNumber, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, ChassisNumber, accessToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ChassisNumber, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlacklistCheck provides a mock function with given fields: index, spDupcheck
func (_m *Usecase) BlacklistCheck(index int, spDupcheck response.SpDupCekCustomerByID) (response.UsecaseApi, string) {
	ret := _m.Called(index, spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for BlacklistCheck")
	}

	var r0 response.UsecaseApi
	var r1 string
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) (response.UsecaseApi, string)); ok {
		return rf(index, spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) response.UsecaseApi); ok {
		r0 = rf(index, spDupcheck)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(int, response.SpDupCekCustomerByID) string); ok {
		r1 = rf(index, spDupcheck)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// CheckAgreementChassisNumber provides a mock function with given fields: ctx, reqs, accessToken
func (_m *Usecase) CheckAgreementChassisNumber(ctx context.Context, reqs request.DupcheckApi, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, reqs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckAgreementChassisNumber")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, reqs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.DupcheckApi, string) response.UsecaseApi); ok {
		r0 = rf(ctx, reqs, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.DupcheckApi, string) error); ok {
		r1 = rf(ctx, reqs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckCmoNoFPD provides a mock function with given fields: prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName
func (_m *Usecase) CheckCmoNoFPD(prospectID string, cmoID string, cmoCategory string, cmoJoinDate string, defaultCluster string, bpkbName string) (string, entity.TrxCmoNoFPD, error) {
	ret := _m.Called(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)

	if len(ret) == 0 {
		panic("no return value specified for CheckCmoNoFPD")
	}

	var r0 string
	var r1 entity.TrxCmoNoFPD
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (string, entity.TrxCmoNoFPD, error)); ok {
		return rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) string); ok {
		r0 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) entity.TrxCmoNoFPD); ok {
		r1 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r1 = ret.Get(1).(entity.TrxCmoNoFPD)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, string, string, string) error); ok {
		r2 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckLatestPaidInstallment provides a mock function with given fields: ctx, prospectID, customerID, accessToken
func (_m *Usecase) CheckLatestPaidInstallment(ctx context.Context, prospectID string, customerID string, accessToken string) (string, int, error) {
	ret := _m.Called(ctx, prospectID, customerID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckLatestPaidInstallment")
	}

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, int, error)); ok {
		return rf(ctx, prospectID, customerID, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) int); ok {
		r1 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DupcheckIntegrator provides a mock function with given fields: ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken
func (_m *Usecase) DupcheckIntegrator(ctx context.Context, prospectID string, idNumber string, legalName string, birthDate string, surgateName string, accessToken string) (response.SpDupCekCustomerByID, error) {
	ret := _m.Called(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for DupcheckIntegrator")
	}

	var r0 response.SpDupCekCustomerByID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (response.SpDupCekCustomerByID, error)); ok {
		return rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) response.SpDupCekCustomerByID); ok {
		r0 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r0 = ret.Get(0).(response.SpDupCekCustomerByID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilteringPefindo provides a mock function with given fields: ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken
func (_m *Usecase) FilteringPefindo(ctx context.Context, reqPefindo request.Pefindo, customerStatus string, clusterCMO string, isPrimePriority bool, accessToken string) (response.Filtering, response.PefindoResult, []entity.TrxDetailBiro, error) {
	ret := _m.Called(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for FilteringPefindo")
	}

	var r0 response.Filtering
	var r1 response.PefindoResult
	var r2 []entity.TrxDetailBiro
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Pefindo, string, string, bool, string) (response.Filtering, response.PefindoResult, []entity.TrxDetailBiro, error)); ok {
		return rf(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Pefindo, string, string, bool, string) response.Filtering); ok {
		r0 = rf(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)
	} else {
		r0 = ret.Get(0).(response.Filtering)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Pefindo, string, string, bool, string) response.PefindoResult); ok {
		r1 = rf(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)
	} else {
		r1 = ret.Get(1).(response.PefindoResult)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.Pefindo, string, string, bool, string) []entity.TrxDetailBiro); ok {
		r2 = rf(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]entity.TrxDetailBiro)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.Pefindo, string, string, bool, string) error); ok {
		r3 = rf(ctx, reqPefindo, customerStatus, clusterCMO, isPrimePriority, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FilteringProspectID provides a mock function with given fields: prospectID
func (_m *Usecase) FilteringProspectID(prospectID string) (request.OrderIDCheck, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for FilteringProspectID")
	}

	var r0 request.OrderIDCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (request.OrderIDCheck, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) request.OrderIDCheck); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(request.OrderIDCheck)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeData provides a mock function with given fields: ctx, employeeID, accessToken, hrisAccessToken
func (_m *Usecase) GetEmployeeData(ctx context.Context, employeeID string, accessToken string, hrisAccessToken string) (response.EmployeeCMOResponse, error) {
	ret := _m.Called(ctx, employeeID, accessToken, hrisAccessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeData")
	}

	var r0 response.EmployeeCMOResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (response.EmployeeCMOResponse, error)); ok {
		return rf(ctx, employeeID, accessToken, hrisAccessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) response.EmployeeCMOResponse); ok {
		r0 = rf(ctx, employeeID, accessToken, hrisAccessToken)
	} else {
		r0 = ret.Get(0).(response.EmployeeCMOResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, employeeID, accessToken, hrisAccessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFpdCMO provides a mock function with given fields: ctx, CmoID, BPKBNameType, accessToken
func (_m *Usecase) GetFpdCMO(ctx context.Context, CmoID string, BPKBNameType string, accessToken string) (response.FpdCMOResponse, error) {
	ret := _m.Called(ctx, CmoID, BPKBNameType, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetFpdCMO")
	}

	var r0 response.FpdCMOResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (response.FpdCMOResponse, error)); ok {
		return rf(ctx, CmoID, BPKBNameType, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) response.FpdCMOResponse); ok {
		r0 = rf(ctx, CmoID, BPKBNameType, accessToken)
	} else {
		r0 = ret.Get(0).(response.FpdCMOResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, CmoID, BPKBNameType, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResultFiltering provides a mock function with given fields: prospectID
func (_m *Usecase) GetResultFiltering(prospectID string) (response.Filtering, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetResultFiltering")
	}

	var r0 response.Filtering
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.Filtering, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) response.Filtering); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(response.Filtering)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFiltering provides a mock function with given fields: transaction, trxDetailBiro, transactionCMOnoFPD
func (_m *Usecase) SaveFiltering(transaction entity.FilteringKMB, trxDetailBiro []entity.TrxDetailBiro, transactionCMOnoFPD entity.TrxCmoNoFPD) error {
	ret := _m.Called(transaction, trxDetailBiro, transactionCMOnoFPD)

	if len(ret) == 0 {
		panic("no return value specified for SaveFiltering")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.FilteringKMB, []entity.TrxDetailBiro, entity.TrxCmoNoFPD) error); ok {
		r0 = rf(transaction, trxDetailBiro, transactionCMOnoFPD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
