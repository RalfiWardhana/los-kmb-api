// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) (entity.AppConfig, error) {
	ret := _m.Called(groupName, lob, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 entity.AppConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (entity.AppConfig, error)); ok {
		return rf(groupName, lob, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(groupName, lob, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringDetail provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringDetail(prospectID string) ([]entity.TrxDetailBiro, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringDetail")
	}

	var r0 []entity.TrxDetailBiro
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.TrxDetailBiro, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.TrxDetailBiro); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxDetailBiro)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringResult")
	}

	var r0 entity.FilteringKMB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.FilteringKMB, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingBranchPBK provides a mock function with given fields: branchID, gradePBK
func (_m *Repository) GetMappingBranchPBK(branchID string, gradePBK string) (entity.MappingBranchByPBKScore, error) {
	ret := _m.Called(branchID, gradePBK)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingBranchPBK")
	}

	var r0 entity.MappingBranchByPBKScore
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.MappingBranchByPBKScore, error)); ok {
		return rf(branchID, gradePBK)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.MappingBranchByPBKScore); ok {
		r0 = rf(branchID, gradePBK)
	} else {
		r0 = ret.Get(0).(entity.MappingBranchByPBKScore)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branchID, gradePBK)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateLTV provides a mock function with given fields: resultPefindo, cluster, bpkb_name_type, customerStatus, gradePBK, gradeBranch
func (_m *Repository) GetMappingElaborateLTV(resultPefindo string, cluster string, bpkb_name_type int, customerStatus string, gradePBK string, gradeBranch string) ([]entity.MappingElaborateLTV, error) {
	ret := _m.Called(resultPefindo, cluster, bpkb_name_type, customerStatus, gradePBK, gradeBranch)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingElaborateLTV")
	}

	var r0 []entity.MappingElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string) ([]entity.MappingElaborateLTV, error)); ok {
		return rf(resultPefindo, cluster, bpkb_name_type, customerStatus, gradePBK, gradeBranch)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, string, string, string) []entity.MappingElaborateLTV); ok {
		r0 = rf(resultPefindo, cluster, bpkb_name_type, customerStatus, gradePBK, gradeBranch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingElaborateLTV)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, string, string, string) error); ok {
		r1 = rf(resultPefindo, cluster, bpkb_name_type, customerStatus, gradePBK, gradeBranch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateLTVOvd provides a mock function with given fields: resultPefindo, cluster
func (_m *Repository) GetMappingElaborateLTVOvd(resultPefindo string, cluster string) ([]entity.MappingElaborateLTV, error) {
	ret := _m.Called(resultPefindo, cluster)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingElaborateLTVOvd")
	}

	var r0 []entity.MappingElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]entity.MappingElaborateLTV, error)); ok {
		return rf(resultPefindo, cluster)
	}
	if rf, ok := ret.Get(0).(func(string, string) []entity.MappingElaborateLTV); ok {
		r0 = rf(resultPefindo, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingElaborateLTV)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resultPefindo, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingPBKScoreGrade provides a mock function with given fields:
func (_m *Repository) GetMappingPBKScoreGrade() ([]entity.MappingPBKScoreGrade, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMappingPBKScoreGrade")
	}

	var r0 []entity.MappingPBKScoreGrade
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.MappingPBKScoreGrade, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.MappingPBKScoreGrade); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingPBKScoreGrade)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLogOrchestrator provides a mock function with given fields: header, request, response, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, request interface{}, response interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, request, response, path, method, prospectID, requestID)

	if len(ret) == 0 {
		panic("no return value specified for SaveLogOrchestrator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, request, response, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxElaborateLTV provides a mock function with given fields: data
func (_m *Repository) SaveTrxElaborateLTV(data entity.TrxElaborateLTV) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveTrxElaborateLTV")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxElaborateLTV) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
