// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	auth "los-kmb-api/models/auth"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAuthCredential provides a mock function with given fields: req
func (_m *Repository) GetAuthCredential(req auth.Auth) (auth.Authorize, error) {
	ret := _m.Called(req)

	var r0 auth.Authorize
	if rf, ok := ret.Get(0).(func(auth.Auth) auth.Authorize); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(auth.Authorize)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.Auth) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	var r0 entity.FilteringKMB
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateLTV provides a mock function with given fields: resultPefindo, cluster
func (_m *Repository) GetMappingElaborateLTV(resultPefindo string, cluster string) ([]entity.MappingElaborateLTV, error) {
	ret := _m.Called(resultPefindo, cluster)

	var r0 []entity.MappingElaborateLTV
	if rf, ok := ret.Get(0).(func(string, string) []entity.MappingElaborateLTV); ok {
		r0 = rf(resultPefindo, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingElaborateLTV)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resultPefindo, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLogOrchestrator provides a mock function with given fields: header, request, response, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, request interface{}, response interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, request, response, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, request, response, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxElaborateLTV provides a mock function with given fields: data
func (_m *Repository) SaveTrxElaborateLTV(data entity.TrxElaborateLTV) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxElaborateLTV) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
