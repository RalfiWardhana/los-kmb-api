// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Elaborate provides a mock function with given fields: ctx, reqs, accessToken
func (_m *Usecase) Elaborate(ctx context.Context, reqs request.ElaborateLTV, accessToken string) (response.ElaborateLTV, error) {
	ret := _m.Called(ctx, reqs, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Elaborate")
	}

	var r0 response.ElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ElaborateLTV, string) (response.ElaborateLTV, error)); ok {
		return rf(ctx, reqs, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ElaborateLTV, string) response.ElaborateLTV); ok {
		r0 = rf(ctx, reqs, accessToken)
	} else {
		r0 = ret.Get(0).(response.ElaborateLTV)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ElaborateLTV, string) error); ok {
		r1 = rf(ctx, reqs, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
