// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAkkk provides a mock function with given fields: prospectID
func (_m *Repository) GetAkkk(prospectID string) (entity.Akkk, error) {
	ret := _m.Called(prospectID)

	var r0 entity.Akkk
	if rf, ok := ret.Get(0).(func(string) entity.Akkk); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.Akkk)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalReason provides a mock function with given fields: req, pagination
func (_m *Repository) GetApprovalReason(req request.ReqApprovalReason, pagination interface{}) ([]entity.ApprovalReason, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.ApprovalReason
	if rf, ok := ret.Get(0).(func(request.ReqApprovalReason, interface{}) []entity.ApprovalReason); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApprovalReason)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqApprovalReason, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqApprovalReason, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCancelReason provides a mock function with given fields: pagination
func (_m *Repository) GetCancelReason(pagination interface{}) ([]entity.CancelReason, int, error) {
	ret := _m.Called(pagination)

	var r0 []entity.CancelReason
	if rf, ok := ret.Get(0).(func(interface{}) []entity.CancelReason); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CancelReason)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(interface{}) int); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerPhoto provides a mock function with given fields: prospectID
func (_m *Repository) GetCustomerPhoto(prospectID string) ([]entity.DataPhoto, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.DataPhoto
	if rf, ok := ret.Get(0).(func(string) []entity.DataPhoto); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DataPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryApproval provides a mock function with given fields: prospectID
func (_m *Repository) GetHistoryApproval(prospectID string) ([]entity.HistoryApproval, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.HistoryApproval
	if rf, ok := ret.Get(0).(func(string) []entity.HistoryApproval); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.HistoryApproval)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryProcess provides a mock function with given fields: prospectID
func (_m *Repository) GetHistoryProcess(prospectID string) ([]entity.TrxDetail, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.TrxDetail
	if rf, ok := ret.Get(0).(func(string) []entity.TrxDetail); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryApproval provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryApproval(req request.ReqInquiryApproval, pagination interface{}) ([]entity.InquiryCa, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquiryCa
	if rf, ok := ret.Get(0).(func(request.ReqInquiryApproval, interface{}) []entity.InquiryCa); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryCa)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqInquiryApproval, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqInquiryApproval, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryCa provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryCa(req request.ReqInquiryCa, pagination interface{}) ([]entity.InquiryCa, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquiryCa
	if rf, ok := ret.Get(0).(func(request.ReqInquiryCa, interface{}) []entity.InquiryCa); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryCa)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqInquiryCa, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqInquiryCa, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryPrescreening(req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryPrescreening, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquiryPrescreening
	if rf, ok := ret.Get(0).(func(request.ReqInquiryPrescreening, interface{}) []entity.InquiryPrescreening); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryPrescreening)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquirySearch provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquirySearch(req request.ReqSearchInquiry, pagination interface{}) ([]entity.InquirySearch, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquirySearch
	if rf, ok := ret.Get(0).(func(request.ReqSearchInquiry, interface{}) []entity.InquirySearch); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquirySearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqSearchInquiry, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqSearchInquiry, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInternalRecord provides a mock function with given fields: prospectID
func (_m *Repository) GetInternalRecord(prospectID string) ([]entity.TrxInternalRecord, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.TrxInternalRecord
	if rf, ok := ret.Get(0).(func(string) []entity.TrxInternalRecord); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxInternalRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitApproval provides a mock function with given fields: ntf
func (_m *Repository) GetLimitApproval(ntf float64) (entity.MappingLimitApprovalScheme, error) {
	ret := _m.Called(ntf)

	var r0 entity.MappingLimitApprovalScheme
	if rf, ok := ret.Get(0).(func(float64) entity.MappingLimitApprovalScheme); ok {
		r0 = rf(ntf)
	} else {
		r0 = ret.Get(0).(entity.MappingLimitApprovalScheme)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(ntf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReasonPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetReasonPrescreening(req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.ReasonMessage
	if rf, ok := ret.Get(0).(func(request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSpIndustryTypeMaster provides a mock function with given fields:
func (_m *Repository) GetSpIndustryTypeMaster() ([]entity.SpIndustryTypeMaster, error) {
	ret := _m.Called()

	var r0 []entity.SpIndustryTypeMaster
	if rf, ok := ret.Get(0).(func() []entity.SpIndustryTypeMaster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SpIndustryTypeMaster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyorData provides a mock function with given fields: prospectID
func (_m *Repository) GetSurveyorData(prospectID string) ([]entity.TrxSurveyor, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.TrxSurveyor
	if rf, ok := ret.Get(0).(func(string) []entity.TrxSurveyor); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxSurveyor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxStatus provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxStatus(prospectID string) (entity.TrxStatus, error) {
	ret := _m.Called(prospectID)

	var r0 entity.TrxStatus
	if rf, ok := ret.Get(0).(func(string) entity.TrxStatus); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessReturnOrder provides a mock function with given fields: prospectID, trxStatus, trxDetail
func (_m *Repository) ProcessReturnOrder(prospectID string, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail) error {
	ret := _m.Called(prospectID, trxStatus, trxDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.TrxStatus, entity.TrxDetail) error); ok {
		r0 = rf(prospectID, trxStatus, trxDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessTransaction provides a mock function with given fields: trxCaDecision, trxHistoryApproval, trxStatus, trxDetail
func (_m *Repository) ProcessTransaction(trxCaDecision entity.TrxCaDecision, trxHistoryApproval entity.TrxHistoryApprovalScheme, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail) error {
	ret := _m.Called(trxCaDecision, trxHistoryApproval, trxStatus, trxDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxCaDecision, entity.TrxHistoryApprovalScheme, entity.TrxStatus, entity.TrxDetail) error); ok {
		r0 = rf(trxCaDecision, trxHistoryApproval, trxStatus, trxDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDraftData provides a mock function with given fields: draft
func (_m *Repository) SaveDraftData(draft entity.TrxDraftCaDecision) error {
	ret := _m.Called(draft)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxDraftCaDecision) error); ok {
		r0 = rf(draft)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, _a2, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrescreening provides a mock function with given fields: prescreening, detail, status
func (_m *Repository) SavePrescreening(prescreening entity.TrxPrescreening, detail entity.TrxDetail, status entity.TrxStatus) error {
	ret := _m.Called(prescreening, detail, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrescreening, entity.TrxDetail, entity.TrxStatus) error); ok {
		r0 = rf(prescreening, detail, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitApproval provides a mock function with given fields: req, trxStatus, trxDetail, approval
func (_m *Repository) SubmitApproval(req request.ReqSubmitApproval, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail, approval response.RespApprovalScheme) error {
	ret := _m.Called(req, trxStatus, trxDetail, approval)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.ReqSubmitApproval, entity.TrxStatus, entity.TrxDetail, response.RespApprovalScheme) error); ok {
		r0 = rf(req, trxStatus, trxDetail, approval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
