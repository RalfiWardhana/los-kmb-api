// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BatchUpdateMappingCluster provides a mock function with given fields: data, history
func (_m *Repository) BatchUpdateMappingCluster(data []entity.MasterMappingCluster, history entity.HistoryConfigChanges) error {
	ret := _m.Called(data, history)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateMappingCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entity.MasterMappingCluster, entity.HistoryConfigChanges) error); ok {
		r0 = rf(data, history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchUpdateQuotaDeviasi provides a mock function with given fields: data
func (_m *Repository) BatchUpdateQuotaDeviasi(data []entity.MappingBranchDeviasi) ([]entity.MappingBranchDeviasi, []entity.MappingBranchDeviasi, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateQuotaDeviasi")
	}

	var r0 []entity.MappingBranchDeviasi
	var r1 []entity.MappingBranchDeviasi
	var r2 error
	if rf, ok := ret.Get(0).(func([]entity.MappingBranchDeviasi) ([]entity.MappingBranchDeviasi, []entity.MappingBranchDeviasi, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]entity.MappingBranchDeviasi) []entity.MappingBranchDeviasi); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingBranchDeviasi)
		}
	}

	if rf, ok := ret.Get(1).(func([]entity.MappingBranchDeviasi) []entity.MappingBranchDeviasi); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]entity.MappingBranchDeviasi)
		}
	}

	if rf, ok := ret.Get(2).(func([]entity.MappingBranchDeviasi) error); ok {
		r2 = rf(data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAFMobilePhone provides a mock function with given fields: prospectID
func (_m *Repository) GetAFMobilePhone(prospectID string) (entity.AFMobilePhone, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAFMobilePhone")
	}

	var r0 entity.AFMobilePhone
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.AFMobilePhone, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.AFMobilePhone); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.AFMobilePhone)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAkkk provides a mock function with given fields: prospectID
func (_m *Repository) GetAkkk(prospectID string) (entity.Akkk, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAkkk")
	}

	var r0 entity.Akkk
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Akkk, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Akkk); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.Akkk)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalReason provides a mock function with given fields: req, pagination
func (_m *Repository) GetApprovalReason(req request.ReqApprovalReason, pagination interface{}) ([]entity.ApprovalReason, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetApprovalReason")
	}

	var r0 []entity.ApprovalReason
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqApprovalReason, interface{}) ([]entity.ApprovalReason, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqApprovalReason, interface{}) []entity.ApprovalReason); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApprovalReason)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqApprovalReason, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqApprovalReason, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCancelReason provides a mock function with given fields: pagination
func (_m *Repository) GetCancelReason(pagination interface{}) ([]entity.CancelReason, int, error) {
	ret := _m.Called(pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetCancelReason")
	}

	var r0 []entity.CancelReason
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]entity.CancelReason, int, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []entity.CancelReason); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CancelReason)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) int); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerPhoto provides a mock function with given fields: prospectID
func (_m *Repository) GetCustomerPhoto(prospectID string) ([]entity.DataPhoto, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerPhoto")
	}

	var r0 []entity.DataPhoto
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.DataPhoto, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.DataPhoto); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DataPhoto)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryApproval provides a mock function with given fields: prospectID
func (_m *Repository) GetHistoryApproval(prospectID string) ([]entity.HistoryApproval, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryApproval")
	}

	var r0 []entity.HistoryApproval
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.HistoryApproval, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.HistoryApproval); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.HistoryApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryProcess provides a mock function with given fields: prospectID
func (_m *Repository) GetHistoryProcess(prospectID string) ([]entity.HistoryProcess, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetHistoryProcess")
	}

	var r0 []entity.HistoryProcess
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.HistoryProcess, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.HistoryProcess); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.HistoryProcess)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryApproval provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryApproval(req request.ReqInquiryApproval, pagination interface{}) ([]entity.InquiryCa, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryApproval")
	}

	var r0 []entity.InquiryCa
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqInquiryApproval, interface{}) ([]entity.InquiryCa, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqInquiryApproval, interface{}) []entity.InquiryCa); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryCa)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqInquiryApproval, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqInquiryApproval, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryCa provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryCa(req request.ReqInquiryCa, pagination interface{}) ([]entity.InquiryCa, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryCa")
	}

	var r0 []entity.InquiryCa
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqInquiryCa, interface{}) ([]entity.InquiryCa, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqInquiryCa, interface{}) []entity.InquiryCa); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryCa)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqInquiryCa, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqInquiryCa, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryListOrder provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryListOrder(req request.ReqInquiryListOrder, pagination interface{}) ([]entity.InquiryDataListOrder, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryListOrder")
	}

	var r0 []entity.InquiryDataListOrder
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqInquiryListOrder, interface{}) ([]entity.InquiryDataListOrder, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqInquiryListOrder, interface{}) []entity.InquiryDataListOrder); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataListOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqInquiryListOrder, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqInquiryListOrder, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryListOrderDetail provides a mock function with given fields: prospectID
func (_m *Repository) GetInquiryListOrderDetail(prospectID string) (entity.InquiryDataListOrder, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryListOrderDetail")
	}

	var r0 entity.InquiryDataListOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.InquiryDataListOrder, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.InquiryDataListOrder); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.InquiryDataListOrder)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryMappingCluster provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryMappingCluster(req request.ReqListMappingCluster, pagination interface{}) ([]entity.InquiryMappingCluster, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryMappingCluster")
	}

	var r0 []entity.InquiryMappingCluster
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqListMappingCluster, interface{}) ([]entity.InquiryMappingCluster, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListMappingCluster, interface{}) []entity.InquiryMappingCluster); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryMappingCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListMappingCluster, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqListMappingCluster, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryNE provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryNE(req request.ReqInquiryNE, pagination interface{}) ([]entity.InquiryDataNE, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryNE")
	}

	var r0 []entity.InquiryDataNE
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqInquiryNE, interface{}) ([]entity.InquiryDataNE, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqInquiryNE, interface{}) []entity.InquiryDataNE); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataNE)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqInquiryNE, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqInquiryNE, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryNEDetail provides a mock function with given fields: prospectID
func (_m *Repository) GetInquiryNEDetail(prospectID string) (entity.NewEntry, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryNEDetail")
	}

	var r0 entity.NewEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.NewEntry, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.NewEntry); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.NewEntry)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryPrescreening(req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryPrescreening, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryPrescreening")
	}

	var r0 []entity.InquiryPrescreening
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqInquiryPrescreening, interface{}) ([]entity.InquiryPrescreening, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqInquiryPrescreening, interface{}) []entity.InquiryPrescreening); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryPrescreening)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryQuotaDeviasi provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryQuotaDeviasi(req request.ReqListQuotaDeviasi, pagination interface{}) ([]entity.InquirySettingQuotaDeviasi, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryQuotaDeviasi")
	}

	var r0 []entity.InquirySettingQuotaDeviasi
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasi, interface{}) ([]entity.InquirySettingQuotaDeviasi, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasi, interface{}) []entity.InquirySettingQuotaDeviasi); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquirySettingQuotaDeviasi)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListQuotaDeviasi, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqListQuotaDeviasi, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquirySearch provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquirySearch(req request.ReqSearchInquiry, pagination interface{}) ([]entity.InquirySearch, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquirySearch")
	}

	var r0 []entity.InquirySearch
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqSearchInquiry, interface{}) ([]entity.InquirySearch, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqSearchInquiry, interface{}) []entity.InquirySearch); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquirySearch)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqSearchInquiry, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqSearchInquiry, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInternalRecord provides a mock function with given fields: prospectID
func (_m *Repository) GetInternalRecord(prospectID string) ([]entity.TrxInternalRecord, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetInternalRecord")
	}

	var r0 []entity.TrxInternalRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.TrxInternalRecord, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.TrxInternalRecord); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxInternalRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitApproval provides a mock function with given fields: ntf
func (_m *Repository) GetLimitApproval(ntf float64) (entity.MappingLimitApprovalScheme, error) {
	ret := _m.Called(ntf)

	if len(ret) == 0 {
		panic("no return value specified for GetLimitApproval")
	}

	var r0 entity.MappingLimitApprovalScheme
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (entity.MappingLimitApprovalScheme, error)); ok {
		return rf(ntf)
	}
	if rf, ok := ret.Get(0).(func(float64) entity.MappingLimitApprovalScheme); ok {
		r0 = rf(ntf)
	} else {
		r0 = ret.Get(0).(entity.MappingLimitApprovalScheme)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(ntf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLimitApprovalDeviasi provides a mock function with given fields: prospectID
func (_m *Repository) GetLimitApprovalDeviasi(prospectID string) (entity.MappingLimitApprovalScheme, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetLimitApprovalDeviasi")
	}

	var r0 entity.MappingLimitApprovalScheme
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.MappingLimitApprovalScheme, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.MappingLimitApprovalScheme); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.MappingLimitApprovalScheme)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListBranch provides a mock function with given fields: req
func (_m *Repository) GetListBranch(req request.ReqListBranch) ([]string, []response.BranchInfo, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetListBranch")
	}

	var r0 []string
	var r1 []response.BranchInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqListBranch) ([]string, []response.BranchInfo, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListBranch) []string); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListBranch) []response.BranchInfo); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]response.BranchInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(request.ReqListBranch) error); ok {
		r2 = rf(req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMappingCluster provides a mock function with given fields:
func (_m *Repository) GetMappingCluster() ([]entity.MasterMappingCluster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMappingCluster")
	}

	var r0 []entity.MasterMappingCluster
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.MasterMappingCluster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.MasterMappingCluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MasterMappingCluster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingClusterBranch provides a mock function with given fields: req
func (_m *Repository) GetMappingClusterBranch(req request.ReqListMappingClusterBranch) ([]entity.ConfinsBranch, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingClusterBranch")
	}

	var r0 []entity.ConfinsBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqListMappingClusterBranch) ([]entity.ConfinsBranch, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListMappingClusterBranch) []entity.ConfinsBranch); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ConfinsBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListMappingClusterBranch) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingClusterChangeLog provides a mock function with given fields: pagination
func (_m *Repository) GetMappingClusterChangeLog(pagination interface{}) ([]entity.MappingClusterChangeLog, int, error) {
	ret := _m.Called(pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingClusterChangeLog")
	}

	var r0 []entity.MappingClusterChangeLog
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]entity.MappingClusterChangeLog, int, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []entity.MappingClusterChangeLog); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingClusterChangeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) int); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetQuotaDeviasiBranch provides a mock function with given fields: req
func (_m *Repository) GetQuotaDeviasiBranch(req request.ReqListQuotaDeviasiBranch) ([]entity.ConfinsBranch, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetQuotaDeviasiBranch")
	}

	var r0 []entity.ConfinsBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasiBranch) ([]entity.ConfinsBranch, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasiBranch) []entity.ConfinsBranch); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ConfinsBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListQuotaDeviasiBranch) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReasonPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetReasonPrescreening(req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetReasonPrescreening")
	}

	var r0 []entity.ReasonMessage
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqReasonPrescreening, interface{}) ([]entity.ReasonMessage, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRegionBranch provides a mock function with given fields: userId
func (_m *Repository) GetRegionBranch(userId string) ([]entity.RegionBranch, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetRegionBranch")
	}

	var r0 []entity.RegionBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.RegionBranch, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.RegionBranch); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RegionBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpIndustryTypeMaster provides a mock function with given fields:
func (_m *Repository) GetSpIndustryTypeMaster() ([]entity.SpIndustryTypeMaster, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSpIndustryTypeMaster")
	}

	var r0 []entity.SpIndustryTypeMaster
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.SpIndustryTypeMaster, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.SpIndustryTypeMaster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SpIndustryTypeMaster)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyorData provides a mock function with given fields: prospectID
func (_m *Repository) GetSurveyorData(prospectID string) ([]entity.TrxSurveyor, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetSurveyorData")
	}

	var r0 []entity.TrxSurveyor
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.TrxSurveyor, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.TrxSurveyor); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxSurveyor)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxEDD provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxEDD(prospectID string) (entity.TrxEDD, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxEDD")
	}

	var r0 entity.TrxEDD
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxEDD, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxEDD); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxEDD)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxStatus provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxStatus(prospectID string) (entity.TrxStatus, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxStatus")
	}

	var r0 entity.TrxStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxStatus, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxStatus); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRecalculateOrder provides a mock function with given fields: prospectID, trxStatus, trxDetail, trxHistoryApproval
func (_m *Repository) ProcessRecalculateOrder(prospectID string, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail, trxHistoryApproval entity.TrxHistoryApprovalScheme) error {
	ret := _m.Called(prospectID, trxStatus, trxDetail, trxHistoryApproval)

	if len(ret) == 0 {
		panic("no return value specified for ProcessRecalculateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.TrxStatus, entity.TrxDetail, entity.TrxHistoryApprovalScheme) error); ok {
		r0 = rf(prospectID, trxStatus, trxDetail, trxHistoryApproval)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessResetAllQuotaDeviasi provides a mock function with given fields: updatedBy
func (_m *Repository) ProcessResetAllQuotaDeviasi(updatedBy string) error {
	ret := _m.Called(updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for ProcessResetAllQuotaDeviasi")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(updatedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessResetQuotaDeviasiBranch provides a mock function with given fields: branchID, updatedBy
func (_m *Repository) ProcessResetQuotaDeviasiBranch(branchID string, updatedBy string) (entity.DataQuotaDeviasiBranch, entity.DataQuotaDeviasiBranch, error) {
	ret := _m.Called(branchID, updatedBy)

	if len(ret) == 0 {
		panic("no return value specified for ProcessResetQuotaDeviasiBranch")
	}

	var r0 entity.DataQuotaDeviasiBranch
	var r1 entity.DataQuotaDeviasiBranch
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.DataQuotaDeviasiBranch, entity.DataQuotaDeviasiBranch, error)); ok {
		return rf(branchID, updatedBy)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.DataQuotaDeviasiBranch); ok {
		r0 = rf(branchID, updatedBy)
	} else {
		r0 = ret.Get(0).(entity.DataQuotaDeviasiBranch)
	}

	if rf, ok := ret.Get(1).(func(string, string) entity.DataQuotaDeviasiBranch); ok {
		r1 = rf(branchID, updatedBy)
	} else {
		r1 = ret.Get(1).(entity.DataQuotaDeviasiBranch)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(branchID, updatedBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ProcessReturnOrder provides a mock function with given fields: prospectID, trxStatus, trxDetail
func (_m *Repository) ProcessReturnOrder(prospectID string, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail) error {
	ret := _m.Called(prospectID, trxStatus, trxDetail)

	if len(ret) == 0 {
		panic("no return value specified for ProcessReturnOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.TrxStatus, entity.TrxDetail) error); ok {
		r0 = rf(prospectID, trxStatus, trxDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessTransaction provides a mock function with given fields: trxCaDecision, trxHistoryApproval, trxStatus, trxDetail, isCancel, trxEdd
func (_m *Repository) ProcessTransaction(trxCaDecision entity.TrxCaDecision, trxHistoryApproval entity.TrxHistoryApprovalScheme, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail, isCancel bool, trxEdd entity.TrxEDD) error {
	ret := _m.Called(trxCaDecision, trxHistoryApproval, trxStatus, trxDetail, isCancel, trxEdd)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxCaDecision, entity.TrxHistoryApprovalScheme, entity.TrxStatus, entity.TrxDetail, bool, entity.TrxEDD) error); ok {
		r0 = rf(trxCaDecision, trxHistoryApproval, trxStatus, trxDetail, isCancel, trxEdd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessUpdateQuotaDeviasiBranch provides a mock function with given fields: branchID, mBranchDeviasi
func (_m *Repository) ProcessUpdateQuotaDeviasiBranch(branchID string, mBranchDeviasi entity.MappingBranchDeviasi) (entity.DataQuotaDeviasiBranch, entity.DataQuotaDeviasiBranch, error) {
	ret := _m.Called(branchID, mBranchDeviasi)

	if len(ret) == 0 {
		panic("no return value specified for ProcessUpdateQuotaDeviasiBranch")
	}

	var r0 entity.DataQuotaDeviasiBranch
	var r1 entity.DataQuotaDeviasiBranch
	var r2 error
	if rf, ok := ret.Get(0).(func(string, entity.MappingBranchDeviasi) (entity.DataQuotaDeviasiBranch, entity.DataQuotaDeviasiBranch, error)); ok {
		return rf(branchID, mBranchDeviasi)
	}
	if rf, ok := ret.Get(0).(func(string, entity.MappingBranchDeviasi) entity.DataQuotaDeviasiBranch); ok {
		r0 = rf(branchID, mBranchDeviasi)
	} else {
		r0 = ret.Get(0).(entity.DataQuotaDeviasiBranch)
	}

	if rf, ok := ret.Get(1).(func(string, entity.MappingBranchDeviasi) entity.DataQuotaDeviasiBranch); ok {
		r1 = rf(branchID, mBranchDeviasi)
	} else {
		r1 = ret.Get(1).(entity.DataQuotaDeviasiBranch)
	}

	if rf, ok := ret.Get(2).(func(string, entity.MappingBranchDeviasi) error); ok {
		r2 = rf(branchID, mBranchDeviasi)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveDraftData provides a mock function with given fields: draft
func (_m *Repository) SaveDraftData(draft entity.TrxDraftCaDecision) error {
	ret := _m.Called(draft)

	if len(ret) == 0 {
		panic("no return value specified for SaveDraftData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxDraftCaDecision) error); ok {
		r0 = rf(draft)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, _a2, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, _a2 interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, _a2, path, method, prospectID, requestID)

	if len(ret) == 0 {
		panic("no return value specified for SaveLogOrchestrator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, _a2, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrescreening provides a mock function with given fields: prescreening, detail, status
func (_m *Repository) SavePrescreening(prescreening entity.TrxPrescreening, detail entity.TrxDetail, status entity.TrxStatus) error {
	ret := _m.Called(prescreening, detail, status)

	if len(ret) == 0 {
		panic("no return value specified for SavePrescreening")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrescreening, entity.TrxDetail, entity.TrxStatus) error); ok {
		r0 = rf(prescreening, detail, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUrlFormAKKK provides a mock function with given fields: prospectID, urlFormAKKK
func (_m *Repository) SaveUrlFormAKKK(prospectID string, urlFormAKKK string) error {
	ret := _m.Called(prospectID, urlFormAKKK)

	if len(ret) == 0 {
		panic("no return value specified for SaveUrlFormAKKK")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(prospectID, urlFormAKKK)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveWorker provides a mock function with given fields: trxworker
func (_m *Repository) SaveWorker(trxworker entity.TrxWorker) error {
	ret := _m.Called(trxworker)

	if len(ret) == 0 {
		panic("no return value specified for SaveWorker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxWorker) error); ok {
		r0 = rf(trxworker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitApproval provides a mock function with given fields: req, trxStatus, trxDetail, trxRecalculate, approval
func (_m *Repository) SubmitApproval(req request.ReqSubmitApproval, trxStatus entity.TrxStatus, trxDetail entity.TrxDetail, trxRecalculate entity.TrxRecalculate, approval response.RespApprovalScheme) (entity.TrxStatus, error) {
	ret := _m.Called(req, trxStatus, trxDetail, trxRecalculate, approval)

	if len(ret) == 0 {
		panic("no return value specified for SubmitApproval")
	}

	var r0 entity.TrxStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqSubmitApproval, entity.TrxStatus, entity.TrxDetail, entity.TrxRecalculate, response.RespApprovalScheme) (entity.TrxStatus, error)); ok {
		return rf(req, trxStatus, trxDetail, trxRecalculate, approval)
	}
	if rf, ok := ret.Get(0).(func(request.ReqSubmitApproval, entity.TrxStatus, entity.TrxDetail, entity.TrxRecalculate, response.RespApprovalScheme) entity.TrxStatus); ok {
		r0 = rf(req, trxStatus, trxDetail, trxRecalculate, approval)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	if rf, ok := ret.Get(1).(func(request.ReqSubmitApproval, entity.TrxStatus, entity.TrxDetail, entity.TrxRecalculate, response.RespApprovalScheme) error); ok {
		r1 = rf(req, trxStatus, trxDetail, trxRecalculate, approval)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitNE provides a mock function with given fields: req, filtering, elaboreateLTV, journey
func (_m *Repository) SubmitNE(req request.MetricsNE, filtering request.Filtering, elaboreateLTV request.ElaborateLTV, journey request.Metrics) error {
	ret := _m.Called(req, filtering, elaboreateLTV, journey)

	if len(ret) == 0 {
		panic("no return value specified for SubmitNE")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.MetricsNE, request.Filtering, request.ElaborateLTV, request.Metrics) error); ok {
		r0 = rf(req, filtering, elaboreateLTV, journey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
