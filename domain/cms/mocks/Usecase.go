// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, req
func (_m *Usecase) CancelOrder(ctx context.Context, req request.ReqCancelOrder) (response.CancelResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CancelOrder")
	}

	var r0 response.CancelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqCancelOrder) (response.CancelResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqCancelOrder) response.CancelResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CancelResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqCancelOrder) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateExcelMappingCluster provides a mock function with given fields:
func (_m *Usecase) GenerateExcelMappingCluster() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateExcelMappingCluster")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateExcelQuotaDeviasi provides a mock function with given fields:
func (_m *Usecase) GenerateExcelQuotaDeviasi() (string, string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateExcelQuotaDeviasi")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func() (string, string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GenerateFormAKKK provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) GenerateFormAKKK(ctx context.Context, req request.RequestGenerateFormAKKK, accessToken string) (interface{}, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFormAKKK")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.RequestGenerateFormAKKK, string) (interface{}, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.RequestGenerateFormAKKK, string) interface{}); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.RequestGenerateFormAKKK, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgreementByLicensePlate provides a mock function with given fields: ctx, LicensePlate, accessToken
func (_m *Usecase) GetAgreementByLicensePlate(ctx context.Context, LicensePlate string, accessToken string) (response.ChassisNumberOfLicensePlateResponse, error) {
	ret := _m.Called(ctx, LicensePlate, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetAgreementByLicensePlate")
	}

	var r0 response.ChassisNumberOfLicensePlateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.ChassisNumberOfLicensePlateResponse, error)); ok {
		return rf(ctx, LicensePlate, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.ChassisNumberOfLicensePlateResponse); ok {
		r0 = rf(ctx, LicensePlate, accessToken)
	} else {
		r0 = ret.Get(0).(response.ChassisNumberOfLicensePlateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, LicensePlate, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAkkk provides a mock function with given fields: prospectID
func (_m *Usecase) GetAkkk(prospectID string) (entity.Akkk, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetAkkk")
	}

	var r0 entity.Akkk
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Akkk, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Akkk); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.Akkk)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalReason provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetApprovalReason(ctx context.Context, req request.ReqApprovalReason, pagination interface{}) ([]entity.ApprovalReason, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetApprovalReason")
	}

	var r0 []entity.ApprovalReason
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqApprovalReason, interface{}) ([]entity.ApprovalReason, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqApprovalReason, interface{}) []entity.ApprovalReason); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApprovalReason)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqApprovalReason, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqApprovalReason, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCancelReason provides a mock function with given fields: ctx, pagination
func (_m *Usecase) GetCancelReason(ctx context.Context, pagination interface{}) ([]entity.CancelReason, int, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetCancelReason")
	}

	var r0 []entity.CancelReason
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) ([]entity.CancelReason, int, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []entity.CancelReason); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CancelReason)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) int); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, interface{}) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDatatableApproval provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetDatatableApproval(ctx context.Context, req request.ReqInquiryApproval, pagination interface{}) ([]entity.RespDatatableApproval, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetDatatableApproval")
	}

	var r0 []entity.RespDatatableApproval
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryApproval, interface{}) ([]entity.RespDatatableApproval, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryApproval, interface{}) []entity.RespDatatableApproval); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RespDatatableApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryApproval, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryApproval, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDatatableCa provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetDatatableCa(ctx context.Context, req request.ReqInquiryCa, pagination interface{}) ([]entity.RespDatatableCA, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetDatatableCa")
	}

	var r0 []entity.RespDatatableCA
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryCa, interface{}) ([]entity.RespDatatableCA, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryCa, interface{}) []entity.RespDatatableCA); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RespDatatableCA)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryCa, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryCa, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDatatablePrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetDatatablePrescreening(ctx context.Context, req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.RespDatatablePrescreening, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetDatatablePrescreening")
	}

	var r0 []entity.RespDatatablePrescreening
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) ([]entity.RespDatatablePrescreening, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) []entity.RespDatatablePrescreening); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RespDatatablePrescreening)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryApproval provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryApproval(ctx context.Context, req request.ReqInquiryApproval, pagination interface{}) ([]entity.InquiryDataApproval, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryApproval")
	}

	var r0 []entity.InquiryDataApproval
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryApproval, interface{}) ([]entity.InquiryDataApproval, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryApproval, interface{}) []entity.InquiryDataApproval); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataApproval)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryApproval, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryApproval, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryCa provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryCa(ctx context.Context, req request.ReqInquiryCa, pagination interface{}) ([]entity.InquiryDataCa, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryCa")
	}

	var r0 []entity.InquiryDataCa
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryCa, interface{}) ([]entity.InquiryDataCa, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryCa, interface{}) []entity.InquiryDataCa); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataCa)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryCa, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryCa, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryListOrder provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryListOrder(ctx context.Context, req request.ReqInquiryListOrder, pagination interface{}) ([]entity.InquiryDataListOrder, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryListOrder")
	}

	var r0 []entity.InquiryDataListOrder
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryListOrder, interface{}) ([]entity.InquiryDataListOrder, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryListOrder, interface{}) []entity.InquiryDataListOrder); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataListOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryListOrder, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryListOrder, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryListOrderDetail provides a mock function with given fields: ctx, prospectID
func (_m *Usecase) GetInquiryListOrderDetail(ctx context.Context, prospectID string) (entity.InquiryDataListOrder, error) {
	ret := _m.Called(ctx, prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryListOrderDetail")
	}

	var r0 entity.InquiryDataListOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.InquiryDataListOrder, error)); ok {
		return rf(ctx, prospectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.InquiryDataListOrder); ok {
		r0 = rf(ctx, prospectID)
	} else {
		r0 = ret.Get(0).(entity.InquiryDataListOrder)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryMappingCluster provides a mock function with given fields: req, pagination
func (_m *Usecase) GetInquiryMappingCluster(req request.ReqListMappingCluster, pagination interface{}) ([]entity.InquiryMappingCluster, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryMappingCluster")
	}

	var r0 []entity.InquiryMappingCluster
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqListMappingCluster, interface{}) ([]entity.InquiryMappingCluster, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListMappingCluster, interface{}) []entity.InquiryMappingCluster); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryMappingCluster)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListMappingCluster, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqListMappingCluster, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryNE provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryNE(ctx context.Context, req request.ReqInquiryNE, pagination interface{}) ([]entity.InquiryDataNE, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryNE")
	}

	var r0 []entity.InquiryDataNE
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryNE, interface{}) ([]entity.InquiryDataNE, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryNE, interface{}) []entity.InquiryDataNE); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataNE)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryNE, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryNE, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryNEDetail provides a mock function with given fields: ctx, prospectID
func (_m *Usecase) GetInquiryNEDetail(ctx context.Context, prospectID string) (request.MetricsNE, error) {
	ret := _m.Called(ctx, prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryNEDetail")
	}

	var r0 request.MetricsNE
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (request.MetricsNE, error)); ok {
		return rf(ctx, prospectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) request.MetricsNE); ok {
		r0 = rf(ctx, prospectID)
	} else {
		r0 = ret.Get(0).(request.MetricsNE)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryPrescreening(ctx context.Context, req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryData, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryPrescreening")
	}

	var r0 []entity.InquiryData
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) ([]entity.InquiryData, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) []entity.InquiryData); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryQuotaDeviasi provides a mock function with given fields: req, pagination
func (_m *Usecase) GetInquiryQuotaDeviasi(req request.ReqListQuotaDeviasi, pagination interface{}) ([]entity.InquirySettingQuotaDeviasi, int, error) {
	ret := _m.Called(req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetInquiryQuotaDeviasi")
	}

	var r0 []entity.InquirySettingQuotaDeviasi
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasi, interface{}) ([]entity.InquirySettingQuotaDeviasi, int, error)); ok {
		return rf(req, pagination)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasi, interface{}) []entity.InquirySettingQuotaDeviasi); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquirySettingQuotaDeviasi)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListQuotaDeviasi, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(request.ReqListQuotaDeviasi, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListBranch provides a mock function with given fields: ctx, req
func (_m *Usecase) GetListBranch(ctx context.Context, req request.ReqListBranch) (response.ListBranchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetListBranch")
	}

	var r0 response.ListBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqListBranch) (response.ListBranchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqListBranch) response.ListBranchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ListBranchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqListBranch) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingClusterBranch provides a mock function with given fields: req
func (_m *Usecase) GetMappingClusterBranch(req request.ReqListMappingClusterBranch) ([]entity.ConfinsBranch, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingClusterBranch")
	}

	var r0 []entity.ConfinsBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqListMappingClusterBranch) ([]entity.ConfinsBranch, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListMappingClusterBranch) []entity.ConfinsBranch); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ConfinsBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListMappingClusterBranch) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingClusterChangeLog provides a mock function with given fields: pagination
func (_m *Usecase) GetMappingClusterChangeLog(pagination interface{}) ([]entity.MappingClusterChangeLog, int, error) {
	ret := _m.Called(pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingClusterChangeLog")
	}

	var r0 []entity.MappingClusterChangeLog
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]entity.MappingClusterChangeLog, int, error)); ok {
		return rf(pagination)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []entity.MappingClusterChangeLog); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingClusterChangeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) int); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetQuotaDeviasiBranch provides a mock function with given fields: req
func (_m *Usecase) GetQuotaDeviasiBranch(req request.ReqListQuotaDeviasiBranch) ([]entity.ConfinsBranch, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GetQuotaDeviasiBranch")
	}

	var r0 []entity.ConfinsBranch
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasiBranch) ([]entity.ConfinsBranch, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(request.ReqListQuotaDeviasiBranch) []entity.ConfinsBranch); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ConfinsBranch)
		}
	}

	if rf, ok := ret.Get(1).(func(request.ReqListQuotaDeviasiBranch) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReasonPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetReasonPrescreening(ctx context.Context, req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetReasonPrescreening")
	}

	var r0 []entity.ReasonMessage
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReasonPrescreening, interface{}) ([]entity.ReasonMessage, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSearchInquiry provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetSearchInquiry(ctx context.Context, req request.ReqSearchInquiry, pagination interface{}) ([]entity.InquiryDataSearch, int, error) {
	ret := _m.Called(ctx, req, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetSearchInquiry")
	}

	var r0 []entity.InquiryDataSearch
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSearchInquiry, interface{}) ([]entity.InquiryDataSearch, int, error)); ok {
		return rf(ctx, req, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSearchInquiry, interface{}) []entity.InquiryDataSearch); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataSearch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSearchInquiry, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.ReqSearchInquiry, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecalculateOrder provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) RecalculateOrder(ctx context.Context, req request.ReqRecalculateOrder, accessToken string) (response.RecalculateResponse, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for RecalculateOrder")
	}

	var r0 response.RecalculateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqRecalculateOrder, string) (response.RecalculateResponse, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqRecalculateOrder, string) response.RecalculateResponse); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.RecalculateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqRecalculateOrder, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAllQuotaDeviasi provides a mock function with given fields: ctx, req
func (_m *Usecase) ResetAllQuotaDeviasi(ctx context.Context, req request.ReqResetAllQuotaDeviasi) (response.UploadQuotaDeviasiBranchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ResetAllQuotaDeviasi")
	}

	var r0 response.UploadQuotaDeviasiBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqResetAllQuotaDeviasi) (response.UploadQuotaDeviasiBranchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqResetAllQuotaDeviasi) response.UploadQuotaDeviasiBranchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.UploadQuotaDeviasiBranchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqResetAllQuotaDeviasi) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetQuotaDeviasiBranch provides a mock function with given fields: ctx, req
func (_m *Usecase) ResetQuotaDeviasiBranch(ctx context.Context, req request.ReqResetQuotaDeviasiBranch) (response.UpdateQuotaDeviasiBranchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ResetQuotaDeviasiBranch")
	}

	var r0 response.UpdateQuotaDeviasiBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqResetQuotaDeviasiBranch) (response.UpdateQuotaDeviasiBranchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqResetQuotaDeviasiBranch) response.UpdateQuotaDeviasiBranchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.UpdateQuotaDeviasiBranchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqResetQuotaDeviasiBranch) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnOrder provides a mock function with given fields: ctx, req
func (_m *Usecase) ReturnOrder(ctx context.Context, req request.ReqReturnOrder) (response.ReturnResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReturnOrder")
	}

	var r0 response.ReturnResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReturnOrder) (response.ReturnResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReturnOrder) response.ReturnResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ReturnResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReturnOrder) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewPrescreening provides a mock function with given fields: ctx, req
func (_m *Usecase) ReviewPrescreening(ctx context.Context, req request.ReqReviewPrescreening) (response.ReviewPrescreening, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ReviewPrescreening")
	}

	var r0 response.ReviewPrescreening
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReviewPrescreening) (response.ReviewPrescreening, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReviewPrescreening) response.ReviewPrescreening); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ReviewPrescreening)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReviewPrescreening) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAsDraft provides a mock function with given fields: ctx, req
func (_m *Usecase) SaveAsDraft(ctx context.Context, req request.ReqSaveAsDraft) (response.CAResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SaveAsDraft")
	}

	var r0 response.CAResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSaveAsDraft) (response.CAResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSaveAsDraft) response.CAResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CAResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSaveAsDraft) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitApproval provides a mock function with given fields: ctx, req
func (_m *Usecase) SubmitApproval(ctx context.Context, req request.ReqSubmitApproval) (response.ApprovalResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitApproval")
	}

	var r0 response.ApprovalResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitApproval) (response.ApprovalResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitApproval) response.ApprovalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ApprovalResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSubmitApproval) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitDecision provides a mock function with given fields: ctx, req
func (_m *Usecase) SubmitDecision(ctx context.Context, req request.ReqSubmitDecision) (response.CAResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitDecision")
	}

	var r0 response.CAResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitDecision) (response.CAResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitDecision) response.CAResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CAResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSubmitDecision) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitNE provides a mock function with given fields: ctx, req
func (_m *Usecase) SubmitNE(ctx context.Context, req request.MetricsNE) (interface{}, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SubmitNE")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.MetricsNE) (interface{}, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.MetricsNE) interface{}); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.MetricsNE) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMappingCluster provides a mock function with given fields: req, file
func (_m *Usecase) UpdateMappingCluster(req request.ReqUploadMappingCluster, file multipart.File) error {
	ret := _m.Called(req, file)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMappingCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(request.ReqUploadMappingCluster, multipart.File) error); ok {
		r0 = rf(req, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateQuotaDeviasiBranch provides a mock function with given fields: ctx, req
func (_m *Usecase) UpdateQuotaDeviasiBranch(ctx context.Context, req request.ReqUpdateQuotaDeviasi) (response.UpdateQuotaDeviasiBranchResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuotaDeviasiBranch")
	}

	var r0 response.UpdateQuotaDeviasiBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqUpdateQuotaDeviasi) (response.UpdateQuotaDeviasiBranchResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqUpdateQuotaDeviasi) response.UpdateQuotaDeviasiBranchResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.UpdateQuotaDeviasiBranchResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.ReqUpdateQuotaDeviasi) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadQuotaDeviasi provides a mock function with given fields: req, file
func (_m *Usecase) UploadQuotaDeviasi(req request.ReqUploadSettingQuotaDeviasi, file multipart.File) (response.UploadQuotaDeviasiBranchResponse, error) {
	ret := _m.Called(req, file)

	if len(ret) == 0 {
		panic("no return value specified for UploadQuotaDeviasi")
	}

	var r0 response.UploadQuotaDeviasiBranchResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(request.ReqUploadSettingQuotaDeviasi, multipart.File) (response.UploadQuotaDeviasiBranchResponse, error)); ok {
		return rf(req, file)
	}
	if rf, ok := ret.Get(0).(func(request.ReqUploadSettingQuotaDeviasi, multipart.File) response.UploadQuotaDeviasiBranchResponse); ok {
		r0 = rf(req, file)
	} else {
		r0 = ret.Get(0).(response.UploadQuotaDeviasiBranchResponse)
	}

	if rf, ok := ret.Get(1).(func(request.ReqUploadSettingQuotaDeviasi, multipart.File) error); ok {
		r1 = rf(req, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
