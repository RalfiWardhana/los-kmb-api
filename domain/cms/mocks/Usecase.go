// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CancelOrder provides a mock function with given fields: ctx, req
func (_m *Usecase) CancelOrder(ctx context.Context, req request.ReqCancelOrder) (response.CancelResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 response.CancelResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqCancelOrder) response.CancelResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CancelResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqCancelOrder) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateExcelMappingCluster provides a mock function with given fields:
func (_m *Usecase) GenerateExcelMappingCluster() (string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAkkk provides a mock function with given fields: prospectID
func (_m *Usecase) GetAkkk(prospectID string) (entity.Akkk, error) {
	ret := _m.Called(prospectID)

	var r0 entity.Akkk
	if rf, ok := ret.Get(0).(func(string) entity.Akkk); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.Akkk)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalReason provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetApprovalReason(ctx context.Context, req request.ReqApprovalReason, pagination interface{}) ([]entity.ApprovalReason, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.ApprovalReason
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqApprovalReason, interface{}) []entity.ApprovalReason); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ApprovalReason)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqApprovalReason, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqApprovalReason, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCancelReason provides a mock function with given fields: ctx, pagination
func (_m *Usecase) GetCancelReason(ctx context.Context, pagination interface{}) ([]entity.CancelReason, int, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []entity.CancelReason
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) []entity.CancelReason); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CancelReason)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) int); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, interface{}) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryApproval provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryApproval(ctx context.Context, req request.ReqInquiryApproval, pagination interface{}) ([]entity.InquiryDataApproval, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.InquiryDataApproval
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryApproval, interface{}) []entity.InquiryDataApproval); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataApproval)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryApproval, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryApproval, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryCa provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryCa(ctx context.Context, req request.ReqInquiryCa, pagination interface{}) ([]entity.InquiryDataCa, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.InquiryDataCa
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryCa, interface{}) []entity.InquiryDataCa); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataCa)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryCa, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryCa, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryMappingCluster provides a mock function with given fields: req, pagination
func (_m *Usecase) GetInquiryMappingCluster(req request.ReqListMappingCluster, pagination interface{}) ([]entity.InquiryMappingCluster, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquiryMappingCluster
	if rf, ok := ret.Get(0).(func(request.ReqListMappingCluster, interface{}) []entity.InquiryMappingCluster); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryMappingCluster)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqListMappingCluster, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqListMappingCluster, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInquiryPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryPrescreening(ctx context.Context, req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryData, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.InquiryData
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) []entity.InquiryData); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryData)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMappingClusterBranch provides a mock function with given fields:
func (_m *Usecase) GetMappingClusterBranch() ([]entity.ConfinsBranch, error) {
	ret := _m.Called()

	var r0 []entity.ConfinsBranch
	if rf, ok := ret.Get(0).(func() []entity.ConfinsBranch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ConfinsBranch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingClusterChangeLog provides a mock function with given fields: pagination
func (_m *Usecase) GetMappingClusterChangeLog(pagination interface{}) ([]entity.MappingClusterChangeLog, int, error) {
	ret := _m.Called(pagination)

	var r0 []entity.MappingClusterChangeLog
	if rf, ok := ret.Get(0).(func(interface{}) []entity.MappingClusterChangeLog); ok {
		r0 = rf(pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingClusterChangeLog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(interface{}) int); ok {
		r1 = rf(pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(interface{}) error); ok {
		r2 = rf(pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReasonPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetReasonPrescreening(ctx context.Context, req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.ReasonMessage
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSearchInquiry provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetSearchInquiry(ctx context.Context, req request.ReqSearchInquiry, pagination interface{}) ([]entity.InquiryDataSearch, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.InquiryDataSearch
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSearchInquiry, interface{}) []entity.InquiryDataSearch); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryDataSearch)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSearchInquiry, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqSearchInquiry, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecalculateOrder provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) RecalculateOrder(ctx context.Context, req request.ReqRecalculateOrder, accessToken string) (response.RecalculateResponse, error) {
	ret := _m.Called(ctx, req, accessToken)

	var r0 response.RecalculateResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqRecalculateOrder, string) response.RecalculateResponse); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.RecalculateResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqRecalculateOrder, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnOrder provides a mock function with given fields: ctx, req
func (_m *Usecase) ReturnOrder(ctx context.Context, req request.ReqReturnOrder) (response.ReturnResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 response.ReturnResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReturnOrder) response.ReturnResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ReturnResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReturnOrder) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewPrescreening provides a mock function with given fields: ctx, req
func (_m *Usecase) ReviewPrescreening(ctx context.Context, req request.ReqReviewPrescreening) (response.ReviewPrescreening, error) {
	ret := _m.Called(ctx, req)

	var r0 response.ReviewPrescreening
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReviewPrescreening) response.ReviewPrescreening); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ReviewPrescreening)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReviewPrescreening) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAsDraft provides a mock function with given fields: ctx, req
func (_m *Usecase) SaveAsDraft(ctx context.Context, req request.ReqSaveAsDraft) (response.CAResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 response.CAResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSaveAsDraft) response.CAResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CAResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSaveAsDraft) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitApproval provides a mock function with given fields: ctx, req
func (_m *Usecase) SubmitApproval(ctx context.Context, req request.ReqSubmitApproval) (response.ApprovalResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 response.ApprovalResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitApproval) response.ApprovalResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ApprovalResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSubmitApproval) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitDecision provides a mock function with given fields: ctx, req
func (_m *Usecase) SubmitDecision(ctx context.Context, req request.ReqSubmitDecision) (response.CAResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 response.CAResponse
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqSubmitDecision) response.CAResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.CAResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqSubmitDecision) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMappingCluster provides a mock function with given fields: req, file
func (_m *Usecase) UpdateMappingCluster(req request.ReqUploadMappingCluster, file multipart.File) error {
	ret := _m.Called(req, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.ReqUploadMappingCluster, multipart.File) error); ok {
		r0 = rf(req, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
