// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetCustomerPhoto provides a mock function with given fields: prospectID
func (_m *Repository) GetCustomerPhoto(prospectID string) ([]entity.DataPhoto, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.DataPhoto
	if rf, ok := ret.Get(0).(func(string) []entity.DataPhoto); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DataPhoto)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInquiryPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetInquiryPrescreening(req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryPrescreening, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.InquiryPrescreening
	if rf, ok := ret.Get(0).(func(request.ReqInquiryPrescreening, interface{}) []entity.InquiryPrescreening); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryPrescreening)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReasonPrescreening provides a mock function with given fields: req, pagination
func (_m *Repository) GetReasonPrescreening(req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(req, pagination)

	var r0 []entity.ReasonMessage
	if rf, ok := ret.Get(0).(func(request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSpIndustryTypeMaster provides a mock function with given fields:
func (_m *Repository) GetSpIndustryTypeMaster() ([]entity.SpIndustryTypeMaster, error) {
	ret := _m.Called()

	var r0 []entity.SpIndustryTypeMaster
	if rf, ok := ret.Get(0).(func() []entity.SpIndustryTypeMaster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.SpIndustryTypeMaster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatusPrescreening provides a mock function with given fields: prospectID
func (_m *Repository) GetStatusPrescreening(prospectID string) (entity.TrxStatus, error) {
	ret := _m.Called(prospectID)

	var r0 entity.TrxStatus
	if rf, ok := ret.Get(0).(func(string) entity.TrxStatus); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSurveyorData provides a mock function with given fields: prospectID
func (_m *Repository) GetSurveyorData(prospectID string) ([]entity.TrxSurveyor, error) {
	ret := _m.Called(prospectID)

	var r0 []entity.TrxSurveyor
	if rf, ok := ret.Get(0).(func(string) []entity.TrxSurveyor); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxSurveyor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveLogOrchestrator provides a mock function with given fields: header, _a1, response, path, method, prospectID, requestID
func (_m *Repository) SaveLogOrchestrator(header interface{}, _a1 interface{}, response interface{}, path string, method string, prospectID string, requestID string) error {
	ret := _m.Called(header, _a1, response, path, method, prospectID, requestID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, interface{}, string, string, string, string) error); ok {
		r0 = rf(header, _a1, response, path, method, prospectID, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrescreening provides a mock function with given fields: prescreening, detail, status
func (_m *Repository) SavePrescreening(prescreening entity.TrxPrescreening, detail entity.TrxDetail, status entity.TrxStatus) error {
	ret := _m.Called(prescreening, detail, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrescreening, entity.TrxDetail, entity.TrxStatus) error); ok {
		r0 = rf(prescreening, detail, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
