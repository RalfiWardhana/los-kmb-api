// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetInquiryPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetInquiryPrescreening(ctx context.Context, req request.ReqInquiryPrescreening, pagination interface{}) ([]entity.InquiryData, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.InquiryData
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqInquiryPrescreening, interface{}) []entity.InquiryData); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.InquiryData)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqInquiryPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqInquiryPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetReasonPrescreening provides a mock function with given fields: ctx, req, pagination
func (_m *Usecase) GetReasonPrescreening(ctx context.Context, req request.ReqReasonPrescreening, pagination interface{}) ([]entity.ReasonMessage, int, error) {
	ret := _m.Called(ctx, req, pagination)

	var r0 []entity.ReasonMessage
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReasonPrescreening, interface{}) []entity.ReasonMessage); ok {
		r0 = rf(ctx, req, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonMessage)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReasonPrescreening, interface{}) int); ok {
		r1 = rf(ctx, req, pagination)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, request.ReqReasonPrescreening, interface{}) error); ok {
		r2 = rf(ctx, req, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReviewPrescreening provides a mock function with given fields: ctx, req
func (_m *Usecase) ReviewPrescreening(ctx context.Context, req request.ReqReviewPrescreening) (response.ReviewPrescreening, error) {
	ret := _m.Called(ctx, req)

	var r0 response.ReviewPrescreening
	if rf, ok := ret.Get(0).(func(context.Context, request.ReqReviewPrescreening) response.ReviewPrescreening); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.ReviewPrescreening)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, request.ReqReviewPrescreening) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
