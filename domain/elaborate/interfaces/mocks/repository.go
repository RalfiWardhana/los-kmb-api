// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetClusterBranchElaborate provides a mock function with given fields: branch_id, cust_status, bpkb
func (_m *Repository) GetClusterBranchElaborate(branch_id string, cust_status string, bpkb int) (entity.ClusterBranch, error) {
	ret := _m.Called(branch_id, cust_status, bpkb)

	var r0 entity.ClusterBranch
	if rf, ok := ret.Get(0).(func(string, string, int) entity.ClusterBranch); ok {
		r0 = rf(branch_id, cust_status, bpkb)
	} else {
		r0 = ret.Get(0).(entity.ClusterBranch)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(branch_id, cust_status, bpkb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospect_id
func (_m *Repository) GetFilteringResult(prospect_id string) (entity.ApiDupcheckKmbUpdate, error) {
	ret := _m.Called(prospect_id)

	var r0 entity.ApiDupcheckKmbUpdate
	if rf, ok := ret.Get(0).(func(string) entity.ApiDupcheckKmbUpdate); ok {
		r0 = rf(prospect_id)
	} else {
		r0 = ret.Get(0).(entity.ApiDupcheckKmbUpdate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospect_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResultElaborate provides a mock function with given fields: branch_id, cust_status, bpkb, result_pefindo, tenor, age_vehicle, ltv, baki_debet
func (_m *Repository) GetResultElaborate(branch_id string, cust_status string, bpkb int, result_pefindo string, tenor int, age_vehicle string, ltv float64, baki_debet float64) (entity.ResultElaborate, error) {
	ret := _m.Called(branch_id, cust_status, bpkb, result_pefindo, tenor, age_vehicle, ltv, baki_debet)

	var r0 entity.ResultElaborate
	if rf, ok := ret.Get(0).(func(string, string, int, string, int, string, float64, float64) entity.ResultElaborate); ok {
		r0 = rf(branch_id, cust_status, bpkb, result_pefindo, tenor, age_vehicle, ltv, baki_debet)
	} else {
		r0 = ret.Get(0).(entity.ResultElaborate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int, string, int, string, float64, float64) error); ok {
		r1 = rf(branch_id, cust_status, bpkb, result_pefindo, tenor, age_vehicle, ltv, baki_debet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataElaborate provides a mock function with given fields: data
func (_m *Repository) SaveDataElaborate(data entity.ApiElaborateKmb) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ApiElaborateKmb) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDataElaborate provides a mock function with given fields: data
func (_m *Repository) UpdateDataElaborate(data entity.ApiElaborateKmbUpdate) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ApiElaborateKmbUpdate) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
