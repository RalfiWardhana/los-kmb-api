// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// BranchDpData provides a mock function with given fields: query
func (_m *Repository) BranchDpData(query string) (entity.BranchDp, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for BranchDpData")
	}

	var r0 entity.BranchDp
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.BranchDp, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) entity.BranchDp); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(entity.BranchDp)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataGetMappingDp provides a mock function with given fields: branchID, statusKonsumen
func (_m *Repository) DataGetMappingDp(branchID string, statusKonsumen string) ([]entity.RangeBranchDp, error) {
	ret := _m.Called(branchID, statusKonsumen)

	if len(ret) == 0 {
		panic("no return value specified for DataGetMappingDp")
	}

	var r0 []entity.RangeBranchDp
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]entity.RangeBranchDp, error)); ok {
		return rf(branchID, statusKonsumen)
	}
	if rf, ok := ret.Get(0).(func(string, string) []entity.RangeBranchDp); ok {
		r0 = rf(branchID, statusKonsumen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RangeBranchDp)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branchID, statusKonsumen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveData provides a mock function with given fields: data
func (_m *Repository) SaveData(data entity.ApiDupcheckKmb) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ApiDupcheckKmb) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateData provides a mock function with given fields: data
func (_m *Repository) UpdateData(data entity.ApiDupcheckKmbUpdate) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ApiDupcheckKmbUpdate) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
