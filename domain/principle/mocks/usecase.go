// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AgreementChassisNumberIntegrator provides a mock function with given fields: ctx, prospectID, chassisNumber, accessToken
func (_m *Usecase) AgreementChassisNumberIntegrator(ctx context.Context, prospectID string, chassisNumber string, accessToken string) (response.AgreementChassisNumber, error) {
	ret := _m.Called(ctx, prospectID, chassisNumber, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for AgreementChassisNumberIntegrator")
	}

	var r0 response.AgreementChassisNumber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (response.AgreementChassisNumber, error)); ok {
		return rf(ctx, prospectID, chassisNumber, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) response.AgreementChassisNumber); ok {
		r0 = rf(ctx, prospectID, chassisNumber, accessToken)
	} else {
		r0 = ret.Get(0).(response.AgreementChassisNumber)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, chassisNumber, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Asliri provides a mock function with given fields: ctx, r, accessToken
func (_m *Usecase) Asliri(ctx context.Context, r request.PrinciplePemohon, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, r, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Asliri")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, string) (response.Ekyc, error)); ok {
		return rf(ctx, r, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, string) response.Ekyc); ok {
		r0 = rf(ctx, r, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePemohon, string) error); ok {
		r1 = rf(ctx, r, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BannedPMKOrDSR provides a mock function with given fields: idNumber
func (_m *Usecase) BannedPMKOrDSR(idNumber string) (response.UsecaseApi, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for BannedPMKOrDSR")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.UsecaseApi, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlacklistCheck provides a mock function with given fields: index, spDupcheck
func (_m *Usecase) BlacklistCheck(index int, spDupcheck response.SpDupCekCustomerByID) (response.UsecaseApi, string) {
	ret := _m.Called(index, spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for BlacklistCheck")
	}

	var r0 response.UsecaseApi
	var r1 string
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) (response.UsecaseApi, string)); ok {
		return rf(index, spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(int, response.SpDupCekCustomerByID) response.UsecaseApi); ok {
		r0 = rf(index, spDupcheck)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(int, response.SpDupCekCustomerByID) string); ok {
		r1 = rf(index, spDupcheck)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// CheckCmoNoFPD provides a mock function with given fields: prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName
func (_m *Usecase) CheckCmoNoFPD(prospectID string, cmoID string, cmoCategory string, cmoJoinDate string, defaultCluster string, bpkbName string) (string, entity.TrxCmoNoFPD, error) {
	ret := _m.Called(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)

	if len(ret) == 0 {
		panic("no return value specified for CheckCmoNoFPD")
	}

	var r0 string
	var r1 entity.TrxCmoNoFPD
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (string, entity.TrxCmoNoFPD, error)); ok {
		return rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) string); ok {
		r0 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) entity.TrxCmoNoFPD); ok {
		r1 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r1 = ret.Get(1).(entity.TrxCmoNoFPD)
	}

	if rf, ok := ret.Get(2).(func(string, string, string, string, string, string) error); ok {
		r2 = rf(prospectID, cmoID, cmoCategory, cmoJoinDate, defaultCluster, bpkbName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckLatestPaidInstallment provides a mock function with given fields: ctx, prospectID, customerID, accessToken
func (_m *Usecase) CheckLatestPaidInstallment(ctx context.Context, prospectID string, customerID string, accessToken string) (string, int, error) {
	ret := _m.Called(ctx, prospectID, customerID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckLatestPaidInstallment")
	}

	var r0 string
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, int, error)); ok {
		return rf(ctx, prospectID, customerID, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) int); ok {
		r1 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, prospectID, customerID, accessToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckNokaNosin provides a mock function with given fields: ctx, r
func (_m *Usecase) CheckNokaNosin(ctx context.Context, r request.PrincipleAsset) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for CheckNokaNosin")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleAsset) (response.UsecaseApi, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleAsset) response.UsecaseApi); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrincipleAsset) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOrderPendingPrinciple provides a mock function with given fields: ctx
func (_m *Usecase) CheckOrderPendingPrinciple(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrderPendingPrinciple")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckPMK provides a mock function with given fields: branchID, customerKMB, income, homeStatus, professionID, birthDate, tenor, maritalStatus, empYear, empMonth, stayYear, stayMonth
func (_m *Usecase) CheckPMK(branchID string, customerKMB string, income float64, homeStatus string, professionID string, birthDate string, tenor int, maritalStatus string, empYear int, empMonth int, stayYear int, stayMonth int) (response.UsecaseApi, error) {
	ret := _m.Called(branchID, customerKMB, income, homeStatus, professionID, birthDate, tenor, maritalStatus, empYear, empMonth, stayYear, stayMonth)

	if len(ret) == 0 {
		panic("no return value specified for CheckPMK")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, float64, string, string, string, int, string, int, int, int, int) (response.UsecaseApi, error)); ok {
		return rf(branchID, customerKMB, income, homeStatus, professionID, birthDate, tenor, maritalStatus, empYear, empMonth, stayYear, stayMonth)
	}
	if rf, ok := ret.Get(0).(func(string, string, float64, string, string, string, int, string, int, int, int, int) response.UsecaseApi); ok {
		r0 = rf(branchID, customerKMB, income, homeStatus, professionID, birthDate, tenor, maritalStatus, empYear, empMonth, stayYear, stayMonth)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, float64, string, string, string, int, string, int, int, int, int) error); ok {
		r1 = rf(branchID, customerKMB, income, homeStatus, professionID, birthDate, tenor, maritalStatus, empYear, empMonth, stayYear, stayMonth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerKMB provides a mock function with given fields: spDupcheck
func (_m *Usecase) CustomerKMB(spDupcheck response.SpDupCekCustomerByID) (string, error) {
	ret := _m.Called(spDupcheck)

	if len(ret) == 0 {
		panic("no return value specified for CustomerKMB")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(response.SpDupCekCustomerByID) (string, error)); ok {
		return rf(spDupcheck)
	}
	if rf, ok := ret.Get(0).(func(response.SpDupCekCustomerByID) string); ok {
		r0 = rf(spDupcheck)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(response.SpDupCekCustomerByID) error); ok {
		r1 = rf(spDupcheck)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DsrCheck provides a mock function with given fields: ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue
func (_m *Usecase) DsrCheck(ctx context.Context, req request.PrinciplePembiayaan, customerData []request.CustomerData, installmentAmount float64, installmentConfins float64, installmentConfinsSpouse float64, income float64, agreementChasisNumber response.AgreementChassisNumber, accessToken string, configValue response.DupcheckConfig) (response.UsecaseApi, response.Dsr, float64, float64, float64, error) {
	ret := _m.Called(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)

	if len(ret) == 0 {
		panic("no return value specified for DsrCheck")
	}

	var r0 response.UsecaseApi
	var r1 response.Dsr
	var r2 float64
	var r3 float64
	var r4 float64
	var r5 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) (response.UsecaseApi, response.Dsr, float64, float64, float64, error)); ok {
		return rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) response.Dsr); ok {
		r1 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r1 = ret.Get(1).(response.Dsr)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) float64); ok {
		r2 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r2 = ret.Get(2).(float64)
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) float64); ok {
		r3 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r3 = ret.Get(3).(float64)
	}

	if rf, ok := ret.Get(4).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) float64); ok {
		r4 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r4 = ret.Get(4).(float64)
	}

	if rf, ok := ret.Get(5).(func(context.Context, request.PrinciplePembiayaan, []request.CustomerData, float64, float64, float64, float64, response.AgreementChassisNumber, string, response.DupcheckConfig) error); ok {
		r5 = rf(ctx, req, customerData, installmentAmount, installmentConfins, installmentConfinsSpouse, income, agreementChasisNumber, accessToken, configValue)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// Dukcapil provides a mock function with given fields: ctx, r, reqMetricsEkyc, accessToken
func (_m *Usecase) Dukcapil(ctx context.Context, r request.PrinciplePemohon, reqMetricsEkyc request.MetricsEkyc, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, r, reqMetricsEkyc, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Dukcapil")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) (response.Ekyc, error)); ok {
		return rf(ctx, r, reqMetricsEkyc, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) response.Ekyc); ok {
		r0 = rf(ctx, r, reqMetricsEkyc, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) error); ok {
		r1 = rf(ctx, r, reqMetricsEkyc, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DupcheckIntegrator provides a mock function with given fields: ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken
func (_m *Usecase) DupcheckIntegrator(ctx context.Context, prospectID string, idNumber string, legalName string, birthDate string, surgateName string, accessToken string) (response.SpDupCekCustomerByID, error) {
	ret := _m.Called(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for DupcheckIntegrator")
	}

	var r0 response.SpDupCekCustomerByID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (response.SpDupCekCustomerByID, error)); ok {
		return rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) response.SpDupCekCustomerByID); ok {
		r0 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r0 = ret.Get(0).(response.SpDupCekCustomerByID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, idNumber, legalName, birthDate, surgateName, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataPrinciple provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) GetDataPrinciple(ctx context.Context, req request.PrincipleGetData, accessToken string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for GetDataPrinciple")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleGetData, string) (map[string]interface{}, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleGetData, string) map[string]interface{}); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrincipleGetData, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmployeeData provides a mock function with given fields: ctx, employeeID
func (_m *Usecase) GetEmployeeData(ctx context.Context, employeeID string) (response.EmployeeCMOResponse, error) {
	ret := _m.Called(ctx, employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetEmployeeData")
	}

	var r0 response.EmployeeCMOResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (response.EmployeeCMOResponse, error)); ok {
		return rf(ctx, employeeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) response.EmployeeCMOResponse); ok {
		r0 = rf(ctx, employeeID)
	} else {
		r0 = ret.Get(0).(response.EmployeeCMOResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFpdCMO provides a mock function with given fields: ctx, CmoID, BPKBNameType
func (_m *Usecase) GetFpdCMO(ctx context.Context, CmoID string, BPKBNameType string) (response.FpdCMOResponse, error) {
	ret := _m.Called(ctx, CmoID, BPKBNameType)

	if len(ret) == 0 {
		panic("no return value specified for GetFpdCMO")
	}

	var r0 response.FpdCMOResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.FpdCMOResponse, error)); ok {
		return rf(ctx, CmoID, BPKBNameType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.FpdCMOResponse); ok {
		r0 = rf(ctx, CmoID, BPKBNameType)
	} else {
		r0 = ret.Get(0).(response.FpdCMOResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, CmoID, BPKBNameType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ktp provides a mock function with given fields: ctx, r, reqMetricsEkyc, accessToken
func (_m *Usecase) Ktp(ctx context.Context, r request.PrinciplePemohon, reqMetricsEkyc request.MetricsEkyc, accessToken string) (response.Ekyc, error) {
	ret := _m.Called(ctx, r, reqMetricsEkyc, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Ktp")
	}

	var r0 response.Ekyc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) (response.Ekyc, error)); ok {
		return rf(ctx, r, reqMetricsEkyc, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) response.Ekyc); ok {
		r0 = rf(ctx, r, reqMetricsEkyc, accessToken)
	} else {
		r0 = ret.Get(0).(response.Ekyc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePemohon, request.MetricsEkyc, string) error); ok {
		r1 = rf(ctx, r, reqMetricsEkyc, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MDMGetMasterMappingBranchEmployee provides a mock function with given fields: ctx, prospectID, branchID, accessToken
func (_m *Usecase) MDMGetMasterMappingBranchEmployee(ctx context.Context, prospectID string, branchID string, accessToken string) (response.MDMMasterMappingBranchEmployeeResponse, error) {
	ret := _m.Called(ctx, prospectID, branchID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for MDMGetMasterMappingBranchEmployee")
	}

	var r0 response.MDMMasterMappingBranchEmployeeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (response.MDMMasterMappingBranchEmployeeResponse, error)); ok {
		return rf(ctx, prospectID, branchID, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) response.MDMMasterMappingBranchEmployeeResponse); ok {
		r0 = rf(ctx, prospectID, branchID, accessToken)
	} else {
		r0 = ret.Get(0).(response.MDMMasterMappingBranchEmployeeResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, prospectID, branchID, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pefindo provides a mock function with given fields: ctx, r, customerStatus, clusterCMO, bpkbName
func (_m *Usecase) Pefindo(ctx context.Context, r request.Pefindo, customerStatus string, clusterCMO string, bpkbName string) (response.Filtering, response.PefindoResult, []entity.TrxDetailBiro, error) {
	ret := _m.Called(ctx, r, customerStatus, clusterCMO, bpkbName)

	if len(ret) == 0 {
		panic("no return value specified for Pefindo")
	}

	var r0 response.Filtering
	var r1 response.PefindoResult
	var r2 []entity.TrxDetailBiro
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Pefindo, string, string, string) (response.Filtering, response.PefindoResult, []entity.TrxDetailBiro, error)); ok {
		return rf(ctx, r, customerStatus, clusterCMO, bpkbName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Pefindo, string, string, string) response.Filtering); ok {
		r0 = rf(ctx, r, customerStatus, clusterCMO, bpkbName)
	} else {
		r0 = ret.Get(0).(response.Filtering)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Pefindo, string, string, string) response.PefindoResult); ok {
		r1 = rf(ctx, r, customerStatus, clusterCMO, bpkbName)
	} else {
		r1 = ret.Get(1).(response.PefindoResult)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.Pefindo, string, string, string) []entity.TrxDetailBiro); ok {
		r2 = rf(ctx, r, customerStatus, clusterCMO, bpkbName)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]entity.TrxDetailBiro)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.Pefindo, string, string, string) error); ok {
		r3 = rf(ctx, r, customerStatus, clusterCMO, bpkbName)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// PrincipleCoreCustomer provides a mock function with given fields: ctx, prospectID, accessToken
func (_m *Usecase) PrincipleCoreCustomer(ctx context.Context, prospectID string, accessToken string) error {
	ret := _m.Called(ctx, prospectID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for PrincipleCoreCustomer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, prospectID, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrincipleElaborateLTV provides a mock function with given fields: ctx, r, accessToken
func (_m *Usecase) PrincipleElaborateLTV(ctx context.Context, r request.PrincipleElaborateLTV, accessToken string) (response.PrincipleElaborateLTV, error) {
	ret := _m.Called(ctx, r, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for PrincipleElaborateLTV")
	}

	var r0 response.PrincipleElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleElaborateLTV, string) (response.PrincipleElaborateLTV, error)); ok {
		return rf(ctx, r, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleElaborateLTV, string) response.PrincipleElaborateLTV); ok {
		r0 = rf(ctx, r, accessToken)
	} else {
		r0 = ret.Get(0).(response.PrincipleElaborateLTV)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrincipleElaborateLTV, string) error); ok {
		r1 = rf(ctx, r, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrincipleEmergencyContact provides a mock function with given fields: ctx, req, accessToken
func (_m *Usecase) PrincipleEmergencyContact(ctx context.Context, req request.PrincipleEmergencyContact, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for PrincipleEmergencyContact")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleEmergencyContact, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrincipleEmergencyContact, string) response.UsecaseApi); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrincipleEmergencyContact, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrincipleMarketingProgram provides a mock function with given fields: ctx, prospectID, accessToken
func (_m *Usecase) PrincipleMarketingProgram(ctx context.Context, prospectID string, accessToken string) error {
	ret := _m.Called(ctx, prospectID, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for PrincipleMarketingProgram")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, prospectID, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrincipleStep provides a mock function with given fields: idNumber
func (_m *Usecase) PrincipleStep(idNumber string) (response.StepPrinciple, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for PrincipleStep")
	}

	var r0 response.StepPrinciple
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.StepPrinciple, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) response.StepPrinciple); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(response.StepPrinciple)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectTenor36 provides a mock function with given fields: cluster
func (_m *Usecase) RejectTenor36(cluster string) (response.UsecaseApi, error) {
	ret := _m.Called(cluster)

	if len(ret) == 0 {
		panic("no return value specified for RejectTenor36")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (response.UsecaseApi, error)); ok {
		return rf(cluster)
	}
	if rf, ok := ret.Get(0).(func(string) response.UsecaseApi); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rejection provides a mock function with given fields: prospectID, encrypted, configValue
func (_m *Usecase) Rejection(prospectID string, encrypted string, configValue response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(prospectID, encrypted, configValue)

	if len(ret) == 0 {
		panic("no return value specified for Rejection")
	}

	var r0 response.UsecaseApi
	var r1 entity.TrxBannedPMKDSR
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, response.DupcheckConfig) (response.UsecaseApi, entity.TrxBannedPMKDSR, error)); ok {
		return rf(prospectID, encrypted, configValue)
	}
	if rf, ok := ret.Get(0).(func(string, string, response.DupcheckConfig) response.UsecaseApi); ok {
		r0 = rf(prospectID, encrypted, configValue)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, response.DupcheckConfig) entity.TrxBannedPMKDSR); ok {
		r1 = rf(prospectID, encrypted, configValue)
	} else {
		r1 = ret.Get(1).(entity.TrxBannedPMKDSR)
	}

	if rf, ok := ret.Get(2).(func(string, string, response.DupcheckConfig) error); ok {
		r2 = rf(prospectID, encrypted, configValue)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: transaction, trxDetailBiro, transactionCMOnoFPD
func (_m *Usecase) Save(transaction entity.FilteringKMB, trxDetailBiro []entity.TrxDetailBiro, transactionCMOnoFPD entity.TrxCmoNoFPD) error {
	ret := _m.Called(transaction, trxDetailBiro, transactionCMOnoFPD)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.FilteringKMB, []entity.TrxDetailBiro, entity.TrxCmoNoFPD) error); ok {
		r0 = rf(transaction, trxDetailBiro, transactionCMOnoFPD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scorepro provides a mock function with given fields: ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken
func (_m *Usecase) Scorepro(ctx context.Context, req request.PrinciplePembiayaan, principleStepOne entity.TrxPrincipleStepOne, principleStepTwo entity.TrxPrincipleStepTwo, pefindoScore string, customerStatus string, customerSegment string, installmentTopUp float64, spDupcheck response.SpDupCekCustomerByID, filtering entity.FilteringKMB, accessToken string) (response.IntegratorScorePro, response.ScorePro, response.PefindoIDX, error) {
	ret := _m.Called(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Scorepro")
	}

	var r0 response.IntegratorScorePro
	var r1 response.ScorePro
	var r2 response.PefindoIDX
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, entity.TrxPrincipleStepOne, entity.TrxPrincipleStepTwo, string, string, string, float64, response.SpDupCekCustomerByID, entity.FilteringKMB, string) (response.IntegratorScorePro, response.ScorePro, response.PefindoIDX, error)); ok {
		return rf(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, entity.TrxPrincipleStepOne, entity.TrxPrincipleStepTwo, string, string, string, float64, response.SpDupCekCustomerByID, entity.FilteringKMB, string) response.IntegratorScorePro); ok {
		r0 = rf(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)
	} else {
		r0 = ret.Get(0).(response.IntegratorScorePro)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePembiayaan, entity.TrxPrincipleStepOne, entity.TrxPrincipleStepTwo, string, string, string, float64, response.SpDupCekCustomerByID, entity.FilteringKMB, string) response.ScorePro); ok {
		r1 = rf(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)
	} else {
		r1 = ret.Get(1).(response.ScorePro)
	}

	if rf, ok := ret.Get(2).(func(context.Context, request.PrinciplePembiayaan, entity.TrxPrincipleStepOne, entity.TrxPrincipleStepTwo, string, string, string, float64, response.SpDupCekCustomerByID, entity.FilteringKMB, string) response.PefindoIDX); ok {
		r2 = rf(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)
	} else {
		r2 = ret.Get(2).(response.PefindoIDX)
	}

	if rf, ok := ret.Get(3).(func(context.Context, request.PrinciplePembiayaan, entity.TrxPrincipleStepOne, entity.TrxPrincipleStepTwo, string, string, string, float64, response.SpDupCekCustomerByID, entity.FilteringKMB, string) error); ok {
		r3 = rf(ctx, req, principleStepOne, principleStepTwo, pefindoScore, customerStatus, customerSegment, installmentTopUp, spDupcheck, filtering, accessToken)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// TotalDsrFmfPbk provides a mock function with given fields: ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering
func (_m *Usecase) TotalDsrFmfPbk(ctx context.Context, totalIncome float64, newInstallment float64, totalInstallmentPBK float64, prospectID string, customerSegment string, accessToken string, SpDupcheckMap response.SpDupcheckMap, configValue response.DupcheckConfig, filtering entity.FilteringKMB) (response.UsecaseApi, response.TrxFMF, error) {
	ret := _m.Called(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering)

	if len(ret) == 0 {
		panic("no return value specified for TotalDsrFmfPbk")
	}

	var r0 response.UsecaseApi
	var r1 response.TrxFMF
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB) (response.UsecaseApi, response.TrxFMF, error)); ok {
		return rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB) response.UsecaseApi); ok {
		r0 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB) response.TrxFMF); ok {
		r1 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering)
	} else {
		r1 = ret.Get(1).(response.TrxFMF)
	}

	if rf, ok := ret.Get(2).(func(context.Context, float64, float64, float64, string, string, string, response.SpDupcheckMap, response.DupcheckConfig, entity.FilteringKMB) error); ok {
		r2 = rf(ctx, totalIncome, newInstallment, totalInstallmentPBK, prospectID, customerSegment, accessToken, SpDupcheckMap, configValue, filtering)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VehicleCheck provides a mock function with given fields: manufactureYear, cmoCluster, bkpbName, tenor, configValue, filtering, af
func (_m *Usecase) VehicleCheck(manufactureYear string, cmoCluster string, bkpbName string, tenor int, configValue response.DupcheckConfig, filtering entity.FilteringKMB, af float64) (response.UsecaseApi, error) {
	ret := _m.Called(manufactureYear, cmoCluster, bkpbName, tenor, configValue, filtering, af)

	if len(ret) == 0 {
		panic("no return value specified for VehicleCheck")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) (response.UsecaseApi, error)); ok {
		return rf(manufactureYear, cmoCluster, bkpbName, tenor, configValue, filtering, af)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) response.UsecaseApi); ok {
		r0 = rf(manufactureYear, cmoCluster, bkpbName, tenor, configValue, filtering, af)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, int, response.DupcheckConfig, entity.FilteringKMB, float64) error); ok {
		r1 = rf(manufactureYear, cmoCluster, bkpbName, tenor, configValue, filtering, af)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
