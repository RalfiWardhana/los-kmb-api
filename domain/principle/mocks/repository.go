// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	entity "los-kmb-api/models/entity"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckCMONoFPD provides a mock function with given fields: cmoID, bpkbName
func (_m *Repository) CheckCMONoFPD(cmoID string, bpkbName string) (entity.TrxCmoNoFPD, error) {
	ret := _m.Called(cmoID, bpkbName)

	if len(ret) == 0 {
		panic("no return value specified for CheckCMONoFPD")
	}

	var r0 entity.TrxCmoNoFPD
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.TrxCmoNoFPD, error)); ok {
		return rf(cmoID, bpkbName)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.TrxCmoNoFPD); ok {
		r0 = rf(cmoID, bpkbName)
	} else {
		r0 = ret.Get(0).(entity.TrxCmoNoFPD)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(cmoID, bpkbName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveLoanTypeLast24M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast24M(customerID string) (entity.GetActiveLoanTypeLast24M, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLoanTypeLast24M")
	}

	var r0 entity.GetActiveLoanTypeLast24M
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetActiveLoanTypeLast24M, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast24M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast24M)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveLoanTypeLast6M provides a mock function with given fields: customerID
func (_m *Repository) GetActiveLoanTypeLast6M(customerID string) (entity.GetActiveLoanTypeLast6M, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveLoanTypeLast6M")
	}

	var r0 entity.GetActiveLoanTypeLast6M
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetActiveLoanTypeLast6M, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetActiveLoanTypeLast6M); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetActiveLoanTypeLast6M)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannedPMKDSR provides a mock function with given fields: idNumber
func (_m *Repository) GetBannedPMKDSR(idNumber string) (entity.TrxBannedPMKDSR, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetBannedPMKDSR")
	}

	var r0 entity.TrxBannedPMKDSR
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxBannedPMKDSR, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxBannedPMKDSR); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxBannedPMKDSR)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: groupName, lob, key
func (_m *Repository) GetConfig(groupName string, lob string, key string) (entity.AppConfig, error) {
	ret := _m.Called(groupName, lob, key)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 entity.AppConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (entity.AppConfig, error)); ok {
		return rf(groupName, lob, key)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) entity.AppConfig); ok {
		r0 = rf(groupName, lob, key)
	} else {
		r0 = ret.Get(0).(entity.AppConfig)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(groupName, lob, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDraftPrinciple provides a mock function with given fields: prospectID
func (_m *Repository) GetDraftPrinciple(prospectID string) (entity.DraftPrinciple, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetDraftPrinciple")
	}

	var r0 entity.DraftPrinciple
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.DraftPrinciple, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.DraftPrinciple); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.DraftPrinciple)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetElaborateLtv provides a mock function with given fields: prospectID
func (_m *Repository) GetElaborateLtv(prospectID string) (entity.MappingElaborateLTV, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetElaborateLtv")
	}

	var r0 entity.MappingElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.MappingElaborateLTV, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.MappingElaborateLTV); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.MappingElaborateLTV)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEncB64 provides a mock function with given fields: myString
func (_m *Repository) GetEncB64(myString string) (entity.EncryptedString, error) {
	ret := _m.Called(myString)

	if len(ret) == 0 {
		panic("no return value specified for GetEncB64")
	}

	var r0 entity.EncryptedString
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.EncryptedString, error)); ok {
		return rf(myString)
	}
	if rf, ok := ret.Get(0).(func(string) entity.EncryptedString); ok {
		r0 = rf(myString)
	} else {
		r0 = ret.Get(0).(entity.EncryptedString)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(myString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilteringResult provides a mock function with given fields: prospectID
func (_m *Repository) GetFilteringResult(prospectID string) (entity.FilteringKMB, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilteringResult")
	}

	var r0 entity.FilteringKMB
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.FilteringKMB, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.FilteringKMB); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.FilteringKMB)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDukcapil provides a mock function with given fields: statusVD, statusFR, customerStatus, customerSegment
func (_m *Repository) GetMappingDukcapil(statusVD string, statusFR string, customerStatus string, customerSegment string) (entity.MappingResultDukcapil, error) {
	ret := _m.Called(statusVD, statusFR, customerStatus, customerSegment)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingDukcapil")
	}

	var r0 entity.MappingResultDukcapil
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) (entity.MappingResultDukcapil, error)); ok {
		return rf(statusVD, statusFR, customerStatus, customerSegment)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) entity.MappingResultDukcapil); ok {
		r0 = rf(statusVD, statusFR, customerStatus, customerSegment)
	} else {
		r0 = ret.Get(0).(entity.MappingResultDukcapil)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(statusVD, statusFR, customerStatus, customerSegment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingDukcapilVD provides a mock function with given fields: statusVD, customerStatus, customerSegment, isValid
func (_m *Repository) GetMappingDukcapilVD(statusVD string, customerStatus string, customerSegment string, isValid bool) (entity.MappingResultDukcapilVD, error) {
	ret := _m.Called(statusVD, customerStatus, customerSegment, isValid)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingDukcapilVD")
	}

	var r0 entity.MappingResultDukcapilVD
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) (entity.MappingResultDukcapilVD, error)); ok {
		return rf(statusVD, customerStatus, customerSegment, isValid)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, bool) entity.MappingResultDukcapilVD); ok {
		r0 = rf(statusVD, customerStatus, customerSegment, isValid)
	} else {
		r0 = ret.Get(0).(entity.MappingResultDukcapilVD)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, bool) error); ok {
		r1 = rf(statusVD, customerStatus, customerSegment, isValid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingElaborateLTV provides a mock function with given fields: resultPefindo, cluster
func (_m *Repository) GetMappingElaborateLTV(resultPefindo string, cluster string) ([]entity.MappingElaborateLTV, error) {
	ret := _m.Called(resultPefindo, cluster)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingElaborateLTV")
	}

	var r0 []entity.MappingElaborateLTV
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]entity.MappingElaborateLTV, error)); ok {
		return rf(resultPefindo, cluster)
	}
	if rf, ok := ret.Get(0).(func(string, string) []entity.MappingElaborateLTV); ok {
		r0 = rf(resultPefindo, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.MappingElaborateLTV)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resultPefindo, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMappingVehicleAge provides a mock function with given fields: vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af
func (_m *Repository) GetMappingVehicleAge(vehicleAge int, cluster string, bpkbNameType int, tenor int, resultPefindo string, af float64) (entity.MappingVehicleAge, error) {
	ret := _m.Called(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)

	if len(ret) == 0 {
		panic("no return value specified for GetMappingVehicleAge")
	}

	var r0 entity.MappingVehicleAge
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string, int, int, string, float64) (entity.MappingVehicleAge, error)); ok {
		return rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	}
	if rf, ok := ret.Get(0).(func(int, string, int, int, string, float64) entity.MappingVehicleAge); ok {
		r0 = rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	} else {
		r0 = ret.Get(0).(entity.MappingVehicleAge)
	}

	if rf, ok := ret.Get(1).(func(int, string, int, int, string, float64) error); ok {
		r1 = rf(vehicleAge, cluster, bpkbNameType, tenor, resultPefindo, af)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinimalIncomePMK provides a mock function with given fields: branchID, statusKonsumen
func (_m *Repository) GetMinimalIncomePMK(branchID string, statusKonsumen string) (entity.MappingIncomePMK, error) {
	ret := _m.Called(branchID, statusKonsumen)

	if len(ret) == 0 {
		panic("no return value specified for GetMinimalIncomePMK")
	}

	var r0 entity.MappingIncomePMK
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.MappingIncomePMK, error)); ok {
		return rf(branchID, statusKonsumen)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.MappingIncomePMK); ok {
		r0 = rf(branchID, statusKonsumen)
	} else {
		r0 = ret.Get(0).(entity.MappingIncomePMK)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(branchID, statusKonsumen)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMoblast provides a mock function with given fields: customerID
func (_m *Repository) GetMoblast(customerID string) (entity.GetMoblast, error) {
	ret := _m.Called(customerID)

	if len(ret) == 0 {
		panic("no return value specified for GetMoblast")
	}

	var r0 entity.GetMoblast
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.GetMoblast, error)); ok {
		return rf(customerID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.GetMoblast); ok {
		r0 = rf(customerID)
	} else {
		r0 = ret.Get(0).(entity.GetMoblast)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleEmergencyContact provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleEmergencyContact(prospectID string) (entity.TrxPrincipleEmergencyContact, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleEmergencyContact")
	}

	var r0 entity.TrxPrincipleEmergencyContact
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleEmergencyContact, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleEmergencyContact); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleEmergencyContact)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleMarketingProgram provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleMarketingProgram(prospectID string) (entity.TrxPrincipleMarketingProgram, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleMarketingProgram")
	}

	var r0 entity.TrxPrincipleMarketingProgram
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleMarketingProgram, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleMarketingProgram); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleMarketingProgram)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepOne provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepOne(prospectID string) (entity.TrxPrincipleStepOne, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepOne")
	}

	var r0 entity.TrxPrincipleStepOne
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepOne, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepOne); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepOne)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepThree provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepThree(prospectID string) (entity.TrxPrincipleStepThree, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepThree")
	}

	var r0 entity.TrxPrincipleStepThree
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepThree, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepThree); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepThree)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrincipleStepTwo provides a mock function with given fields: prospectID
func (_m *Repository) GetPrincipleStepTwo(prospectID string) (entity.TrxPrincipleStepTwo, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetPrincipleStepTwo")
	}

	var r0 entity.TrxPrincipleStepTwo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStepTwo, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStepTwo); ok {
		r0 = rf(prospectID)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStepTwo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRejection provides a mock function with given fields: idNumber
func (_m *Repository) GetRejection(idNumber string) (entity.TrxReject, error) {
	ret := _m.Called(idNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetRejection")
	}

	var r0 entity.TrxReject
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxReject, error)); ok {
		return rf(idNumber)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxReject); ok {
		r0 = rf(idNumber)
	} else {
		r0 = ret.Get(0).(entity.TrxReject)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGenerator provides a mock function with given fields: zipCode
func (_m *Repository) GetScoreGenerator(zipCode string) (entity.ScoreGenerator, error) {
	ret := _m.Called(zipCode)

	if len(ret) == 0 {
		panic("no return value specified for GetScoreGenerator")
	}

	var r0 entity.ScoreGenerator
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.ScoreGenerator, error)); ok {
		return rf(zipCode)
	}
	if rf, ok := ret.Get(0).(func(string) entity.ScoreGenerator); ok {
		r0 = rf(zipCode)
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(zipCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScoreGeneratorROAO provides a mock function with given fields:
func (_m *Repository) GetScoreGeneratorROAO() (entity.ScoreGenerator, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScoreGeneratorROAO")
	}

	var r0 entity.ScoreGenerator
	var r1 error
	if rf, ok := ret.Get(0).(func() (entity.ScoreGenerator, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() entity.ScoreGenerator); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(entity.ScoreGenerator)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxDetailBIro provides a mock function with given fields: prospectID
func (_m *Repository) GetTrxDetailBIro(prospectID string) ([]entity.TrxDetailBiro, error) {
	ret := _m.Called(prospectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxDetailBIro")
	}

	var r0 []entity.TrxDetailBiro
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.TrxDetailBiro, error)); ok {
		return rf(prospectID)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.TrxDetailBiro); ok {
		r0 = rf(prospectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TrxDetailBiro)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prospectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrxPrincipleStatus provides a mock function with given fields: nik
func (_m *Repository) GetTrxPrincipleStatus(nik string) (entity.TrxPrincipleStatus, error) {
	ret := _m.Called(nik)

	if len(ret) == 0 {
		panic("no return value specified for GetTrxPrincipleStatus")
	}

	var r0 entity.TrxPrincipleStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.TrxPrincipleStatus, error)); ok {
		return rf(nik)
	}
	if rf, ok := ret.Get(0).(func(string) entity.TrxPrincipleStatus); ok {
		r0 = rf(nik)
	} else {
		r0 = ret.Get(0).(entity.TrxPrincipleStatus)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(nik)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingCluster provides a mock function with given fields: req
func (_m *Repository) MasterMappingCluster(req entity.MasterMappingCluster) (entity.MasterMappingCluster, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingCluster")
	}

	var r0 entity.MasterMappingCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) (entity.MasterMappingCluster, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(entity.MasterMappingCluster) entity.MasterMappingCluster); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingCluster)
	}

	if rf, ok := ret.Get(1).(func(entity.MasterMappingCluster) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MasterMappingFpdCluster provides a mock function with given fields: FpdValue
func (_m *Repository) MasterMappingFpdCluster(FpdValue float64) (entity.MasterMappingFpdCluster, error) {
	ret := _m.Called(FpdValue)

	if len(ret) == 0 {
		panic("no return value specified for MasterMappingFpdCluster")
	}

	var r0 entity.MasterMappingFpdCluster
	var r1 error
	if rf, ok := ret.Get(0).(func(float64) (entity.MasterMappingFpdCluster, error)); ok {
		return rf(FpdValue)
	}
	if rf, ok := ret.Get(0).(func(float64) entity.MasterMappingFpdCluster); ok {
		r0 = rf(FpdValue)
	} else {
		r0 = ret.Get(0).(entity.MasterMappingFpdCluster)
	}

	if rf, ok := ret.Get(1).(func(float64) error); ok {
		r1 = rf(FpdValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFiltering provides a mock function with given fields: data, trxDetailBiro, dataCMOnoFPD
func (_m *Repository) SaveFiltering(data entity.FilteringKMB, trxDetailBiro []entity.TrxDetailBiro, dataCMOnoFPD entity.TrxCmoNoFPD) error {
	ret := _m.Called(data, trxDetailBiro, dataCMOnoFPD)

	if len(ret) == 0 {
		panic("no return value specified for SaveFiltering")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.FilteringKMB, []entity.TrxDetailBiro, entity.TrxCmoNoFPD) error); ok {
		r0 = rf(data, trxDetailBiro, dataCMOnoFPD)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrincipleEmergencyContact provides a mock function with given fields: data, idNumber
func (_m *Repository) SavePrincipleEmergencyContact(data entity.TrxPrincipleEmergencyContact, idNumber string) error {
	ret := _m.Called(data, idNumber)

	if len(ret) == 0 {
		panic("no return value specified for SavePrincipleEmergencyContact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrincipleEmergencyContact, string) error); ok {
		r0 = rf(data, idNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrincipleMarketingProgram provides a mock function with given fields: data
func (_m *Repository) SavePrincipleMarketingProgram(data entity.TrxPrincipleMarketingProgram) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SavePrincipleMarketingProgram")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrincipleMarketingProgram) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrincipleStepOne provides a mock function with given fields: data
func (_m *Repository) SavePrincipleStepOne(data entity.TrxPrincipleStepOne) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SavePrincipleStepOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrincipleStepOne) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrincipleStepThree provides a mock function with given fields: data
func (_m *Repository) SavePrincipleStepThree(data entity.TrxPrincipleStepThree) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SavePrincipleStepThree")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrincipleStepThree) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePrincipleStepTwo provides a mock function with given fields: data
func (_m *Repository) SavePrincipleStepTwo(data entity.TrxPrincipleStepTwo) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SavePrincipleStepTwo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxPrincipleStepTwo) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveToWorker provides a mock function with given fields: data
func (_m *Repository) SaveToWorker(data []entity.TrxWorker) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveToWorker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entity.TrxWorker) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTrxElaborateLTV provides a mock function with given fields: data
func (_m *Repository) SaveTrxElaborateLTV(data entity.TrxElaborateLTV) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SaveTrxElaborateLTV")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.TrxElaborateLTV) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePrincipleStepOne provides a mock function with given fields: prospectID, data
func (_m *Repository) UpdatePrincipleStepOne(prospectID string, data entity.TrxPrincipleStepOne) error {
	ret := _m.Called(prospectID, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrincipleStepOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.TrxPrincipleStepOne) error); ok {
		r0 = rf(prospectID, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
