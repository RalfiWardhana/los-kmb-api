// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// Metrics is an autogenerated mock type for the Metrics type
type Metrics struct {
	mock.Mock
}

// Submission2Wilen provides a mock function with given fields: ctx, req, accessToken
func (_m *Metrics) Submission2Wilen(ctx context.Context, req request.Submission2Wilen, accessToken string) (response.Submission2Wilen, error) {
	ret := _m.Called(ctx, req, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Submission2Wilen")
	}

	var r0 response.Submission2Wilen
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Submission2Wilen, string) (response.Submission2Wilen, error)); ok {
		return rf(ctx, req, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Submission2Wilen, string) response.Submission2Wilen); ok {
		r0 = rf(ctx, req, accessToken)
	} else {
		r0 = ret.Get(0).(response.Submission2Wilen)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Submission2Wilen, string) error); ok {
		r1 = rf(ctx, req, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetrics creates a new instance of Metrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetrics(t interface {
	mock.TestingT
	Cleanup(func())
}) *Metrics {
	mock := &Metrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
