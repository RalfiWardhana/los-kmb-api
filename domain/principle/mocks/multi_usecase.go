// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "los-kmb-api/models/request"

	response "los-kmb-api/models/response"
)

// MultiUsecase is an autogenerated mock type for the MultiUsecase type
type MultiUsecase struct {
	mock.Mock
}

// PrinciplePembiayaan provides a mock function with given fields: ctx, r, accessToken
func (_m *MultiUsecase) PrinciplePembiayaan(ctx context.Context, r request.PrinciplePembiayaan, accessToken string) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, r, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for PrinciplePembiayaan")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, string) (response.UsecaseApi, error)); ok {
		return rf(ctx, r, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePembiayaan, string) response.UsecaseApi); ok {
		r0 = rf(ctx, r, accessToken)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePembiayaan, string) error); ok {
		r1 = rf(ctx, r, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrinciplePemohon provides a mock function with given fields: ctx, r
func (_m *MultiUsecase) PrinciplePemohon(ctx context.Context, r request.PrinciplePemohon) (response.UsecaseApi, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for PrinciplePemohon")
	}

	var r0 response.UsecaseApi
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon) (response.UsecaseApi, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PrinciplePemohon) response.UsecaseApi); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Get(0).(response.UsecaseApi)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PrinciplePemohon) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMultiUsecase creates a new instance of MultiUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMultiUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MultiUsecase {
	mock := &MultiUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
