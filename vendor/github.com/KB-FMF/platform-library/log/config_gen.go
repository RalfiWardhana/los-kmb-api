// Code generated by "strobfus" v0.0.2; DO NOT EDIT.
// source: https://github.com/znly/strobfus

package log

import (
	"crypto/aes"
	"crypto/cipher"
	"github.com/KB-FMF/platform-library/maskingdata"
)

var (
	developmentAuthBaseUrl      = ""
	developmentSecretKey        = ""
	developmentBootstrapServers = ""
	developmentSecurityProtocol = ""
	developmentSaslMechanisms   = ""
	developmentUsername         = ""
	developmentPassword         = ""
	developmentTopics           = []string{}

	stagingAuthBaseUrl      = ""
	stagingSecretKey        = ""
	stagingBootstrapServers = ""
	stagingSecurityProtocol = ""
	stagingSaslMechanisms   = ""
	stagingUsername         = ""
	stagingPassword         = ""
	stagingTopics           = []string{}

	productionAuthBaseUrl      = ""
	productionSecretKey        = ""
	productionBootstrapServers = ""
	productionSecurityProtocol = ""
	productionSaslMechanisms   = ""
	productionUsername         = ""
	productionPassword         = ""
	productionTopics           = []string{}
)

type Config struct {
	authUrl            string
	bootstrapServers   string
	securityProtocol   string
	saslMechanisms     string
	username           string
	password           string
	deliveryReports    bool
	eventsChannelSize  int
	produceChannelSize int
	topics             []string
	applicationName    string
}

func newDevelopmentConfig() Config {
	cipher := maskingdata.NewCipher(developmentSecretKey)
	user, err := cipher.DecryptText(developmentUsername)
	if err != nil {
		panic(err)
	}
	pass, err := cipher.DecryptText(developmentPassword)
	if err != nil {
		panic(err)
	}

	return Config{
		authUrl:            developmentAuthBaseUrl,
		bootstrapServers:   developmentBootstrapServers,
		securityProtocol:   developmentSecurityProtocol,
		saslMechanisms:     developmentSaslMechanisms,
		username:           user,
		password:           pass,
		deliveryReports:    false,
		eventsChannelSize:  0,
		produceChannelSize: 10,
		topics:             developmentTopics,
		applicationName:    "platform-log-api",
	}
}

func newStagingConfig() Config {
	cipher := maskingdata.NewCipher(stagingSecretKey)
	user, err := cipher.DecryptText(stagingUsername)
	if err != nil {
		panic(err)
	}
	pass, err := cipher.DecryptText(stagingPassword)
	if err != nil {
		panic(err)
	}

	return Config{
		authUrl:            stagingAuthBaseUrl,
		bootstrapServers:   stagingBootstrapServers,
		securityProtocol:   stagingSecurityProtocol,
		saslMechanisms:     stagingSaslMechanisms,
		username:           user,
		password:           pass,
		deliveryReports:    false,
		eventsChannelSize:  0,
		produceChannelSize: 10,
		topics:             stagingTopics,
		applicationName:    "platform-log-api",
	}
}

func newProductionConfig() Config {
	cipher := maskingdata.NewCipher(productionSecretKey)
	user, err := cipher.DecryptText(productionUsername)
	if err != nil {
		panic(err)
	}
	pass, err := cipher.DecryptText(productionPassword)
	if err != nil {
		panic(err)
	}

	return Config{
		authUrl:            productionAuthBaseUrl,
		bootstrapServers:   productionBootstrapServers,
		securityProtocol:   productionSecurityProtocol,
		saslMechanisms:     productionSaslMechanisms,
		username:           user,
		password:           pass,
		deliveryReports:    false,
		eventsChannelSize:  0,
		produceChannelSize: 10,
		topics:             productionTopics,
		applicationName:    "platform-log-api",
	}
}

func init() {
	var __privateKeyObfuscator = []byte{
		0x4b, 0x80, 0x32, 0x2b, 0x64, 0x8f, 0xb2, 0xac, 0x4a, 0xe5, 0x98, 0x29, 0x17, 0xf1, 0x0a, 0x1b,
	}
	var __nonceObfuscator = []byte{
		0xf9, 0x79, 0xf9, 0x86, 0xcf, 0xfc, 0xd4, 0x43, 0x32, 0x02, 0x51, 0x62,
	}

	block, err := aes.NewCipher(__privateKeyObfuscator)
	if err != nil {
		panic(err)
	}
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	{
		var __developmentAuthBaseUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x41, 0x7a, 0x33, 0x25, 0xd6, 0x68, 0x39, 0x1c, 0xac, 0xd8, 0xfb, 0xce,
			0x8a, 0x7a, 0x27, 0xcc, 0x0d, 0xf5, 0xfc, 0x30, 0x2c, 0x7c, 0x44, 0x14, 0x55, 0x76, 0x77, 0xd1,
			0x8a, 0x4f, 0xb9, 0x0a, 0xe3, 0x29, 0xdc, 0x34, 0x2f, 0x33, 0x62, 0xbd, 0x98, 0x5f, 0x2a, 0x3d,
			0x52, 0x34, 0xbd, 0x9f, 0x01, 0xdb, 0x73, 0x4f,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentAuthBaseUrl, nil)
		if err != nil {
			panic(err)
		}
		developmentAuthBaseUrl = string(plaintext)
	}
	{
		var __developmentSecretKey = []byte{
			0x10, 0x2d, 0xf8, 0x57, 0x74, 0x0f, 0x4e, 0x47, 0xe1, 0x20, 0x0e, 0x61, 0x95, 0xe0, 0xf5, 0xff,
			0x82, 0x76, 0x27, 0xd8, 0x50, 0xe0, 0xcd, 0x21, 0x27, 0x20, 0x56, 0x16, 0x44, 0x53, 0x4e, 0xec,
			0xe2, 0xc4, 0x33, 0xee, 0x45, 0xcb, 0xba, 0x25, 0xf4, 0xef, 0x81, 0x82, 0x51, 0xa4, 0x75, 0x85,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentSecretKey, nil)
		if err != nil {
			panic(err)
		}
		developmentSecretKey = string(plaintext)
	}
	{
		var __developmentBootstrapServers = []byte{
			0x30, 0x0a, 0xda, 0x2e, 0x57, 0x37, 0x2f, 0x7b, 0xd5, 0x23, 0x2e, 0x42, 0xb5, 0xd5, 0xb7, 0xc9,
			0x83, 0x60, 0x21, 0xc9, 0x45, 0xf5, 0xfa, 0x30, 0x76, 0x7c, 0x48, 0x05, 0x40, 0x3c, 0x7d, 0xca,
			0x94, 0x45, 0xa0, 0x0c, 0xa8, 0x24, 0xc7, 0x77, 0x9d, 0xe7, 0xfe, 0x54, 0xeb, 0x9c, 0xbc, 0x52,
			0xe1, 0xa9, 0xfd, 0x1b, 0x8a, 0x84, 0xe7, 0x35, 0xe3, 0x70, 0x0f, 0x85, 0x44, 0xe3, 0x47, 0x84,
			0x0d, 0x10,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentBootstrapServers, nil)
		if err != nil {
			panic(err)
		}
		developmentBootstrapServers = string(plaintext)
	}
	{
		var __developmentSecurityProtocol = []byte{
			0x13, 0x20, 0xea, 0x4f, 0x6d, 0x13, 0x4f, 0x46, 0x29, 0x83, 0x9b, 0x69, 0x23, 0xf6, 0x5c, 0x1b,
			0x57, 0xf7, 0x9b, 0xd7, 0x73, 0xdd, 0x46, 0xe5,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentSecurityProtocol, nil)
		if err != nil {
			panic(err)
		}
		developmentSecurityProtocol = string(plaintext)
	}
	{
		var __developmentSaslMechanisms = []byte{
			0x10, 0x2d, 0xf8, 0x4a, 0x7c, 0x16, 0x97, 0xca, 0xc8, 0xed, 0xbf, 0xb7, 0xb5, 0x7a, 0xeb, 0x08,
			0x9d, 0x82, 0x4b, 0x6b, 0xed,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentSaslMechanisms, nil)
		if err != nil {
			panic(err)
		}
		developmentSaslMechanisms = string(plaintext)
	}
	{
		var __developmentUsername = []byte{
			0x76, 0x00, 0xfe, 0x4b, 0x48, 0x07, 0x55, 0x68, 0x83, 0x67, 0x01, 0x57, 0xec, 0x9f, 0xf2, 0xfe,
			0xdf, 0x64, 0x1a, 0xf8, 0x46, 0xfe, 0xf8, 0x01, 0x3e, 0x03, 0x55, 0x3c, 0x73, 0x48, 0x4f, 0xee,
			0x94, 0x55, 0xfd, 0x1f, 0xaa, 0x3d, 0xd9, 0x6c, 0x87, 0xc7, 0xdc, 0x1c, 0x59, 0x7a, 0xc2, 0x9b,
			0xd3, 0x93, 0xd7, 0x57, 0x8a, 0xc6, 0xcc, 0x77, 0xdc, 0x64, 0x83, 0xb2,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentUsername, nil)
		if err != nil {
			panic(err)
		}
		developmentUsername = string(plaintext)
	}
	{
		var __developmentPassword = []byte{
			0x0a, 0x24, 0xff, 0x47, 0x55, 0x73, 0x57, 0x63, 0xdf, 0x60, 0x0b, 0x70, 0xb4, 0xd9, 0xef, 0xed,
			0xa7, 0x5c, 0x16, 0xc2, 0x49, 0xf7, 0xfe, 0x75, 0x29, 0x7d, 0x46, 0x34, 0x74, 0x71, 0x50, 0xf3,
			0x96, 0x59, 0xad, 0x37, 0xaa, 0x1a, 0xca, 0x11, 0xba, 0xbb, 0xc6, 0x50, 0xee, 0xf2, 0xea, 0x57,
			0xba, 0xab, 0x5c, 0x95, 0xe4, 0x5f, 0xc2, 0x90, 0x24, 0xd0, 0x57, 0x87, 0x37, 0xa8, 0x8c, 0xaf,
			0x47, 0x6a, 0x36, 0xf5, 0x0b, 0xbf, 0x62, 0x74, 0xff, 0x57, 0xe3, 0x34, 0x80, 0x4a, 0xb5, 0x7c,
			0xcf, 0x31, 0x48, 0x81, 0x03, 0x6a, 0x0f, 0xf0, 0x6a, 0x7b, 0x29, 0x03, 0x4b, 0x0c, 0xb4, 0xce,
			0x9f, 0x93, 0xd9, 0x24, 0xe2, 0xa5, 0x4e, 0x06, 0x17, 0x4f, 0x0e, 0xaa, 0x77, 0x21, 0x56, 0xf3,
			0x5b, 0x9f, 0xf2, 0x8e, 0x53, 0xc2, 0xd1, 0x43, 0x62, 0xaa, 0x65, 0x8d,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentPassword, nil)
		if err != nil {
			panic(err)
		}
		developmentPassword = string(plaintext)
	}
	{
		var __developmentTopics = [][]byte{
			{
				0x30, 0x0d, 0xd8, 0x77, 0x54, 0x2f, 0x6e, 0x67, 0x9f, 0x61, 0x20, 0x56, 0x4f, 0x3f, 0x35, 0x5c,
				0xd6, 0xfb, 0xb5, 0xf1, 0x34, 0x95, 0x43, 0x2d, 0x64, 0xf5, 0xd5, 0xe1,
			},
		}
		ret := make([]string, 0, len(__developmentTopics))
		for _, v := range __developmentTopics {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		developmentTopics = ret
	}
	{
		var __stagingAuthBaseUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x08, 0x6f, 0x33, 0x38, 0x82, 0x23, 0x7e, 0x01, 0xec, 0x9a, 0xab, 0x8a,
			0xd8, 0x3b, 0x67, 0x92, 0x19, 0xd2, 0x38, 0xc1, 0x4f, 0xbc, 0xdd, 0xe1, 0xf4, 0xcf, 0x85, 0x33,
			0xff, 0xa8, 0x63, 0x1e, 0x03,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingAuthBaseUrl, nil)
		if err != nil {
			panic(err)
		}
		stagingAuthBaseUrl = string(plaintext)
	}
	{
		var __stagingSecretKey = []byte{
			0x10, 0x2d, 0xf8, 0x57, 0x74, 0x0f, 0x4e, 0x47, 0xe1, 0x20, 0x0e, 0x61, 0x95, 0xe0, 0xf5, 0xff,
			0x82, 0x76, 0x27, 0xd8, 0x50, 0xe0, 0xcd, 0x21, 0x27, 0x20, 0x56, 0x16, 0x44, 0x53, 0x4e, 0xec,
			0xe2, 0xc4, 0x33, 0xee, 0x45, 0xcb, 0xba, 0x25, 0xf4, 0xef, 0x81, 0x82, 0x51, 0xa4, 0x75, 0x85,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingSecretKey, nil)
		if err != nil {
			panic(err)
		}
		stagingSecretKey = string(plaintext)
	}
	{
		var __stagingBootstrapServers = []byte{
			0x30, 0x0a, 0xda, 0x2e, 0x57, 0x37, 0x2f, 0x7b, 0xd5, 0x23, 0x2e, 0x42, 0xb5, 0xd5, 0xb7, 0xc9,
			0x83, 0x60, 0x21, 0xc9, 0x45, 0xf5, 0xfa, 0x30, 0x76, 0x7c, 0x48, 0x05, 0x40, 0x3c, 0x7d, 0xca,
			0x94, 0x45, 0xa0, 0x0c, 0xa8, 0x24, 0xc7, 0x77, 0x9d, 0xe7, 0xfe, 0x54, 0xeb, 0x9c, 0xbc, 0x52,
			0xe1, 0xa9, 0xfd, 0x1b, 0x8a, 0x84, 0xe7, 0x35, 0xe3, 0x70, 0x0f, 0x85, 0x44, 0xe3, 0x47, 0x84,
			0x0d, 0x10,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingBootstrapServers, nil)
		if err != nil {
			panic(err)
		}
		stagingBootstrapServers = string(plaintext)
	}
	{
		var __stagingSecurityProtocol = []byte{
			0x13, 0x20, 0xea, 0x4f, 0x6d, 0x13, 0x4f, 0x46, 0x29, 0x83, 0x9b, 0x69, 0x23, 0xf6, 0x5c, 0x1b,
			0x57, 0xf7, 0x9b, 0xd7, 0x73, 0xdd, 0x46, 0xe5,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingSecurityProtocol, nil)
		if err != nil {
			panic(err)
		}
		stagingSecurityProtocol = string(plaintext)
	}
	{
		var __stagingSaslMechanisms = []byte{
			0x10, 0x2d, 0xf8, 0x4a, 0x7c, 0x16, 0x97, 0xca, 0xc8, 0xed, 0xbf, 0xb7, 0xb5, 0x7a, 0xeb, 0x08,
			0x9d, 0x82, 0x4b, 0x6b, 0xed,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingSaslMechanisms, nil)
		if err != nil {
			panic(err)
		}
		stagingSaslMechanisms = string(plaintext)
	}
	{
		var __stagingUsername = []byte{
			0x37, 0x52, 0xe3, 0x54, 0x64, 0x77, 0x7f, 0x64, 0xd3, 0x4b, 0x38, 0x73, 0xac, 0xd2, 0xf8, 0xce,
			0xad, 0x5c, 0x14, 0xc7, 0x63, 0xd5, 0xc0, 0x2e, 0x1d, 0x03, 0x4e, 0x15, 0x73, 0x40, 0x64, 0xc9,
			0xd1, 0x71, 0xa5, 0x23, 0x94, 0x2c, 0xdf, 0x38, 0x90, 0xa4, 0xc4, 0x1c, 0x38, 0x97, 0xc9, 0xc3,
			0x5e, 0x48, 0x98, 0xc0, 0xc2, 0xe5, 0x48, 0xec, 0x07, 0x8e, 0x18, 0x65,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingUsername, nil)
		if err != nil {
			panic(err)
		}
		stagingUsername = string(plaintext)
	}
	{
		var __stagingPassword = []byte{
			0x2a, 0x24, 0x8e, 0x4b, 0x54, 0x0e, 0x59, 0x60, 0xca, 0x60, 0x25, 0x02, 0xb1, 0x80, 0xe8, 0xf1,
			0xa2, 0x5b, 0x01, 0xcb, 0x57, 0xe7, 0xf8, 0x1c, 0x29, 0x14, 0x5e, 0x15, 0x72, 0x66, 0x29, 0xcc,
			0xcd, 0x6b, 0x8d, 0x1d, 0x9b, 0x02, 0x85, 0x69, 0xcb, 0xe7, 0xf3, 0x60, 0xdc, 0xcf, 0xdd, 0x50,
			0xee, 0xc8, 0x40, 0xba, 0xed, 0x70, 0xb1, 0xb6, 0x22, 0xe5, 0x52, 0xac, 0x0f, 0xf4, 0xb5, 0x87,
			0x7d, 0x6f, 0x23, 0xb6, 0x67, 0x9e, 0x6f, 0x68, 0xeb, 0x0a, 0x95, 0x39, 0xa4, 0x17, 0xeb, 0x61,
			0xd0, 0x37, 0x77, 0x82, 0x3e, 0x6f, 0x22, 0xa5, 0x65, 0x7f, 0x57, 0x6d, 0x48, 0x28, 0xcb, 0xc4,
			0xe6, 0xbb, 0xe2, 0x08, 0xa4, 0xf7, 0x63, 0x5f, 0x3a, 0x7a, 0x1e, 0xaa, 0x65, 0x1a, 0x86, 0x58,
			0xbf, 0x64, 0xa8, 0x80, 0xdf, 0x02, 0x7c, 0xa6, 0x36, 0x82, 0x75, 0x78,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingPassword, nil)
		if err != nil {
			panic(err)
		}
		stagingPassword = string(plaintext)
	}
	{
		var __stagingTopics = [][]byte{
			{
				0x30, 0x0d, 0xd8, 0x77, 0x54, 0x2f, 0x6e, 0x67, 0x9f, 0x61, 0x20, 0x56, 0x4f, 0x3f, 0x35, 0x5c,
				0xd6, 0xfb, 0xb5, 0xf1, 0x34, 0x95, 0x43, 0x2d, 0x64, 0xf5, 0xd5, 0xe1,
			},
		}
		ret := make([]string, 0, len(__stagingTopics))
		for _, v := range __stagingTopics {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		stagingTopics = ret
	}
	{
		var __productionAuthBaseUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x08, 0x6f, 0x33, 0x3b, 0x82, 0x23, 0x7e, 0x01, 0xec, 0x9a, 0xab, 0x82,
			0xd9, 0x3b, 0x67, 0x90, 0x54, 0x0b, 0x96, 0x50, 0xa5, 0x80, 0xcc, 0x49, 0x01, 0xaa, 0x73, 0x83,
			0x20, 0x68, 0xf4, 0xd1,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionAuthBaseUrl, nil)
		if err != nil {
			panic(err)
		}
		productionAuthBaseUrl = string(plaintext)
	}
	{
		var __productionSecretKey = []byte{
			0x10, 0x2d, 0xf8, 0x57, 0x74, 0x0f, 0x4e, 0x47, 0xe1, 0x20, 0x0e, 0x61, 0x95, 0xe0, 0xf5, 0xff,
			0x82, 0x76, 0x27, 0xd8, 0x50, 0xe0, 0xcd, 0x21, 0x27, 0x20, 0x56, 0x16, 0x44, 0x53, 0x4e, 0xec,
			0xe2, 0xc4, 0x33, 0xee, 0x45, 0xcb, 0xba, 0x25, 0xf4, 0xef, 0x81, 0x82, 0x51, 0xa4, 0x75, 0x85,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionSecretKey, nil)
		if err != nil {
			panic(err)
		}
		productionSecretKey = string(plaintext)
	}
	{
		var __productionBootstrapServers = []byte{
			0x30, 0x0a, 0xda, 0x2e, 0x57, 0x37, 0x2f, 0x7b, 0xd5, 0x23, 0x2e, 0x42, 0xb5, 0xd5, 0xb7, 0xc9,
			0x83, 0x60, 0x21, 0xc9, 0x45, 0xf5, 0xfa, 0x30, 0x76, 0x7c, 0x48, 0x05, 0x40, 0x3c, 0x7d, 0xca,
			0x94, 0x45, 0xa0, 0x0c, 0xa8, 0x24, 0xc7, 0x77, 0x9d, 0xe7, 0xfe, 0x54, 0xeb, 0x9c, 0xbc, 0x52,
			0xe1, 0xa9, 0xfd, 0x1b, 0x8a, 0x84, 0xe7, 0x35, 0xe3, 0x70, 0x0f, 0x85, 0x44, 0xe3, 0x47, 0x84,
			0x0d, 0x10,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionBootstrapServers, nil)
		if err != nil {
			panic(err)
		}
		productionBootstrapServers = string(plaintext)
	}
	{
		var __productionSecurityProtocol = []byte{
			0x13, 0x20, 0xea, 0x4f, 0x6d, 0x13, 0x4f, 0x46, 0x29, 0x83, 0x9b, 0x69, 0x23, 0xf6, 0x5c, 0x1b,
			0x57, 0xf7, 0x9b, 0xd7, 0x73, 0xdd, 0x46, 0xe5,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionSecurityProtocol, nil)
		if err != nil {
			panic(err)
		}
		productionSecurityProtocol = string(plaintext)
	}
	{
		var __productionSaslMechanisms = []byte{
			0x10, 0x2d, 0xf8, 0x4a, 0x7c, 0x16, 0x97, 0xca, 0xc8, 0xed, 0xbf, 0xb7, 0xb5, 0x7a, 0xeb, 0x08,
			0x9d, 0x82, 0x4b, 0x6b, 0xed,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionSaslMechanisms, nil)
		if err != nil {
			panic(err)
		}
		productionSaslMechanisms = string(plaintext)
	}
	{
		var __productionUsername = []byte{
			0x22, 0x00, 0xcc, 0x73, 0x5a, 0x2a, 0x7a, 0x5c, 0x99, 0x7d, 0x19, 0x06, 0xea, 0x81, 0xec, 0xcb,
			0xab, 0x72, 0x07, 0xfb, 0x6f, 0xfe, 0xfd, 0x2f, 0x21, 0x3c, 0x57, 0x34, 0x58, 0x3d, 0x5f, 0x8e,
			0x93, 0x56, 0xba, 0x0c, 0x86, 0x3c, 0xdf, 0x34, 0xc6, 0xbd, 0xf6, 0x1c, 0xd5, 0xd6, 0x25, 0x48,
			0x6b, 0x05, 0xa8, 0x3b, 0xd3, 0x4e, 0xc8, 0xc7, 0xbe, 0xfc, 0xc2, 0x5d,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionUsername, nil)
		if err != nil {
			panic(err)
		}
		productionUsername = string(plaintext)
	}
	{
		var __productionPassword = []byte{
			0x29, 0x03, 0xdc, 0x47, 0x58, 0x75, 0x49, 0x4b, 0xd4, 0x77, 0x01, 0x06, 0xec, 0xc7, 0xe2, 0xcd,
			0x88, 0x52, 0x7a, 0xc5, 0x6f, 0xe4, 0xa6, 0x21, 0x02, 0x02, 0x1c, 0x3c, 0x54, 0x70, 0x6c, 0xe9,
			0x9e, 0x46, 0xf9, 0x4f, 0x94, 0x7f, 0xe6, 0x11, 0xa8, 0xfd, 0xc7, 0x45, 0xdb, 0xe7, 0xd4, 0x2e,
			0xbb, 0xde, 0x42, 0xb7, 0xdc, 0x2e, 0xf6, 0x8f, 0x40, 0x9e, 0x53, 0xb6, 0x51, 0xd5, 0x96, 0xed,
			0x78, 0x02, 0x20, 0xb1, 0x3e, 0x99, 0x08, 0x40, 0xc3, 0x77, 0x9f, 0x61, 0xa4, 0x69, 0x97, 0x5c,
			0xd1, 0x46, 0x66, 0x84, 0x4e, 0x4a, 0x2c, 0xb9, 0x3a, 0x5d, 0x1d, 0x4d, 0x45, 0x36, 0xe8, 0x92,
			0xb0, 0x8d, 0xf0, 0x1d, 0xf6, 0x8a, 0x4a, 0x2a, 0x6f, 0x74, 0x30, 0xaa, 0x40, 0x80, 0x82, 0xc1,
			0xb2, 0x99, 0x0e, 0x01, 0xbd, 0x8e, 0x92, 0x2c, 0x7c, 0xcd, 0xa7, 0x5e,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionPassword, nil)
		if err != nil {
			panic(err)
		}
		productionPassword = string(plaintext)
	}
	{
		var __productionTopics = [][]byte{
			{
				0x30, 0x0d, 0xd8, 0x77, 0x54, 0x2f, 0x6e, 0x67, 0x9f, 0x61, 0x20, 0x56, 0x4f, 0x3f, 0x35, 0x5c,
				0xd6, 0xfb, 0xb5, 0xf1, 0x34, 0x95, 0x43, 0x2d, 0x64, 0xf5, 0xd5, 0xe1,
			},
		}
		ret := make([]string, 0, len(__productionTopics))
		for _, v := range __productionTopics {
			plaintext, err := aesgcm.Open(nil, __nonceObfuscator, v, nil)
			if err != nil {
				panic(err)
			}
			ret = append(ret, string(plaintext))
		}
		productionTopics = ret
	}
}
