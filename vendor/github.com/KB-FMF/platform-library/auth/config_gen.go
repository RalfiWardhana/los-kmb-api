// Code generated by "strobfus" v0.0.2; DO NOT EDIT.
// source: https://github.com/znly/strobfus

package auth

import (
	"crypto/aes"
	"crypto/cipher"
)

var (
	developmentAuthServiceUrl        = ""
	developmentHttpTimeOut           = 30
	developmentDialContextTimeOut    = 29
	developmentDialContextKeepAlive  = 29
	developmentForceAttemptHTTP2     = true
	developmentMaxIdleConns          = 100
	developmentMaxIdleConnsPerHost   = 100
	developmentIdleConnTimeout       = 29
	developmentTLSHandshakeTimeout   = 29
	developmentExpectContinueTimeout = 29
	developmentSimpleHttp            = true
	developmentDisableKeepAlive      = true

	stagingAuthServiceUrl        = ""
	stagingHttpTimeOut           = 30
	stagingDialContextTimeOut    = 29
	stagingDialContextKeepAlive  = 29
	stagingForceAttemptHTTP2     = true
	stagingMaxIdleConns          = 100
	stagingMaxIdleConnsPerHost   = 100
	stagingIdleConnTimeout       = 29
	stagingTLSHandshakeTimeout   = 29
	stagingExpectContinueTimeout = 29
	stagingSimpleHttp            = true
	stagingDisableKeepAlive      = true

	productionAuthServiceUrl        = ""
	productionHttpTimeOut           = 30
	productionDialContextTimeOut    = 29
	productionDialContextKeepAlive  = 29
	productionForceAttemptHTTP2     = true
	productionMaxIdleConns          = 100
	productionMaxIdleConnsPerHost   = 100
	productionIdleConnTimeout       = 29
	productionTLSHandshakeTimeout   = 29
	productionExpectContinueTimeout = 29
	productionSimpleHttp            = true
	productionDisableKeepAlive      = true
)

type Config struct {
	authServiceUrl        string
	httpTimeout           int
	dialContextTimeout    int
	dialContextKeepAlive  int
	forceAttemptHttp2     bool
	maxIdleConns          int
	maxIdleConnsPerHost   int
	idleConnTimeout       int
	tlsHandshakeTimeout   int
	expectContinueTimeout int
	simpleHttp            bool
	disableKeepAlive      bool
}

func newDevelopmentConfig() Config {

	return Config{
		authServiceUrl:        developmentAuthServiceUrl,
		httpTimeout:           developmentHttpTimeOut,
		dialContextTimeout:    developmentDialContextTimeOut,
		dialContextKeepAlive:  developmentDialContextKeepAlive,
		forceAttemptHttp2:     developmentForceAttemptHTTP2,
		maxIdleConns:          developmentMaxIdleConns,
		maxIdleConnsPerHost:   developmentMaxIdleConnsPerHost,
		idleConnTimeout:       developmentIdleConnTimeout,
		tlsHandshakeTimeout:   developmentTLSHandshakeTimeout,
		expectContinueTimeout: developmentExpectContinueTimeout,
		simpleHttp:            developmentSimpleHttp,
		disableKeepAlive:      developmentDisableKeepAlive,
	}
}

func newStagingConfig() Config {

	return Config{
		authServiceUrl:        stagingAuthServiceUrl,
		httpTimeout:           stagingHttpTimeOut,
		dialContextTimeout:    stagingDialContextTimeOut,
		dialContextKeepAlive:  stagingDialContextKeepAlive,
		forceAttemptHttp2:     stagingForceAttemptHTTP2,
		maxIdleConns:          stagingMaxIdleConns,
		maxIdleConnsPerHost:   stagingMaxIdleConnsPerHost,
		idleConnTimeout:       stagingIdleConnTimeout,
		tlsHandshakeTimeout:   stagingTLSHandshakeTimeout,
		expectContinueTimeout: stagingExpectContinueTimeout,
		simpleHttp:            stagingSimpleHttp,
		disableKeepAlive:      stagingDisableKeepAlive,
	}
}

func newProductionConfig() Config {

	return Config{
		authServiceUrl:        productionAuthServiceUrl,
		httpTimeout:           productionHttpTimeOut,
		dialContextTimeout:    productionDialContextTimeOut,
		dialContextKeepAlive:  productionDialContextKeepAlive,
		forceAttemptHttp2:     productionForceAttemptHTTP2,
		maxIdleConns:          productionMaxIdleConns,
		maxIdleConnsPerHost:   productionMaxIdleConnsPerHost,
		idleConnTimeout:       productionIdleConnTimeout,
		tlsHandshakeTimeout:   productionTLSHandshakeTimeout,
		expectContinueTimeout: productionExpectContinueTimeout,
		simpleHttp:            productionSimpleHttp,
		disableKeepAlive:      productionDisableKeepAlive,
	}
}

func init() {
	var __privateKeyObfuscator = []byte{
		0x4b, 0x80, 0x32, 0x2b, 0x64, 0x8f, 0xb2, 0xac, 0x4a, 0xe5, 0x98, 0x29, 0x17, 0xf1, 0x0a, 0x1b,
	}
	var __nonceObfuscator = []byte{
		0xf9, 0x79, 0xf9, 0x86, 0xcf, 0xfc, 0xd4, 0x43, 0x32, 0x02, 0x51, 0x62,
	}

	block, err := aes.NewCipher(__privateKeyObfuscator)
	if err != nil {
		panic(err)
	}
	aesgcm, err := cipher.NewGCM(block)
	if err != nil {
		panic(err)
	}
	{
		var __developmentAuthServiceUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x41, 0x7a, 0x33, 0x25, 0xd6, 0x68, 0x39, 0x1c, 0xac, 0xd8, 0xfb, 0xce,
			0x8a, 0x7a, 0x27, 0xcc, 0x0d, 0xf5, 0xfc, 0x30, 0x2c, 0x7c, 0x44, 0x14, 0x55, 0x76, 0x77, 0xd1,
			0x8a, 0x4f, 0xb9, 0x0a, 0xe3, 0x29, 0xdc, 0x34, 0x2f, 0x33, 0x62, 0xbd, 0x98, 0x5f, 0x2a, 0x3d,
			0x52, 0x34, 0xbd, 0x9f, 0x01, 0xdb, 0x73, 0x4f,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __developmentAuthServiceUrl, nil)
		if err != nil {
			panic(err)
		}
		developmentAuthServiceUrl = string(plaintext)
	}
	{
		var __stagingAuthServiceUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x08, 0x6f, 0x33, 0x38, 0x82, 0x23, 0x7e, 0x01, 0xec, 0x9a, 0xab, 0x8a,
			0xd8, 0x3b, 0x67, 0x92, 0x19, 0xd2, 0x38, 0xc1, 0x4f, 0xbc, 0xdd, 0xe1, 0xf4, 0xcf, 0x85, 0x33,
			0xff, 0xa8, 0x63, 0x1e, 0x03,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __stagingAuthServiceUrl, nil)
		if err != nil {
			panic(err)
		}
		stagingAuthServiceUrl = string(plaintext)
	}
	{
		var __productionAuthServiceUrl = []byte{
			0x28, 0x15, 0xcd, 0x73, 0x08, 0x6f, 0x33, 0x3b, 0x82, 0x23, 0x7e, 0x01, 0xec, 0x9a, 0xab, 0x82,
			0xd9, 0x3b, 0x67, 0x90, 0x54, 0x0b, 0x96, 0x50, 0xa5, 0x80, 0xcc, 0x49, 0x01, 0xaa, 0x73, 0x83,
			0x20, 0x68, 0xf4, 0xd1,
		}
		plaintext, err := aesgcm.Open(nil, __nonceObfuscator, __productionAuthServiceUrl, nil)
		if err != nil {
			panic(err)
		}
		productionAuthServiceUrl = string(plaintext)
	}
}
